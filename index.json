{
  "api/Supabase.Client.html": {
    "href": "api/Supabase.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase Assembly Supabase.dll A singleton class representing a Supabase Client. public class Client : ISupabaseClient<User, Session, RealtimeSocket, RealtimeChannel, Bucket, FileObject> Inheritance object Client Implements ISupabaseClient<User, Session, RealtimeSocket, RealtimeChannel, Bucket, FileObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(IGotrueClient<User, Session>, IRealtimeClient<RealtimeSocket, RealtimeChannel>, IFunctionsClient, IPostgrestClient, IStorageClient<Bucket, FileObject>, SupabaseOptions) Constructor supplied for dependency injection support. public Client(IGotrueClient<User, Session> auth, IRealtimeClient<RealtimeSocket, RealtimeChannel> realtime, IFunctionsClient functions, IPostgrestClient postgrest, IStorageClient<Bucket, FileObject> storage, SupabaseOptions options) Parameters auth IGotrueClient<User, Session> realtime IRealtimeClient<RealtimeSocket, RealtimeChannel> functions IFunctionsClient postgrest IPostgrestClient storage IStorageClient<Bucket, FileObject> options SupabaseOptions Client(string, string?, SupabaseOptions?) Creates a new Supabase Client. public Client(string supabaseUrl, string? supabaseKey, SupabaseOptions? options = null) Parameters supabaseUrl string supabaseKey string options SupabaseOptions Properties Auth Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies. public IGotrueClient<User, Session> Auth { get; set; } Property Value IGotrueClient<User, Session> Functions Supabase Edge functions allow you to deploy and invoke edge functions. public IFunctionsClient Functions { get; set; } Property Value IFunctionsClient Postgrest Supabase Postgrest allows for strongly typed REST interactions with the your database. public IPostgrestClient Postgrest { get; set; } Property Value IPostgrestClient Realtime Supabase Realtime allows for realtime feedback on database changes. public IRealtimeClient<RealtimeSocket, RealtimeChannel> Realtime { get; set; } Property Value IRealtimeClient<RealtimeSocket, RealtimeChannel> Storage Supabase Storage allows you to manage user-generated content, such as photos or videos. public IStorageClient<Bucket, FileObject> Storage { get; set; } Property Value IStorageClient<Bucket, FileObject> Methods AdminAuth(string) Returns a Stateless Gotrue Admin client given a service_key JWT. This should really only be accessed from a server environment where a private service_key would remain secure. public IGotrueAdminClient<User> AdminAuth(string serviceKey) Parameters serviceKey string Returns IGotrueAdminClient<User> From<TModel>() Gets the Postgrest client to prepare for a query. public ISupabaseTable<TModel, RealtimeChannel> From<TModel>() where TModel : BaseModel, new() Returns ISupabaseTable<TModel, RealtimeChannel> Type Parameters TModel InitializeAsync() Attempts to retrieve the session from Gotrue (set in SupabaseOptions) and connects to realtime (if options.AutoConnectRealtime is set) public Task<ISupabaseClient<User, Session, RealtimeSocket, RealtimeChannel, Bucket, FileObject>> InitializeAsync() Returns Task<ISupabaseClient<User, Session, RealtimeSocket, RealtimeChannel, Bucket, FileObject>> Rpc(string, object?) Perform a stored procedure call. public Task<BaseResponse> Rpc(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. public Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET)"
  },
  "api/Supabase.Core.Attributes.MapToAttribute.html": {
    "href": "api/Supabase.Core.Attributes.MapToAttribute.html",
    "title": "Class MapToAttribute | supabase-csharp",
    "keywords": "Class MapToAttribute Namespace Supabase.Core.Attributes Assembly Supabase.Core.dll Used internally to add a string value to a C# field. [AttributeUsage(AttributeTargets.Field)] public class MapToAttribute : Attribute Inheritance object Attribute MapToAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapToAttribute(string, string?) Creates a Mapping to be used internally. For example, specifying an Enum that has a different string value elsewhere. public MapToAttribute(string mapping, string? formatter = null) Parameters mapping string formatter string Properties Formatter A formatter to be passed into the ToString() method. public string? Formatter { get; set; } Property Value string Mapping The externally specified target value. public string Mapping { get; set; } Property Value string"
  },
  "api/Supabase.Core.Attributes.html": {
    "href": "api/Supabase.Core.Attributes.html",
    "title": "Namespace Supabase.Core.Attributes | supabase-csharp",
    "keywords": "Namespace Supabase.Core.Attributes Classes MapToAttribute Used internally to add a string value to a C# field."
  },
  "api/Supabase.Core.Extensions.DictionaryExtensions.html": {
    "href": "api/Supabase.Core.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | supabase-csharp",
    "keywords": "Class DictionaryExtensions Namespace Supabase.Core.Extensions Assembly Supabase.Core.dll Extensions for the Dictionary Classes public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Merges two dictionaries, allowing overwrite priorities leftward. Works in C#3/VS2008: Returns a new dictionary of this ... others merged leftward. Keeps the type of 'this', which must be default-instantiable. Example: result = map.MergeLeft(other1, other2, ...) From: https://stackoverflow.com/a/2679857/3629438 public static T MergeLeft<T, K, V>(this T me, params IDictionary<K, V>[] others) where T : IDictionary<K, V>, new() Parameters me T others IDictionary<K, V>[] Returns T Type Parameters T K V"
  },
  "api/Supabase.Core.Extensions.html": {
    "href": "api/Supabase.Core.Extensions.html",
    "title": "Namespace Supabase.Core.Extensions | supabase-csharp",
    "keywords": "Namespace Supabase.Core.Extensions Classes DictionaryExtensions Extensions for the Dictionary Classes"
  },
  "api/Supabase.Core.Helpers.html": {
    "href": "api/Supabase.Core.Helpers.html",
    "title": "Class Helpers | supabase-csharp",
    "keywords": "Class Helpers Namespace Supabase.Core Assembly Supabase.Core.dll Shortcut Methods, mostly focused on getting attributes from class properties and enums. public static class Helpers Inheritance object Helpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCustomAttribute<T>(object) Returns a cast Custom Attribute from a given object. public static T GetCustomAttribute<T>(object obj) where T : Attribute Parameters obj object Returns T Type Parameters T GetCustomAttribute<T>(Type) Returns a cast Custom Attribute from a given type. public static T GetCustomAttribute<T>(Type type) where T : Attribute Parameters type Type Returns T Type Parameters T GetMappedToAttr(Enum) Shortcut method for accessing a MapTo attribute, combined with an Enum. public static MapToAttribute GetMappedToAttr(Enum obj) Parameters obj Enum Returns MapToAttribute GetPropertyValue<T>(object, string) Returns the current value from a given class property public static T GetPropertyValue<T>(object obj, string propName) Parameters obj object propName string Returns T Type Parameters T"
  },
  "api/Supabase.Core.Interfaces.IGettableHeaders.html": {
    "href": "api/Supabase.Core.Interfaces.IGettableHeaders.html",
    "title": "Interface IGettableHeaders | supabase-csharp",
    "keywords": "Interface IGettableHeaders Namespace Supabase.Core.Interfaces Assembly Supabase.Core.dll Used for classes that need to retrieve Headers externally. public interface IGettableHeaders Properties GetHeaders An executable Func that returns a dictionary of headers to be appended onto a request. Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>>"
  },
  "api/Supabase.Core.Interfaces.html": {
    "href": "api/Supabase.Core.Interfaces.html",
    "title": "Namespace Supabase.Core.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Core.Interfaces Interfaces IGettableHeaders Used for classes that need to retrieve Headers externally."
  },
  "api/Supabase.Core.Util.html": {
    "href": "api/Supabase.Core.Util.html",
    "title": "Class Util | supabase-csharp",
    "keywords": "Class Util Namespace Supabase.Core Assembly Supabase.Core.dll A shared utilities class public static class Util Inheritance object Util Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAssemblyVersion(Type) Returns the Current Assembly version - this is usually appended into the headers of each request. public static string GetAssemblyVersion(Type clientType) Parameters clientType Type Returns string"
  },
  "api/Supabase.Core.html": {
    "href": "api/Supabase.Core.html",
    "title": "Namespace Supabase.Core | supabase-csharp",
    "keywords": "Namespace Supabase.Core Classes Helpers Shortcut Methods, mostly focused on getting attributes from class properties and enums. Util A shared utilities class"
  },
  "api/Supabase.DefaultSupabaseSessionHandler.html": {
    "href": "api/Supabase.DefaultSupabaseSessionHandler.html",
    "title": "Class DefaultSupabaseSessionHandler | supabase-csharp",
    "keywords": "Class DefaultSupabaseSessionHandler Namespace Supabase Assembly Supabase.dll Represents the default session handler for Gotrue - it does nothing by default. public class DefaultSupabaseSessionHandler : IGotrueSessionPersistence<Session> Inheritance object DefaultSupabaseSessionHandler Implements IGotrueSessionPersistence<Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Methods DestroySession() Default Session Destroyer (does nothing by default) public void DestroySession() LoadSession() Default Session Loader (does nothing by default) public Session? LoadSession() Returns Session SaveSession(Session) Default Session Save (does nothing by default) public void SaveSession(Session session) Parameters session Session"
  },
  "api/Supabase.Functions.Client.InvokeFunctionOptions.html": {
    "href": "api/Supabase.Functions.Client.InvokeFunctionOptions.html",
    "title": "Class Client.InvokeFunctionOptions | supabase-csharp",
    "keywords": "Class Client.InvokeFunctionOptions Namespace Supabase.Functions Assembly Supabase.Functions.dll Options that can be supplied to a function invocation. Note: If Headers.Authorization is set, it can be later overriden if a token is supplied in the method call. public class Client.InvokeFunctionOptions Inheritance object Client.InvokeFunctionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Body Body of the Request [JsonProperty(\"body\")] public Dictionary<string, object> Body { get; set; } Property Value Dictionary<string, object> Headers Headers to be included on the request. public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> HttpTimeout Timout value for HttpClient Requests, defaults to 100s. https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-8.0#remarks public TimeSpan HttpTimeout { get; set; } Property Value TimeSpan"
  },
  "api/Supabase.Functions.Client.html": {
    "href": "api/Supabase.Functions.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase.Functions Assembly Supabase.Functions.dll public class Client : IFunctionsClient, IGettableHeaders Inheritance object Client Implements IFunctionsClient IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(string) Initializes a functions client public Client(string baseUrl) Parameters baseUrl string Properties GetHeaders Function that can be set to return dynamic headers. Headers specified in the method parameters will ALWAYS take precedence over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Methods Invoke(string, string?, InvokeFunctionOptions?) Invokes a function and returns the Text content of the response. public Task<string> Invoke(string functionName, string? token = null, Client.InvokeFunctionOptions? options = null) Parameters functionName string Function Name, will be appended to BaseUrl token string Anon Key. options Client.InvokeFunctionOptions Options Returns Task<string> Invoke<T>(string, string?, InvokeFunctionOptions?) Invokes a function and returns a JSON Deserialized object according to the supplied generic Type T public Task<T?> Invoke<T>(string functionName, string? token = null, Client.InvokeFunctionOptions? options = null) where T : class Parameters functionName string Function Name, will be appended to BaseUrl token string Anon Key. options Client.InvokeFunctionOptions Options Returns Task<T> Type Parameters T RawInvoke(string, string?, InvokeFunctionOptions?) Returns an HttpContent response, allowing for coersion into Streams, Strings, and byte[] public Task<HttpContent> RawInvoke(string functionName, string? token = null, Client.InvokeFunctionOptions? options = null) Parameters functionName string Function Name, will be appended to BaseUrl token string Anon Key. options Client.InvokeFunctionOptions Options Returns Task<HttpContent>"
  },
  "api/Supabase.Functions.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Functions.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | supabase-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Functions.Exceptions Assembly Supabase.Functions.dll A failure reason public enum FailureHint.Reason Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Internal = 2 An internal error occurred, check your supabase logs. NotAuthorized = 1 Request was not authorized Unknown = 0 An unknown reason"
  },
  "api/Supabase.Functions.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Functions.Exceptions.FailureHint.html",
    "title": "Class FailureHint | supabase-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Functions.Exceptions Assembly Supabase.Functions.dll A hint as to why a request failed. public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(FunctionsException) Attempts to detect a reason given an exception. public static FailureHint.Reason DetectReason(FunctionsException ex) Parameters ex FunctionsException Returns FailureHint.Reason"
  },
  "api/Supabase.Functions.Exceptions.FunctionsException.html": {
    "href": "api/Supabase.Functions.Exceptions.FunctionsException.html",
    "title": "Class FunctionsException | supabase-csharp",
    "keywords": "Class FunctionsException Namespace Supabase.Functions.Exceptions Assembly Supabase.Functions.dll An Exception thrown within Supabase.Functions public class FunctionsException : Exception, ISerializable Inheritance object Exception FunctionsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionsException(string?) public FunctionsException(string? message) Parameters message string FunctionsException(string?, Exception?) public FunctionsException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Content The Http response content public string? Content { get; } Property Value string Reason A parsed reason for a given failure public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response The Http Response public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode The Http Status code public int StatusCode { get; } Property Value int Methods AddReason() Attempts to detect a reason for this exception public void AddReason()"
  },
  "api/Supabase.Functions.Exceptions.html": {
    "href": "api/Supabase.Functions.Exceptions.html",
    "title": "Namespace Supabase.Functions.Exceptions | supabase-csharp",
    "keywords": "Namespace Supabase.Functions.Exceptions Classes FailureHint A hint as to why a request failed. FunctionsException An Exception thrown within Supabase.Functions Enums FailureHint.Reason A failure reason"
  },
  "api/Supabase.Functions.Interfaces.IFunctionsClient.html": {
    "href": "api/Supabase.Functions.Interfaces.IFunctionsClient.html",
    "title": "Interface IFunctionsClient | supabase-csharp",
    "keywords": "Interface IFunctionsClient Namespace Supabase.Functions.Interfaces Assembly Supabase.Functions.dll Represents a contract for a Supabase Functions Client public interface IFunctionsClient : IGettableHeaders Inherited Members IGettableHeaders.GetHeaders Methods Invoke(string, string?, InvokeFunctionOptions?) Invokes a function given a URL and access token. Returns the string content. Task<string> Invoke(string url, string? token = null, Client.InvokeFunctionOptions? options = null) Parameters url string token string options Client.InvokeFunctionOptions Returns Task<string> Invoke<T>(string, string?, InvokeFunctionOptions?) Invokes a function given a URL and access token. Returns a typed response (should be a JSON.net parsable object) Task<T?> Invoke<T>(string url, string? token = null, Client.InvokeFunctionOptions? options = null) where T : class Parameters url string token string options Client.InvokeFunctionOptions Returns Task<T> Type Parameters T RawInvoke(string, string?, InvokeFunctionOptions?) Invokes a function given a URL and access token. Returns the raw HTTP response. Task<HttpContent> RawInvoke(string url, string? token = null, Client.InvokeFunctionOptions? options = null) Parameters url string token string options Client.InvokeFunctionOptions Returns Task<HttpContent>"
  },
  "api/Supabase.Functions.Interfaces.html": {
    "href": "api/Supabase.Functions.Interfaces.html",
    "title": "Namespace Supabase.Functions.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Functions.Interfaces Interfaces IFunctionsClient Represents a contract for a Supabase Functions Client"
  },
  "api/Supabase.Functions.Responses.BaseResponse.html": {
    "href": "api/Supabase.Functions.Responses.BaseResponse.html",
    "title": "Class BaseResponse | supabase-csharp",
    "keywords": "Class BaseResponse Namespace Supabase.Functions.Responses Assembly Supabase.Functions.dll A wrapper class from which all Responses derive. public class BaseResponse Inheritance object BaseResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Content The response content. [JsonIgnore] public string? Content { get; set; } Property Value string ResponseMessage The response message [JsonIgnore] public HttpResponseMessage? ResponseMessage { get; set; } Property Value HttpResponseMessage"
  },
  "api/Supabase.Functions.Responses.html": {
    "href": "api/Supabase.Functions.Responses.html",
    "title": "Namespace Supabase.Functions.Responses | supabase-csharp",
    "keywords": "Namespace Supabase.Functions.Responses Classes BaseResponse A wrapper class from which all Responses derive."
  },
  "api/Supabase.Functions.html": {
    "href": "api/Supabase.Functions.html",
    "title": "Namespace Supabase.Functions | supabase-csharp",
    "keywords": "Namespace Supabase.Functions Classes Client Client.InvokeFunctionOptions Options that can be supplied to a function invocation. Note: If Headers.Authorization is set, it can be later overriden if a token is supplied in the method call."
  },
  "api/Supabase.Gotrue.AdminClient.html": {
    "href": "api/Supabase.Gotrue.AdminClient.html",
    "title": "Class AdminClient | supabase-csharp",
    "keywords": "Class AdminClient Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Admin client for interacting with the Gotrue API. Intended for use on servers or other secure environments. This client does NOT manage user sessions or track any other state. public class AdminClient : IGotrueAdminClient<User>, IGettableHeaders Inheritance object AdminClient Implements IGotrueAdminClient<User> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminClient(string, ClientOptions?) Initialize the client with a service key. public AdminClient(string serviceKey, ClientOptions? options = null) Parameters serviceKey string A valid JWT. Must be a full-access API key (e.g. 'service_role' or 'supabase_admin'). options ClientOptions Properties GetHeaders Headers sent to the API on every request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Options The initialized client options. public ClientOptions Options { get; } Property Value ClientOptions Methods CreateUser(AdminUserAttributes) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<User?> CreateUser(AdminUserAttributes attributes) Parameters attributes AdminUserAttributes Returns Task<User> CreateUser(string, string, AdminUserAttributes?) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<User?> CreateUser(string email, string password, AdminUserAttributes? attributes = null) Parameters email string password string attributes AdminUserAttributes Returns Task<User> DeleteUser(string) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<bool> DeleteUser(string uid) Parameters uid string Returns Task<bool> GenerateLink(GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. public Task<GenerateLinkResponse?> GenerateLink(GenerateLinkOptions options) Parameters options GenerateLinkOptions Options for this call. Password is required for SignUp, Data is an optional parameter for SignUp. Returns Task<GenerateLinkResponse> GetUser(string) Gets a user from a user's JWT. This is using the GoTrue server to validate a user's JWT. public Task<User?> GetUser(string jwt) Parameters jwt string Returns Task<User> GetUserById(string) Gets a user by ID from the server using the admin key (not the anonymous key). public Task<User?> GetUserById(string userId) Parameters userId string Returns Task<User> InviteUserByEmail(string, InviteUserByEmailOptions?) Sends an email to the user. public Task<bool> InviteUserByEmail(string email, InviteUserByEmailOptions? options = null) Parameters email string options InviteUserByEmailOptions Returns Task<bool> ListUsers(string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> Update(UserAttributes) Updates a User using the service key public Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> UpdateUserById(string, AdminUserAttributes) Update user by Id public Task<User?> UpdateUserById(string userId, AdminUserAttributes userData) Parameters userId string userData AdminUserAttributes Returns Task<User>"
  },
  "api/Supabase.Gotrue.AdminUserAttributes.html": {
    "href": "api/Supabase.Gotrue.AdminUserAttributes.html",
    "title": "Class AdminUserAttributes | supabase-csharp",
    "keywords": "Class AdminUserAttributes Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/AdminUserAttributes.html public class AdminUserAttributes : UserAttributes Inheritance object UserAttributes AdminUserAttributes Inherited Members UserAttributes.Email UserAttributes.EmailChangeToken UserAttributes.Nonce UserAttributes.Password UserAttributes.Phone UserAttributes.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AppMetadata A custom data object for app_metadata that. Can be any JSON serializable data. Only a service role can modify Note: GoTrue does not yest support creating a user with app metadata (see: https://github.com/supabase/gotrue-js/blob/d7b334a4283027c65814aa81715ffead262f0bfa/test/GoTrueApi.test.ts#L45) [JsonProperty(\"app_metadata\")] public Dictionary<string, object> AppMetadata { get; set; } Property Value Dictionary<string, object> BanDuration Determines how long a user is banned for. This property is ignored when creating a user. If you want to create a user banned, first create the user then update it sending this property. The format for the ban duration follows a strict sequence of decimal numbers with a unit suffix. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". For example, some possible durations include: '300ms', '2h45m', '1200s'. Setting the ban duration to \"none\" lifts the ban on the user. Only a service role can modify. [JsonProperty(\"ban_duration\")] public string? BanDuration { get; set; } Property Value string EmailConfirm Sets if a user has confirmed their email address. Only a service role can modify [JsonProperty(\"email_confirm\")] public bool? EmailConfirm { get; set; } Property Value bool? PhoneConfirm Sets if a user has confirmed their phone number. Only a service role can modify [JsonProperty(\"phone_confirm\")] public bool? PhoneConfirm { get; set; } Property Value bool? UserMetadata A custom data object for user_metadata. Can be any JSON serializable data. Only a service role can modify. [JsonProperty(\"user_metadata\")] public Dictionary<string, object> UserMetadata { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.Api.html": {
    "href": "api/Supabase.Gotrue.Api.html",
    "title": "Class Api | supabase-csharp",
    "keywords": "Class Api Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll The REST calls to the Gotrue API. public class Api : IGotrueApi<User, Session>, IGettableHeaders Inheritance object Api Implements IGotrueApi<User, Session> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Api(string, Dictionary<string, string>?) Creates a new API client public Api(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Properties GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor will ALWAYS take precedence over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Headers Headers to be sent with every request. These will be merged with any headers returned by GetHeaders. protected Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Methods Challenge(string, MfaChallengeParams) public Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams) Parameters jwt string mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> CreateUser(string, AdminUserAttributes?) Create a user public Task<User?> CreateUser(string jwt, AdminUserAttributes? attributes = null) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). attributes AdminUserAttributes Additional administrative details Returns Task<User> DeleteUser(string, string) Delete a user public Task<BaseResponse> DeleteUser(string uid, string jwt) Parameters uid string The user uid you want to remove. jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). Returns Task<BaseResponse> Enroll(string, MfaEnrollParams) public Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams) Parameters jwt string mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Log in an existing user via code from third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string Generated verifier (probably from GetUrlForProvider) authCode string The received Auth Code Callback Returns Task<Session> GenerateLink(string, GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. public Task<BaseResponse> GenerateLink(string jwt, GenerateLinkOptions options) Parameters jwt string options GenerateLinkOptions Returns Task<BaseResponse> GetUriForProvider(Provider, SignInOptions?) public ProviderAuthState GetUriForProvider(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns ProviderAuthState GetUser(string) Gets User Details public Task<User?> GetUser(string jwt) Parameters jwt string Returns Task<User> GetUserById(string, string) Get User details by Id public Task<User?> GetUserById(string jwt, string userId) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). userId string userID Returns Task<User> InviteUserByEmail(string, string, InviteUserByEmailOptions?) Sends an invite link to an email address. public Task<BaseResponse> InviteUserByEmail(string email, string jwt, InviteUserByEmailOptions? options = null) Parameters email string jwt string this token needs role 'supabase_admin' or 'service_role' options InviteUserByEmailOptions Returns Task<BaseResponse> LinkIdentity(string, Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. public Task<ProviderAuthState> LinkIdentity(string token, Constants.Provider provider, SignInOptions options) Parameters token string User's token provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListUsers(string, string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string jwt, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> Reauthenticate(string) Sends a re-authentication request, used for password changes. See: https://github.com/supabase/gotrue#get-reauthenticate public Task<BaseResponse> Reauthenticate(string userJwt) Parameters userJwt string The user's auth token. Returns Task<BaseResponse> RefreshAccessToken(string, string) Generates a new Session given a user's access token and refresh token. public Task<Session?> RefreshAccessToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task<Session> ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. This Method supports the PKCE Flow public Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. public Task<BaseResponse> ResetPasswordForEmail(string email) Parameters email string Returns Task<BaseResponse> SendMagicLinkEmail(string, SignInOptions?) Sends a magic login link to an email address. public Task<BaseResponse> SendMagicLinkEmail(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<BaseResponse> SendMobileOTP(string) Sends a mobile OTP via SMS. Will register the account if it doesn't already exist public Task<BaseResponse> SendMobileOTP(string phone) Parameters phone string phone The user's phone number WITH international prefix Returns Task<BaseResponse> Settings() Calls the GoTrue server to get the settings (for example, if email auto confirmation is turned on) public Task<Settings?> Settings() Returns Task<Settings> mpose up -d SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. public Task<Session?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<Session> A session where the is_anonymous claim in the access token JWT set to true SignInWithEmail(string, string) Logs in an existing user using their email address. public Task<Session?> SignInWithEmail(string email, string password) Parameters email string password string Returns Task<Session> SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. public Task<Session?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider A supported provider (Google, Apple, Azure, Facebook) idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<Session> SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> SignInWithPhone(string, string) Logs in an existing user using their phone number and password. public Task<Session?> SignInWithPhone(string phone, string password) Parameters phone string The phone number of the user. password string The password of the user. Returns Task<Session> SignInWithSSO(Guid, SignInWithSSOOptions?) public Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid options SignInWithSSOOptions Returns Task<SSOResponse> SignInWithSSO(string, SignInWithSSOOptions?) public Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string options SignInWithSSOOptions Returns Task<SSOResponse> SignOut(string, SignOutScope) Removes a logged-in session. public Task<BaseResponse> SignOut(string jwt, Constants.SignOutScope scope = SignOutScope.Global) Parameters jwt string scope Constants.SignOutScope Returns Task<BaseResponse> SignUpWithEmail(string, string, SignUpOptions?) Signs a user up using an email address and password. public Task<Session?> SignUpWithEmail(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Optional Signup data. Returns Task<Session> SignUpWithPhone(string, string, SignUpOptions?) Signs up a new user using their phone number and a password.The phone number of the user. public Task<Session?> SignUpWithPhone(string phone, string password, SignUpOptions? options = null) Parameters phone string The phone number of the user. password string The password of the user. options SignUpOptions Optional Signup data. Returns Task<Session> Unenroll(string, MfaUnenrollParams) public Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams) Parameters jwt string mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(string, UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. public Task<bool> UnlinkIdentity(string token, UserIdentity userIdentity) Parameters token string User's token userIdentity UserIdentity Identity to be unlinked Returns Task<bool> UpdateUser(string, UserAttributes) Updates the User data public Task<User?> UpdateUser(string jwt, UserAttributes attributes) Parameters jwt string attributes UserAttributes Returns Task<User> UpdateUserById(string, string, UserAttributes) Update user by Id public Task<User?> UpdateUserById(string jwt, string userId, UserAttributes userData) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). userId string userID userData UserAttributes User attributes e.g. email, password, etc. Returns Task<User> Verify(string, MfaVerifyParams) public Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaVerifyParams Returns Task<MfaVerifyResponse> VerifyEmailOTP(string, string, EmailOtpType) Send User supplied Email OTP to be verified public Task<Session?> VerifyEmailOTP(string email, string token, Constants.EmailOtpType type) Parameters email string The user's email address token string token that user was sent to their mobile phone type Constants.EmailOtpType Type of verification, e.g. invite, recovery, etc. Returns Task<Session> VerifyMobileOTP(string, string, MobileOtpType) Send User supplied Mobile OTP to be verified public Task<Session?> VerifyMobileOTP(string phone, string token, Constants.MobileOtpType type) Parameters phone string The user's phone number WITH international prefix token string token that user was sent to their mobile phone type Constants.MobileOtpType e.g. SMS or phone change Returns Task<Session> VerifyTokenHash(string, EmailOtpType) Verify token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type) Parameters tokenHash string The token hash used in an email confirmation link type Constants.EmailOtpType Type of verification, e.g. email. Returns Task<Session>"
  },
  "api/Supabase.Gotrue.Client.html": {
    "href": "api/Supabase.Gotrue.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class Client : IGotrueClient<User, Session>, IGettableHeaders Inheritance object Client Implements IGotrueClient<User, Session> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(ClientOptions?) Initializes the GoTrue stateful client. You will likely want to at least specify a ClientOptions.Url Sessions are not automatically retrieved when this object is created. If you want to load the session from your persistence store, GotrueSessionPersistence . If you want to load/refresh the session, RetrieveSessionAsync . For a typical client application, you'll want to load the session from persistence and then refresh it. If your application is listening for session changes, you'll get two SignIn notifications if the persisted session is valid - one for the session loaded from disk, and a second on a successful session refresh. var client = new Supabase.Gotrue.Client(options); client.LoadSession(); await client.RetrieveSessionAsync(); public Client(ClientOptions? options = null) Parameters options ClientOptions Properties CurrentSession The current Session as managed by this client. Does not refresh tokens or have any other side effects. You probably don't want to directly make changes to this object - you'll want to use other methods on this class to make changes. public Session? CurrentSession { get; } Property Value Session CurrentUser The currently logged in User. This is a local cache of the current session User. To persist modifications to the User you'll want to use other methods. Update(UserAttributes)> public User? CurrentUser { get; } Property Value User GetHeaders Headers sent to the API on every request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Online Indicates if the client should be considered online or offline. In a server environment, this client would likely always be online. On a mobile client, you will want to pair this with a network implementation to turn this on and off as the device goes online and offline. public bool Online { get; set; } Property Value bool Options Returns the client options. public ClientOptions Options { get; } Property Value ClientOptions TokenRefresh Get the TokenRefresh object, if it exists public TokenRefresh? TokenRefresh { get; } Property Value TokenRefresh Methods AddDebugListener(Action<string, Exception?>) Add a listener to get errors that occur outside of a typical Exception flow. In particular, this is used to get errors and messages from the background thread that automatically manages refreshing the user's token. public void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Callback method for debug messages AddStateChangedListener(AuthEventHandler) Adds a listener to be notified when the user state changes (e.g. the user logs in, logs out, the token is refreshed, etc). Constants.AuthState public void AddStateChangedListener(IGotrueClient<User, Session>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<User, Session>.AuthEventHandler Challenge(MfaChallengeParams) Prepares a challenge used to verify that a user has access to a MFA factor. public Task<MfaChallengeResponse?> Challenge(MfaChallengeParams mfaChallengeParams) Parameters mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> ChallengeAndVerify(MfaChallengeAndVerifyParams) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<Session?> ChallengeAndVerify(MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams) Parameters mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams Returns Task<Session> ClearStateChangedListeners() Clears all of the listeners from receiving event state changes. WARNING: The persistence handler and refresh token thread are installed as state change listeners. Clearing the listeners will also delete these handlers. public void ClearStateChangedListeners() Debug(string, Exception?) Posts messages and exceptions to the debug listener. This is particularly useful for sorting out issues with the refresh token background thread. public void Debug(string message, Exception? e = null) Parameters message string e Exception Enroll(MfaEnrollParams) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. public Task<MfaEnrollResponse?> Enroll(MfaEnrollParams mfaEnrollParams) Parameters mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Logs in an existing user via a third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<Session> GetAuthenticatorAssuranceLevel() Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. public Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel() Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, bool) Parses a Session out of a Uri's Query parameters. public Task<Session?> GetSessionFromUrl(Uri uri, bool storeSession = true) Parameters uri Uri storeSession bool Returns Task<Session> GetUser(string) Get User details by JWT. Can be used to validate a JWT. public Task<User?> GetUser(string jwt) Parameters jwt string A valid JWT. Must be a JWT that originates from a user. Returns Task<User> LinkIdentity(Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. public Task<ProviderAuthState> LinkIdentity(Constants.Provider provider, SignInOptions options) Parameters provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors() Returns the list of MFA factors enabled for this user public Task<MfaListFactorsResponse?> ListFactors() Returns Task<MfaListFactorsResponse> LoadSession() Loads the session from the persistence layer. public void LoadSession() NotifyAuthStateChange(AuthState) Notifies all listeners that the current user auth state has changed. This is mainly used internally to fire notifications - most client applications won't need this. public void NotifyAuthStateChange(Constants.AuthState stateChanged) Parameters stateChanged Constants.AuthState Reauthenticate() Used for re-authenticating a user in password changes. See: https://github.com/supabase/gotrue#get-reauthenticate public Task<bool> Reauthenticate() Returns Task<bool> Exceptions GotrueException RefreshSession() Refreshes the currently logged in User's Session. public Task<Session?> RefreshSession() Returns Task<Session> RefreshToken() Refreshes a Token using the current session. public Task RefreshToken() Returns Task RefreshToken(string, string) public Task RefreshToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task RemoveStateChangedListener(AuthEventHandler) Removes a specified listener from event state changes. public void RemoveStateChangedListener(IGotrueClient<User, Session>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<User, Session>.AuthEventHandler ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. Supports the PKCE Flow (the verifier from ResetPasswordForEmailState will be combined with ExchangeCodeForSession(string, string) in response) public Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. public Task<bool> ResetPasswordForEmail(string email) Parameters email string Returns Task<bool> RetrieveSessionAsync() Typically called as part of the startup process for the client. This will take the currently loaded session (e.g. from a persistence implementation) and if possible attempt to refresh it. If the loaded session is expired or invalid, it will log the user out. public Task<Session?> RetrieveSessionAsync() Returns Task<Session> SendMagicLink(string, SignInOptions?) Sends a Magic email login link to the specified email. Most of the interesting configuration for this flow is done in the Supabase/GoTrue admin panel. public Task<bool> SendMagicLink(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SetPersistence(IGotrueSessionPersistence<Session>) Sets the persistence implementation for the client (e.g. file system, local storage, etc). public void SetPersistence(IGotrueSessionPersistence<Session> persistence) Parameters persistence IGotrueSessionPersistence<Session> SetSession(string, string, bool) Sets a new session given a user's access token and their refresh token. Will destroy the current session (if existing) Raise a SignedOut event. Decode token 3a. If expired (or bool forceAccessTokenRefresh set), force an access token refresh. 3b. If not expired, set the CurrentSession and retrieve CurrentUser from the server using the accessToken. Raise a `SignedIn event if successful. public Task<Session> SetSession(string accessToken, string refreshToken, bool forceAccessTokenRefresh = false) Parameters accessToken string refreshToken string forceAccessTokenRefresh bool Returns Task<Session> Exceptions GotrueException Raised when token combination is invalid. Settings() Retrieves the settings from the server public Task<Settings?> Settings() Returns Task<Settings> Shutdown() Let all of the listeners know that the stateless client is being shutdown. In particular, the background thread that is used to refresh the token is stopped. public void Shutdown() SignIn(Provider, SignInOptions?) Retrieves a ProviderAuthState to redirect to for signing in with a Constants.Provider. This will likely be paired with a PKCE flow (set in SignInOptions) - after redirecting the user to the flow, you should pair with ExchangeCodeForSession(string, string) public Task<ProviderAuthState> SignIn(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns Task<ProviderAuthState> SignIn(SignInType, string, string?, string?) Log in an existing user, or login via a third-party provider. public Task<Session?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, string? scopes = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) scopes string A space-separated list of scopes granted to the OAuth application. Returns Task<Session> SignIn(string, SignInOptions?) Sends a magic link login email to the specified email. public Task<bool> SignIn(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SignIn(string, string) Signs in a User. public Task<Session?> SignIn(string email, string password) Parameters email string password string Returns Task<Session> SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. public Task<Session?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<Session> A session where the is_anonymous claim in the access token JWT set to true SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. public Task<Session?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider Provider name or OIDC iss value identifying which provider should be used to verify the provided token. Supported names: google, apple, azure, facebook idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<Session> Remarks Calling this method will eliminate the current session (if any). SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithPassword(string, string) Log in an existing user with an email and password or phone and password. public Task<Session?> SignInWithPassword(string email, string password) Parameters email string password string Returns Task<Session> SignInWithSSO(Guid, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml public Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid The guid of the provider you wish to use, obtained from running supabase sso list from the CLI options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignInWithSSO(string, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml public Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string Your organizations email domain to use for sign in, this domain needs to already be registered with supabase by running the CLI commands Example: google.com options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignOut(SignOutScope) Signs out and invalidates all sessions for a user. public Task SignOut(Constants.SignOutScope scope = SignOutScope.Global) Parameters scope Constants.SignOutScope Determines which sessions should be invalidated. By default, it will invalidate all session for a user Returns Task SignUp(SignUpType, string, string, SignUpOptions?) Signs up a user public Task<Session?> SignUp(Constants.SignUpType type, string identifier, string password, SignUpOptions? options = null) Parameters type Constants.SignUpType identifier string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Remarks Calling this method will log out the current user session (if any). By default, the user needs to verify their email address before logging in. To turn this off, disable confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User. SignUp(string, string, SignUpOptions?) Signs up a user by email address. public Task<Session?> SignUp(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Remarks By default, the user needs to verify their email address before logging in. To turn this off, disable Confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User . Unenroll(MfaUnenrollParams) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. public Task<MfaUnenrollResponse?> Unenroll(MfaUnenrollParams mfaUnenrollParams) Parameters mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. public Task<bool> UnlinkIdentity(UserIdentity userIdentity) Parameters userIdentity UserIdentity Identity to be unlinked Returns Task<bool> Update(UserAttributes) Updates a User. public Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> Verify(MfaVerifyParams) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<Session?> Verify(MfaVerifyParams mfaVerifyParams) Parameters mfaVerifyParams MfaVerifyParams Returns Task<Session> VerifyOTP(string, string, EmailOtpType) Log in a user give a user supplied OTP received via email. public Task<Session?> VerifyOTP(string email, string token, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string token string type Constants.EmailOtpType Defaults to MagicLink Returns Task<Session> VerifyOTP(string, string, MobileOtpType) Log in a user given a User supplied OTP received via mobile. public Task<Session?> VerifyOTP(string phone, string token, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. token string Token sent to the user's phone. type Constants.MobileOtpType SMS or phone change Returns Task<Session> VerifyTokenHash(string, EmailOtpType) Log in a user given the token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string type Constants.EmailOtpType Returns Task<Session>"
  },
  "api/Supabase.Gotrue.ClientOptions.html": {
    "href": "api/Supabase.Gotrue.ClientOptions.html",
    "title": "Class ClientOptions | supabase-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Class representation options available to the Client. public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Headers Headers to be sent with subsequent requests. public Dictionary<string, string> Headers Field Value Dictionary<string, string> Properties AllowUnconfirmedUserSessions Very unlikely this flag needs to be changed except in very specific contexts. Enables tests to be E2E tests to be run without requiring users to have confirmed emails - mirrors the Gotrue server's configuration. public bool AllowUnconfirmedUserSessions { get; set; } Property Value bool AutoRefreshToken Should the Client automatically handle refreshing the User's Token? public bool AutoRefreshToken { get; set; } Property Value bool DebugRefreshToken Ask the TokenRefresh system to log extra debug info public bool DebugRefreshToken { get; set; } Property Value bool MaximumRefreshWaitTime By default, the Client will attempt to refresh the token when roughly 1/5 of the time is left before expiration (assuming AutoRefreshToken is true). InitRefreshTimer() The default expiration time for GoTrue servers is 3600 (1 hour), with a maximum of 604,800 seconds (one week). If you set the expiration to one week, you may want to refresh the token a bit more frequently. This setting allows you to set a custom threshold for when the client should AutoRefreshToken. The default value is 14400 seconds (4 hours). In this scenario, if you set the server expiration to one week and leave this value set to the default, as long as the user logs in at least once a week they should stay logged in indefinitely. public int MaximumRefreshWaitTime { get; set; } Property Value int Url Gotrue Endpoint public string Url { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Constants.AuthState.html": {
    "href": "api/Supabase.Gotrue.Constants.AuthState.html",
    "title": "Enum Constants.AuthState | supabase-csharp",
    "keywords": "Enum Constants.AuthState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll States that the Auth Client will raise events for. public enum Constants.AuthState Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields MfaChallengeVerified = 6 PasswordRecovery = 3 Shutdown = 5 SignedIn = 0 SignedOut = 1 TokenRefreshed = 4 UserUpdated = 2"
  },
  "api/Supabase.Gotrue.Constants.EmailOtpType.html": {
    "href": "api/Supabase.Gotrue.Constants.EmailOtpType.html",
    "title": "Enum Constants.EmailOtpType | supabase-csharp",
    "keywords": "Enum Constants.EmailOtpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.EmailOtpType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"email\", null)] Email = 5 [MapTo(\"email_change\", null)] EmailChange = 4 [MapTo(\"invite\", null)] Invite = 1 [MapTo(\"magiclink\", null)] MagicLink = 2 [MapTo(\"recovery\", null)] Recovery = 3 [MapTo(\"signup\", null)] Signup = 0"
  },
  "api/Supabase.Gotrue.Constants.MobileOtpType.html": {
    "href": "api/Supabase.Gotrue.Constants.MobileOtpType.html",
    "title": "Enum Constants.MobileOtpType | supabase-csharp",
    "keywords": "Enum Constants.MobileOtpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.MobileOtpType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"phone_change\", null)] PhoneChange = 1 [MapTo(\"sms\", null)] SMS = 0"
  },
  "api/Supabase.Gotrue.Constants.OAuthFlowType.html": {
    "href": "api/Supabase.Gotrue.Constants.OAuthFlowType.html",
    "title": "Enum Constants.OAuthFlowType | supabase-csharp",
    "keywords": "Enum Constants.OAuthFlowType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents an OAuth Flow type public enum Constants.OAuthFlowType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"implicit\", null)] Implicit = 0 [MapTo(\"pkce\", null)] PKCE = 1"
  },
  "api/Supabase.Gotrue.Constants.Provider.html": {
    "href": "api/Supabase.Gotrue.Constants.Provider.html",
    "title": "Enum Constants.Provider | supabase-csharp",
    "keywords": "Enum Constants.Provider Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Providers available to Supabase Ref: https://supabase.github.io/gotrue-js/modules.html#Provider public enum Constants.Provider Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"anonymous_users\", null)] AnonymousUsers = 0 [MapTo(\"apple\", null)] Apple = 1 [MapTo(\"azure\", null)] Azure = 2 [MapTo(\"bitbucket\", null)] Bitbucket = 3 [MapTo(\"discord\", null)] Discord = 4 [MapTo(\"facebook\", null)] Facebook = 5 [MapTo(\"figma\", null)] Figma = 6 [MapTo(\"fly\", null)] Fly = 7 [MapTo(\"github\", null)] Github = 8 [MapTo(\"gitlab\", null)] Gitlab = 9 [MapTo(\"google\", null)] Google = 10 [MapTo(\"kakao\", null)] Kakao = 11 [MapTo(\"keycloak\", null)] KeyCloak = 12 [MapTo(\"linkedin\", null)] LinkedIn = 13 [MapTo(\"linkedin_oidc\", null)] LinkedInOIDC = 14 [MapTo(\"notion\", null)] Notion = 15 [MapTo(\"slack\", null)] Slack = 16 [MapTo(\"spotify\", null)] Spotify = 17 [MapTo(\"twitch\", null)] Twitch = 18 [MapTo(\"twitter\", null)] Twitter = 19 [MapTo(\"workos\", null)] WorkOS = 20 [MapTo(\"zoom\", null)] Zoom = 21"
  },
  "api/Supabase.Gotrue.Constants.SignInType.html": {
    "href": "api/Supabase.Gotrue.Constants.SignInType.html",
    "title": "Enum Constants.SignInType | supabase-csharp",
    "keywords": "Enum Constants.SignInType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Specifies the functionality expected from the SignIn method public enum Constants.SignInType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Email = 0 Phone = 1 RefreshToken = 2"
  },
  "api/Supabase.Gotrue.Constants.SignOutScope.html": {
    "href": "api/Supabase.Gotrue.Constants.SignOutScope.html",
    "title": "Enum Constants.SignOutScope | supabase-csharp",
    "keywords": "Enum Constants.SignOutScope Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.SignOutScope Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"global\", null)] Global = 0 [MapTo(\"local\", null)] Local = 1 [MapTo(\"others\", null)] Others = 2"
  },
  "api/Supabase.Gotrue.Constants.SignUpType.html": {
    "href": "api/Supabase.Gotrue.Constants.SignUpType.html",
    "title": "Enum Constants.SignUpType | supabase-csharp",
    "keywords": "Enum Constants.SignUpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Specifies the functionality expected from the SignUp method public enum Constants.SignUpType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Email = 0 Phone = 1"
  },
  "api/Supabase.Gotrue.Constants.SortOrder.html": {
    "href": "api/Supabase.Gotrue.Constants.SortOrder.html",
    "title": "Enum Constants.SortOrder | supabase-csharp",
    "keywords": "Enum Constants.SortOrder Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.SortOrder Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"asc\", null)] Ascending = 0 [MapTo(\"desc\", null)] Descending = 1"
  },
  "api/Supabase.Gotrue.Constants.html": {
    "href": "api/Supabase.Gotrue.Constants.html",
    "title": "Class Constants | supabase-csharp",
    "keywords": "Class Constants Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Constants used throughout the Gotrue Client public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AUDIENCE public const string AUDIENCE = \"\" Field Value string CookieOptions public static readonly Dictionary<string, object> CookieOptions Field Value Dictionary<string, object> EXPIRY_MARGIN public const int EXPIRY_MARGIN = 60000 Field Value int GOTRUE_URL URL for the Gotrue server. Defaults to localhost:9999. public const string GOTRUE_URL = \"http://localhost:9999\" Field Value string STORAGE_KEY public const string STORAGE_KEY = \"supabase.auth.token\" Field Value string"
  },
  "api/Supabase.Gotrue.DebugNotification.html": {
    "href": "api/Supabase.Gotrue.DebugNotification.html",
    "title": "Class DebugNotification | supabase-csharp",
    "keywords": "Class DebugNotification Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the debug listeners for the Gotrue Client. You'll want to install a debug listener to get debug information back - especially for errors from the background RefreshToken thread. public class DebugNotification Inheritance object DebugNotification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Methods AddDebugListener(Action<string, Exception?>) Add a debug listener to the Gotrue Client. This will be called with debug information public void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Log(string, Exception?) Send a debug message to all debug listeners public void Log(string message, Exception? e = null) Parameters message string e Exception"
  },
  "api/Supabase.Gotrue.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Gotrue.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | supabase-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Best effort guess at why the exception was thrown. public enum FailureHint.Reason Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields AdminTokenRequired = 13 This operation requires a bearer/service key (do not include this key in a client app) BadSessionUrl = 15 Something wrong with the URL to session transformation ExpiredRefreshToken = 12 The refresh token expired. InvalidFlowType = 16 An invalid authentication flow has been selected. InvalidRefreshToken = 11 The refresh token is invalid. MfaChallengeUnverified = 19 NoSessionFound = 14 No/invalid session found Offline = 1 The client is set to run offline or the network is unavailable. SsoDomainNotFound = 17 The SSO domain provided was not registered via the CLI SsoProviderNotFound = 18 The sso provider ID was incorrect or does not exist Unknown = 0 The reason for the error could not be determined. UserAlreadyRegistered = 9 The user is already registered. UserBadEmailAddress = 6 The user's email address is invalid. UserBadLogin = 5 The user's login is invalid. UserBadMultiple = 3 The user's email address and password are invalid. UserBadPassword = 4 The user's password is invalid. UserBadPhoneNumber = 7 The user's phone number is invalid. UserEmailNotConfirmed = 2 The user's email address has not been confirmed. UserMissingInformation = 8 The user's information is incomplete. UserTooManyRequests = 10 Server rejected due to number of requests"
  },
  "api/Supabase.Gotrue.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Gotrue.Exceptions.FailureHint.html",
    "title": "Class FailureHint | supabase-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Maps Supabase server errors to hints based on the status code and the contents of the error message. public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(GotrueException) Detects the reason for the error based on the status code and the contents of the error message. public static FailureHint.Reason DetectReason(GotrueException gte) Parameters gte GotrueException Returns FailureHint.Reason"
  },
  "api/Supabase.Gotrue.Exceptions.GotrueException.html": {
    "href": "api/Supabase.Gotrue.Exceptions.GotrueException.html",
    "title": "Class GotrueException | supabase-csharp",
    "keywords": "Class GotrueException Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Errors from the GoTrue server are wrapped by this exception public class GotrueException : Exception, ISerializable Inheritance object Exception GotrueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GotrueException(string?) Something with wrong with Gotrue / Auth public GotrueException(string? message) Parameters message string Short description of the error source GotrueException(string?, Reason) Something with wrong with Gotrue / Auth public GotrueException(string? message, FailureHint.Reason reason) Parameters message string Short description of the error source reason FailureHint.Reason Best effort attempt to detect the reason for the failure GotrueException(string, Reason, Exception?) Something with wrong with Gotrue / Auth public GotrueException(string message, FailureHint.Reason reason, Exception? innerException) Parameters message string Short description of the error source reason FailureHint.Reason Assigned reason innerException Exception GotrueException(string?, Exception?) Something with wrong with Gotrue / Auth public GotrueException(string? message, Exception? innerException) Parameters message string Short description of the error source innerException Exception The underlying exception Properties Content The content of the HTTP response from the server public string? Content { get; } Property Value string Reason Best guess at what caused the error from the server, see FailureHint.Reason public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response The HTTP response from the server public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode The HTTP status code from the server public int StatusCode { get; } Property Value int Methods AddReason() Adds the best-effort reason for the failure public void AddReason()"
  },
  "api/Supabase.Gotrue.Exceptions.html": {
    "href": "api/Supabase.Gotrue.Exceptions.html",
    "title": "Namespace Supabase.Gotrue.Exceptions | supabase-csharp",
    "keywords": "Namespace Supabase.Gotrue.Exceptions Classes FailureHint Maps Supabase server errors to hints based on the status code and the contents of the error message. GotrueException Errors from the GoTrue server are wrapped by this exception Enums FailureHint.Reason Best effort guess at why the exception was thrown."
  },
  "api/Supabase.Gotrue.GenerateLinkEmailChangeCurrentOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkEmailChangeCurrentOptions.html",
    "title": "Class GenerateLinkEmailChangeCurrentOptions | supabase-csharp",
    "keywords": "Class GenerateLinkEmailChangeCurrentOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for EmailChangeCurrent public class GenerateLinkEmailChangeCurrentOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkEmailChangeCurrentOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkEmailChangeCurrentOptions(string, string) Constructs options for EmailChangeCurrent public GenerateLinkEmailChangeCurrentOptions(string email, string newEmail) Parameters email string newEmail string"
  },
  "api/Supabase.Gotrue.GenerateLinkEmailChangeNewOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkEmailChangeNewOptions.html",
    "title": "Class GenerateLinkEmailChangeNewOptions | supabase-csharp",
    "keywords": "Class GenerateLinkEmailChangeNewOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for EmailChangeNew public class GenerateLinkEmailChangeNewOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkEmailChangeNewOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkEmailChangeNewOptions(string, string) Constructs options for EmailChangeNew public GenerateLinkEmailChangeNewOptions(string email, string newEmail) Parameters email string newEmail string"
  },
  "api/Supabase.Gotrue.GenerateLinkOptions.LinkType.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkOptions.LinkType.html",
    "title": "Enum GenerateLinkOptions.LinkType | supabase-csharp",
    "keywords": "Enum GenerateLinkOptions.LinkType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Mapping of link types that can be generated. public enum GenerateLinkOptions.LinkType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"email_change_current\", null)] EmailChangeCurrent = 4 Generate an email change link to be sent to the current email address. [MapTo(\"email_change_new\", null)] EmailChangeNew = 5 Generate an email change link to be sent to the new email address. [MapTo(\"invite\", null)] Invite = 1 Generate an invite link. [MapTo(\"magiclink\", null)] MagicLink = 2 Generate a magic link. [MapTo(\"recovery\", null)] Recovery = 3 Generate a recovery link. [MapTo(\"signup\", null)] SignUp = 0 Generate a signup link."
  },
  "api/Supabase.Gotrue.GenerateLinkOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkOptions.html",
    "title": "Class GenerateLinkOptions | supabase-csharp",
    "keywords": "Class GenerateLinkOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options for Generating an Email Link public class GenerateLinkOptions Inheritance object GenerateLinkOptions Derived GenerateLinkEmailChangeCurrentOptions GenerateLinkEmailChangeNewOptions GenerateLinkSignupOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkOptions(LinkType, string) Constructs options, additional properties may need to be assigned depending on GenerateLinkOptions.LinkType NewEmail is required for EmailChangeCurrent and EmailChangeNew Password is required for SignUp Data is optional for SignUp public GenerateLinkOptions(GenerateLinkOptions.LinkType linkType, string email) Parameters linkType GenerateLinkOptions.LinkType email string Properties Data A custom data object to store the user's metadata. This maps to the auth.users.user_metadata column. The data should be a JSON encodable object that includes user-specific info, such as their first and last name. [JsonProperty(\"data\", NullValueHandling = NullValueHandling.Ignore)] public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object> Email The User's Email [JsonProperty(\"email\", NullValueHandling = NullValueHandling.Ignore)] public string Email { get; } Property Value string NewEmail The user's new email. Only required if type is 'email_change_current' or 'email_change_new'. [JsonProperty(\"new_email\", NullValueHandling = NullValueHandling.Ignore)] public string? NewEmail { get; set; } Property Value string Password Only required if generating a signup link. [JsonProperty(\"password\", NullValueHandling = NullValueHandling.Ignore)] public string? Password { get; set; } Property Value string RedirectTo The URL which will be appended to the email link generated. [JsonIgnore] public string? RedirectTo { get; set; } Property Value string Type The type of link being generated [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public string Type { get; } Property Value string"
  },
  "api/Supabase.Gotrue.GenerateLinkSignupOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkSignupOptions.html",
    "title": "Class GenerateLinkSignupOptions | supabase-csharp",
    "keywords": "Class GenerateLinkSignupOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for SignUp public class GenerateLinkSignupOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkSignupOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkSignupOptions(string, string) Constructs options for SignUp public GenerateLinkSignupOptions(string email, string password) Parameters email string password string Remarks Data is optional"
  },
  "api/Supabase.Gotrue.Helpers.html": {
    "href": "api/Supabase.Gotrue.Helpers.html",
    "title": "Class Helpers | supabase-csharp",
    "keywords": "Class Helpers Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Utility methods to assist with flow. Includes nonce generation and verification. public static class Helpers Inheritance object Helpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateNonce() Generates a nonce (code verifier) Used with PKCE flow and Apple/Google Sign in. Paired with GeneratePKCENonceVerifier(string) Sourced from: https://stackoverflow.com/a/65220376/3629438 public static string GenerateNonce() Returns string GeneratePKCENonceVerifier(string) Generates a PKCE SHA256 code challenge given a nonce (code verifier) Paired with GenerateNonce() Sourced from: https://stackoverflow.com/a/65220376/3629438 public static string GeneratePKCENonceVerifier(string codeVerifier) Parameters codeVerifier string Returns string GenerateSHA256NonceFromRawNonce(string) Generates a SHA256 nonce given a rawNonce, used Apple/Google Sign in. public static string GenerateSHA256NonceFromRawNonce(string rawNonce) Parameters rawNonce string Returns string"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueAdminClient-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueAdminClient-1.html",
    "title": "Interface IGotrueAdminClient<TUser> | supabase-csharp",
    "keywords": "Interface IGotrueAdminClient<TUser> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for the Gotrue Admin Client (auth). public interface IGotrueAdminClient<TUser> : IGettableHeaders where TUser : User Type Parameters TUser Inherited Members IGettableHeaders.GetHeaders Methods CreateUser(AdminUserAttributes) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<TUser?> CreateUser(AdminUserAttributes attributes) Parameters attributes AdminUserAttributes Returns Task<TUser> CreateUser(string, string, AdminUserAttributes?) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<TUser?> CreateUser(string email, string password, AdminUserAttributes? attributes = null) Parameters email string password string attributes AdminUserAttributes Returns Task<TUser> DeleteUser(string) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<bool> DeleteUser(string uid) Parameters uid string Returns Task<bool> GenerateLink(GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. Task<GenerateLinkResponse?> GenerateLink(GenerateLinkOptions options) Parameters options GenerateLinkOptions Options for this call. Password is required for SignUp, Data is an optional parameter for SignUp. Returns Task<GenerateLinkResponse> GetUser(string) Gets a user from a user's JWT. This is using the GoTrue server to validate a user's JWT. Task<TUser?> GetUser(string jwt) Parameters jwt string Returns Task<TUser> GetUserById(string) Gets a user by ID from the server using the admin key (not the anonymous key). Task<TUser?> GetUserById(string userId) Parameters userId string Returns Task<TUser> InviteUserByEmail(string, InviteUserByEmailOptions?) Sends an email to the user. Task<bool> InviteUserByEmail(string email, InviteUserByEmailOptions? options = null) Parameters email string options InviteUserByEmailOptions Returns Task<bool> ListUsers(string?, string?, SortOrder, int?, int?) Lists users Task<UserList<TUser>?> ListUsers(string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<TUser>> Update(UserAttributes) Updates a User using the service key Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> UpdateUserById(string, AdminUserAttributes) Update user by Id Task<User?> UpdateUserById(string userId, AdminUserAttributes userData) Parameters userId string userData AdminUserAttributes Returns Task<User>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueApi-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueApi-2.html",
    "title": "Interface IGotrueApi<TUser, TSession> | supabase-csharp",
    "keywords": "Interface IGotrueApi<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll public interface IGotrueApi<TUser, TSession> : IGettableHeaders where TUser : User where TSession : Session Type Parameters TUser TSession Inherited Members IGettableHeaders.GetHeaders Methods Challenge(string, MfaChallengeParams) Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams) Parameters jwt string mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> CreateUser(string, AdminUserAttributes?) Task<TUser?> CreateUser(string jwt, AdminUserAttributes? attributes = null) Parameters jwt string attributes AdminUserAttributes Returns Task<TUser> DeleteUser(string, string) Task<BaseResponse> DeleteUser(string uid, string jwt) Parameters uid string jwt string Returns Task<BaseResponse> Enroll(string, MfaEnrollParams) Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams) Parameters jwt string mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<Session> GenerateLink(string, GenerateLinkOptions) Task<BaseResponse> GenerateLink(string jwt, GenerateLinkOptions options) Parameters jwt string options GenerateLinkOptions Returns Task<BaseResponse> GetUriForProvider(Provider, SignInOptions?) ProviderAuthState GetUriForProvider(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns ProviderAuthState GetUser(string) Task<TUser?> GetUser(string jwt) Parameters jwt string Returns Task<TUser> GetUserById(string, string) Task<TUser?> GetUserById(string jwt, string userId) Parameters jwt string userId string Returns Task<TUser> InviteUserByEmail(string, string, InviteUserByEmailOptions?) Task<BaseResponse> InviteUserByEmail(string email, string jwt, InviteUserByEmailOptions? options = null) Parameters email string jwt string options InviteUserByEmailOptions Returns Task<BaseResponse> LinkIdentity(string, Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. Task<ProviderAuthState> LinkIdentity(string token, Constants.Provider provider, SignInOptions options) Parameters token string User's token provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListUsers(string, string?, string?, SortOrder, int?, int?) Task<UserList<TUser>?> ListUsers(string jwt, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters jwt string filter string sortBy string sortOrder Constants.SortOrder page int? perPage int? Returns Task<UserList<TUser>> Reauthenticate(string) Task<BaseResponse> Reauthenticate(string userJwt) Parameters userJwt string Returns Task<BaseResponse> RefreshAccessToken(string, string) Task<TSession?> RefreshAccessToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task<TSession> ResetPasswordForEmail(ResetPasswordForEmailOptions) Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Task<BaseResponse> ResetPasswordForEmail(string email) Parameters email string Returns Task<BaseResponse> SendMagicLinkEmail(string, SignInOptions?) Task<BaseResponse> SendMagicLinkEmail(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<BaseResponse> SendMobileOTP(string) Task<BaseResponse> SendMobileOTP(string phone) Parameters phone string Returns Task<BaseResponse> Settings() Task<Settings?> Settings() Returns Task<Settings> SignInAnonymously(SignInAnonymouslyOptions?) Task<TSession?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<TSession> SignInWithEmail(string, string) Task<TSession?> SignInWithEmail(string email, string password) Parameters email string password string Returns Task<TSession> SignInWithIdToken(Provider, string, string?, string?, string?) Task<TSession?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider idToken string accessToken string nonce string captchaToken string Returns Task<TSession> SignInWithOtp(SignInWithPasswordlessEmailOptions) Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions) Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> SignInWithPhone(string, string) Task<TSession?> SignInWithPhone(string phone, string password) Parameters phone string password string Returns Task<TSession> SignInWithSSO(Guid, SignInWithSSOOptions?) Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid options SignInWithSSOOptions Returns Task<SSOResponse> SignInWithSSO(string, SignInWithSSOOptions?) Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string options SignInWithSSOOptions Returns Task<SSOResponse> SignOut(string, SignOutScope) Task<BaseResponse> SignOut(string jwt, Constants.SignOutScope scope = SignOutScope.Global) Parameters jwt string scope Constants.SignOutScope Returns Task<BaseResponse> SignUpWithEmail(string, string, SignUpOptions?) Task<TSession?> SignUpWithEmail(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Returns Task<TSession> SignUpWithPhone(string, string, SignUpOptions?) Task<TSession?> SignUpWithPhone(string phone, string password, SignUpOptions? options = null) Parameters phone string password string options SignUpOptions Returns Task<TSession> Unenroll(string, MfaUnenrollParams) Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(string, UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. Task<bool> UnlinkIdentity(string token, UserIdentity userIdentity) Parameters token string User's token userIdentity UserIdentity Identity to be unlinked Returns Task<bool> UpdateUser(string, UserAttributes) Task<TUser?> UpdateUser(string jwt, UserAttributes attributes) Parameters jwt string attributes UserAttributes Returns Task<TUser> UpdateUserById(string, string, UserAttributes) Task<TUser?> UpdateUserById(string jwt, string userId, UserAttributes userData) Parameters jwt string userId string userData UserAttributes Returns Task<TUser> Verify(string, MfaVerifyParams) Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaVerifyParams Returns Task<MfaVerifyResponse> VerifyEmailOTP(string, string, EmailOtpType) Task<TSession?> VerifyEmailOTP(string email, string token, Constants.EmailOtpType type) Parameters email string token string type Constants.EmailOtpType Returns Task<TSession> VerifyMobileOTP(string, string, MobileOtpType) Task<TSession?> VerifyMobileOTP(string phone, string token, Constants.MobileOtpType type) Parameters phone string token string type Constants.MobileOtpType Returns Task<TSession> VerifyTokenHash(string, EmailOtpType) Task<TSession?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type) Parameters tokenHash string type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.AuthEventHandler.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.AuthEventHandler.html",
    "title": "Delegate IGotrueClient<TUser, TSession>.AuthEventHandler | supabase-csharp",
    "keywords": "Delegate IGotrueClient<TUser, TSession>.AuthEventHandler Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll The method that is called when there is a user state change. public delegate void IGotrueClient<TUser, TSession>.AuthEventHandler(IGotrueClient<TUser, TSession> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<TUser, TSession> The method that is called when there is a user state change. stateChanged Constants.AuthState The method that is called when there is a user state change."
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.html",
    "title": "Interface IGotrueClient<TUser, TSession> | supabase-csharp",
    "keywords": "Interface IGotrueClient<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll GoTrue stateful Client. This class is best used as a long-lived singleton object in your application. You can attach listeners to be notified of changes to the user log in state, a persistence system for sessions across application launches, and more. It includes a (optional, on by default) background thread that runs to refresh the user's session token. Check out the test suite for examples of use. public interface IGotrueClient<TUser, TSession> : IGettableHeaders where TUser : User where TSession : Session Type Parameters TUser TSession Inherited Members IGettableHeaders.GetHeaders Examples var client = new Supabase.Gotrue.Client(options); var user = await client.SignIn(\"user@email.com\", \"fancyPassword\"); Properties CurrentSession The current Session as managed by this client. Does not refresh tokens or have any other side effects. You probably don't want to directly make changes to this object - you'll want to use other methods on this class to make changes. TSession? CurrentSession { get; } Property Value TSession CurrentUser The currently logged in User. This is a local cache of the current session User. To persist modifications to the User you'll want to use other methods. Update(UserAttributes)> TUser? CurrentUser { get; } Property Value TUser Online Indicates if the client should be considered online or offline. In a server environment, this client would likely always be online. On a mobile client, you will want to pair this with a network implementation to turn this on and off as the device goes online and offline. bool Online { get; set; } Property Value bool Options Returns the client options. ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugListener(Action<string, Exception?>) Add a listener to get errors that occur outside of a typical Exception flow. In particular, this is used to get errors and messages from the background thread that automatically manages refreshing the user's token. void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Callback method for debug messages AddStateChangedListener(AuthEventHandler) Adds a listener to be notified when the user state changes (e.g. the user logs in, logs out, the token is refreshed, etc). Constants.AuthState void AddStateChangedListener(IGotrueClient<TUser, TSession>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<TUser, TSession>.AuthEventHandler Challenge(MfaChallengeParams) Prepares a challenge used to verify that a user has access to a MFA factor. Task<MfaChallengeResponse?> Challenge(MfaChallengeParams mfaChallengeParams) Parameters mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> ChallengeAndVerify(MfaChallengeAndVerifyParams) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. Task<Session?> ChallengeAndVerify(MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams) Parameters mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams Returns Task<Session> ClearStateChangedListeners() Clears all of the listeners from receiving event state changes. WARNING: The persistence handler and refresh token thread are installed as state change listeners. Clearing the listeners will also delete these handlers. void ClearStateChangedListeners() Debug(string, Exception?) Posts messages and exceptions to the debug listener. This is particularly useful for sorting out issues with the refresh token background thread. void Debug(string message, Exception? e = null) Parameters message string e Exception Enroll(MfaEnrollParams) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. Task<MfaEnrollResponse?> Enroll(MfaEnrollParams mfaEnrollParams) Parameters mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Logs in an existing user via a third-party provider. Task<TSession?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<TSession> GetAuthenticatorAssuranceLevel() Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel() Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, bool) Converts a URL to a session. For client apps, this probably requires setting up URL handlers. Task<TSession?> GetSessionFromUrl(Uri uri, bool storeSession = true) Parameters uri Uri storeSession bool Returns Task<TSession> GetUser(string) Get User details by JWT. Can be used to validate a JWT. Task<TUser?> GetUser(string jwt) Parameters jwt string A valid JWT. Must be a JWT that originates from a user. Returns Task<TUser> LinkIdentity(Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. Task<ProviderAuthState> LinkIdentity(Constants.Provider provider, SignInOptions options) Parameters provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors() Returns the list of MFA factors enabled for this user Task<MfaListFactorsResponse?> ListFactors() Returns Task<MfaListFactorsResponse> LoadSession() Loads the session from the persistence layer. void LoadSession() NotifyAuthStateChange(AuthState) Notifies all listeners that the current user auth state has changed. This is mainly used internally to fire notifications - most client applications won't need this. void NotifyAuthStateChange(Constants.AuthState stateChanged) Parameters stateChanged Constants.AuthState Reauthenticate() Used for re-authenticating a user in password changes. See: https://github.com/supabase/gotrue#get-reauthenticate Task<bool> Reauthenticate() Returns Task<bool> Exceptions GotrueException RefreshSession() Refreshes the currently logged in User's Session. Task<TSession?> RefreshSession() Returns Task<TSession> RefreshToken() Refreshes a Token using the current session. Task RefreshToken() Returns Task RemoveStateChangedListener(AuthEventHandler) Removes a specified listener from event state changes. void RemoveStateChangedListener(IGotrueClient<TUser, TSession>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<TUser, TSession>.AuthEventHandler ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. Supports the PKCE Flow (the verifier from ResetPasswordForEmailState will be combined with ExchangeCodeForSession(string, string) in response) Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. Task<bool> ResetPasswordForEmail(string email) Parameters email string Returns Task<bool> RetrieveSessionAsync() Typically called as part of the startup process for the client. This will take the currently loaded session (e.g. from a persistence implementation) and if possible attempt to refresh it. If the loaded session is expired or invalid, it will log the user out. Task<TSession?> RetrieveSessionAsync() Returns Task<TSession> SendMagicLink(string, SignInOptions?) Sends a Magic email login link to the specified email. Most of the interesting configuration for this flow is done in the Supabase/GoTrue admin panel. Task<bool> SendMagicLink(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SetPersistence(IGotrueSessionPersistence<TSession>) Sets the persistence implementation for the client (e.g. file system, local storage, etc). void SetPersistence(IGotrueSessionPersistence<TSession> persistence) Parameters persistence IGotrueSessionPersistence<TSession> SetSession(string, string, bool) Sets a new session given a user's access token and their refresh token. Will destroy the current session (if existing) Raise a SignedOut event. Decode token 3a. If expired (or bool forceAccessTokenRefresh set), force an access token refresh. 3b. If not expired, set the CurrentSession and retrieve CurrentUser from the server using the accessToken. Raise a `SignedIn event if successful. Task<TSession> SetSession(string accessToken, string refreshToken, bool forceAccessTokenRefresh = false) Parameters accessToken string refreshToken string forceAccessTokenRefresh bool Returns Task<TSession> Exceptions GotrueException Raised when token combination is invalid. Settings() Retrieves the settings from the server Task<Settings?> Settings() Returns Task<Settings> Shutdown() Let all of the listeners know that the stateless client is being shutdown. In particular, the background thread that is used to refresh the token is stopped. void Shutdown() SignIn(Provider, SignInOptions?) Retrieves a ProviderAuthState to redirect to for signing in with a Constants.Provider. This will likely be paired with a PKCE flow (set in SignInOptions) - after redirecting the user to the flow, you should pair with ExchangeCodeForSession(string, string) Task<ProviderAuthState> SignIn(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns Task<ProviderAuthState> SignIn(SignInType, string, string?, string?) Log in an existing user, or login via a third-party provider. Task<TSession?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, string? scopes = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) scopes string A space-separated list of scopes granted to the OAuth application. Returns Task<TSession> SignIn(string, SignInOptions?) Sends a magic link login email to the specified email. Task<bool> SignIn(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SignIn(string, string) Signs in a User. Task<TSession?> SignIn(string email, string password) Parameters email string password string Returns Task<TSession> SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. Task<TSession?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<TSession> A session where the is_anonymous claim in the access token JWT set to true SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. Task<TSession?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider Provider name or OIDC iss value identifying which provider should be used to verify the provided token. Supported names: google, apple, azure, facebook idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<TSession> Remarks Calling this method will eliminate the current session (if any). SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithPassword(string, string) Log in an existing user with an email and password or phone and password. Task<TSession?> SignInWithPassword(string email, string password) Parameters email string password string Returns Task<TSession> SignInWithSSO(Guid, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid The guid of the provider you wish to use, obtained from running supabase sso list from the CLI options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignInWithSSO(string, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string Your organizations email domain to use for sign in, this domain needs to already be registered with supabase by running the CLI commands Example: google.com options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignOut(SignOutScope) Signs out and invalidates all sessions for a user. Task SignOut(Constants.SignOutScope scope = SignOutScope.Global) Parameters scope Constants.SignOutScope Determines which sessions should be invalidated. By default, it will invalidate all session for a user Returns Task SignUp(SignUpType, string, string, SignUpOptions?) Signs up a user Task<TSession?> SignUp(Constants.SignUpType type, string identifier, string password, SignUpOptions? options = null) Parameters type Constants.SignUpType identifier string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Remarks Calling this method will log out the current user session (if any). By default, the user needs to verify their email address before logging in. To turn this off, disable confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User. SignUp(string, string, SignUpOptions?) Signs up a user by email address. Task<TSession?> SignUp(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Remarks By default, the user needs to verify their email address before logging in. To turn this off, disable Confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User . Unenroll(MfaUnenrollParams) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. Task<MfaUnenrollResponse?> Unenroll(MfaUnenrollParams mfaUnenrollParams) Parameters mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. Task<bool> UnlinkIdentity(UserIdentity userIdentity) Parameters userIdentity UserIdentity Identity to be unlinked Returns Task<bool> Update(UserAttributes) Updates a User. Task<TUser?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<TUser> Verify(MfaVerifyParams) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. Task<Session?> Verify(MfaVerifyParams mfaVerifyParams) Parameters mfaVerifyParams MfaVerifyParams Returns Task<Session> VerifyOTP(string, string, EmailOtpType) Log in a user give a user supplied OTP received via email. Task<TSession?> VerifyOTP(string email, string token, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string token string type Constants.EmailOtpType Defaults to MagicLink Returns Task<TSession> VerifyOTP(string, string, MobileOtpType) Log in a user given a User supplied OTP received via mobile. Task<TSession?> VerifyOTP(string phone, string token, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. token string Token sent to the user's phone. type Constants.MobileOtpType SMS or phone change Returns Task<TSession> VerifyTokenHash(string, EmailOtpType) Log in a user given the token hash used in an email confirmation link. Task<TSession?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotruePersistenceListener-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotruePersistenceListener-1.html",
    "title": "Interface IGotruePersistenceListener<TSession> | supabase-csharp",
    "keywords": "Interface IGotruePersistenceListener<TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for a session persistence auth state handler. public interface IGotruePersistenceListener<TSession> where TSession : Session Type Parameters TSession Properties Persistence The persistence implementation for the client (e.g. file system, local storage, etc). IGotrueSessionPersistence<TSession> Persistence { get; } Property Value IGotrueSessionPersistence<TSession> Methods EventHandler(IGotrueClient<User, TSession>, AuthState) Routes auth state changes to the persistence implementation. void EventHandler(IGotrueClient<User, TSession> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, TSession> stateChanged Constants.AuthState"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueSessionPersistence-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueSessionPersistence-1.html",
    "title": "Interface IGotrueSessionPersistence<TSession> | supabase-csharp",
    "keywords": "Interface IGotrueSessionPersistence<TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for session persistence. As a reminder, make sure you handle exceptions and other error conditions in your implementation. public interface IGotrueSessionPersistence<TSession> where TSession : Session Type Parameters TSession Methods DestroySession() Destroys the session in the persistence implementation. Usually this means deleting the session file or clearing local storage. void DestroySession() LoadSession() Loads the session from the persistence implementation. Returns null if there is no session. TSession? LoadSession() Returns TSession SaveSession(TSession) Saves the session to the persistence implementation. void SaveSession(TSession session) Parameters session TSession"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueStatelessClient-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueStatelessClient-2.html",
    "title": "Interface IGotrueStatelessClient<TUser, TSession> | supabase-csharp",
    "keywords": "Interface IGotrueStatelessClient<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll A Stateless Gotrue Client public interface IGotrueStatelessClient<TUser, TSession> where TUser : User where TSession : Session Type Parameters TUser TSession Examples var options = new StatelessClientOptions { Url = \"https://mygotrueurl.com\" }; var user = await client.SignIn(\"user@email.com\", \"fancyPassword\", options); Methods Challenge(string, MfaChallengeParams, StatelessClientOptions) Prepares a challenge used to verify that a user has access to a MFA factor. Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeParams MfaChallengeParams options StatelessClient.StatelessClientOptions Returns Task<MfaChallengeResponse> ChallengeAndVerify(string, MfaChallengeAndVerifyParams, StatelessClientOptions) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. Task<MfaVerifyResponse?> ChallengeAndVerify(string jwt, MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> CreateUser(string, StatelessClientOptions, AdminUserAttributes) Create a user Task<TUser?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, AdminUserAttributes attributes) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions attributes AdminUserAttributes Returns Task<TUser> CreateUser(string, StatelessClientOptions, string, string, AdminUserAttributes?) Create a user Task<TUser?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string email, string password, AdminUserAttributes? attributes = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions email string password string attributes AdminUserAttributes Returns Task<TUser> DeleteUser(string, string, StatelessClientOptions) Deletes a User. Task<bool> DeleteUser(string uid, string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters uid string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions Returns Task<bool> Enroll(string, MfaEnrollParams, StatelessClientOptions) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaEnrollParams MfaEnrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string, StatelessClientOptions) Logs in an existing user via a third-party provider. Task<TSession?> ExchangeCodeForSession(string codeVerifier, string authCode, StatelessClient.StatelessClientOptions options) Parameters codeVerifier string authCode string options StatelessClient.StatelessClientOptions Returns Task<TSession> GetApi(StatelessClientOptions) Initialize/retrieve the underlying API for this client IGotrueApi<TUser, TSession> GetApi(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns IGotrueApi<TUser, TSession> GetAuthenticatorAssuranceLevel(string, StatelessClientOptions) Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, StatelessClientOptions) Parses a Session out of a Uri's Query parameters. Task<TSession?> GetSessionFromUrl(Uri uri, StatelessClient.StatelessClientOptions options) Parameters uri Uri options StatelessClient.StatelessClientOptions Returns Task<TSession> GetUser(string, StatelessClientOptions) Get User details by JWT. Can be used to validate a JWT. Task<TUser?> GetUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters serviceRoleToken string A valid JWT. Must be a JWT that originates from a user. options StatelessClient.StatelessClientOptions Returns Task<TUser> GetUserById(string, StatelessClientOptions, string) Get User details by Id Task<TUser?> GetUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string Returns Task<TUser> InviteUserByEmail(string, string, StatelessClientOptions, InviteUserByEmailOptions?) Sends an invite email link to the specified email. Task<bool> InviteUserByEmail(string email, string serviceRoleToken, StatelessClient.StatelessClientOptions options, InviteUserByEmailOptions? inviteOptions = null) Parameters email string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions inviteOptions InviteUserByEmailOptions Returns Task<bool> ListFactors(string, StatelessClientOptions) Returns the list of MFA factors enabled for this user Task<MfaListFactorsResponse?> ListFactors(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaListFactorsResponse> ListUsers(string, StatelessClientOptions, string?, string?, SortOrder, int?, int?) Lists users Task<UserList<User>?> ListUsers(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> RefreshToken(string, string, StatelessClientOptions) Refreshes a Token Task<TSession?> RefreshToken(string accessToken, string refreshToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string refreshToken string options StatelessClient.StatelessClientOptions Returns Task<TSession> ResetPasswordForEmail(string, StatelessClientOptions) Sends a reset request to an email address. Task<bool> ResetPasswordForEmail(string email, StatelessClient.StatelessClientOptions options) Parameters email string options StatelessClient.StatelessClientOptions Returns Task<bool> Exceptions Exception SendMagicLink(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. Task<bool> SendMagicLink(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> Settings(StatelessClientOptions) Retrieve the current settings for the Gotrue instance. Task<Settings?> Settings(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns Task<Settings> SignIn(Provider, StatelessClientOptions, SignInOptions?) Retrieves a Url to redirect to for signing in with a Constants.Provider. This method will need to be combined with GetSessionFromUrl(Uri, StatelessClientOptions) when the Application receives the Oauth Callback. ProviderAuthState SignIn(Constants.Provider provider, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters provider Constants.Provider options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns ProviderAuthState Examples var client = Supabase.Gotrue.Client.Initialize(options); var url = client.SignIn(Provider.Github); // Do Redirect User // Example code Application.HasReceivedOauth += async (uri) => { var session = await client.GetSessionFromUri(uri, true); } SignIn(SignInType, string, string?, StatelessClientOptions?) Log in an existing user, or login via a third-party provider. Task<TSession?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, StatelessClient.StatelessClientOptions? options = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) options StatelessClient.StatelessClientOptions Returns Task<TSession> SignIn(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. Task<bool> SignIn(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> SignIn(string, string, StatelessClientOptions) Signs in a User with an email address and password. Task<TSession?> SignIn(string email, string password, StatelessClient.StatelessClientOptions options) Parameters email string password string options StatelessClient.StatelessClientOptions Returns Task<TSession> SignOut(string, StatelessClientOptions) Logout a User This will revoke all refresh tokens for the user. JWT tokens will still be valid for stateless auth until they expire. Task<bool> SignOut(string accessToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string options StatelessClient.StatelessClientOptions Returns Task<bool> SignUp(SignUpType, string, string, StatelessClientOptions, SignUpOptions?) Signs up a user Task<TSession?> SignUp(Constants.SignUpType type, string identifier, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters type Constants.SignUpType Type of signup identifier string Phone or Email password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> SignUp(string, string, StatelessClientOptions, SignUpOptions?) Signs up a user by email address Task<TSession?> SignUp(string email, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters email string password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Unenroll(string, MfaUnenrollParams, StatelessClientOptions) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaUnenrollParams MfaUnenrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaUnenrollResponse> Update(string, UserAttributes, StatelessClientOptions) Updates a User's attributes Task<TUser?> Update(string accessToken, UserAttributes attributes, StatelessClient.StatelessClientOptions options) Parameters accessToken string attributes UserAttributes options StatelessClient.StatelessClientOptions Returns Task<TUser> UpdateUserById(string, StatelessClientOptions, string, AdminUserAttributes) Update user by Id Task<TUser?> UpdateUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId, AdminUserAttributes userData) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string userData AdminUserAttributes Returns Task<TUser> Verify(string, MfaVerifyParams, StatelessClientOptions) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaVerifyParams MfaVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> VerifyOTP(string, string, StatelessClientOptions, EmailOtpType) Log in a user give a user supplied OTP received via email. Task<TSession?> VerifyOTP(string email, string otpToken, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string otpToken string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<TSession> VerifyOTP(string, string, StatelessClientOptions, MobileOtpType) Log in a user given a User supplied OTP received via mobile. Task<TSession?> VerifyOTP(string phone, string otpToken, StatelessClient.StatelessClientOptions options, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. otpToken string Token sent to the user's phone. options StatelessClient.StatelessClientOptions type Constants.MobileOtpType Returns Task<TSession> VerifyTokenHash(string, StatelessClientOptions, EmailOtpType) Log in a user given the token hash used in an email confirmation link. Task<TSession?> VerifyTokenHash(string tokenHash, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.html": {
    "href": "api/Supabase.Gotrue.Interfaces.html",
    "title": "Namespace Supabase.Gotrue.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Gotrue.Interfaces Interfaces IGotrueAdminClient<TUser> Interface for the Gotrue Admin Client (auth). IGotrueApi<TUser, TSession> IGotrueClient<TUser, TSession> GoTrue stateful Client. This class is best used as a long-lived singleton object in your application. You can attach listeners to be notified of changes to the user log in state, a persistence system for sessions across application launches, and more. It includes a (optional, on by default) background thread that runs to refresh the user's session token. Check out the test suite for examples of use. IGotruePersistenceListener<TSession> Interface for a session persistence auth state handler. IGotrueSessionPersistence<TSession> Interface for session persistence. As a reminder, make sure you handle exceptions and other error conditions in your implementation. IGotrueStatelessClient<TUser, TSession> A Stateless Gotrue Client Delegates IGotrueClient<TUser, TSession>.AuthEventHandler The method that is called when there is a user state change."
  },
  "api/Supabase.Gotrue.InviteUserByEmailOptions.html": {
    "href": "api/Supabase.Gotrue.InviteUserByEmailOptions.html",
    "title": "Class InviteUserByEmailOptions | supabase-csharp",
    "keywords": "Class InviteUserByEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents options for sending a User an Invitation public class InviteUserByEmailOptions Inheritance object InviteUserByEmailOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Data A custom data object to store additional metadata about the user. This maps to the auth.users.user_metadata column. public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object> RedirectTo The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. public string? RedirectTo { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.AmrEntry.html": {
    "href": "api/Supabase.Gotrue.Mfa.AmrEntry.html",
    "title": "Class AmrEntry | supabase-csharp",
    "keywords": "Class AmrEntry Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class AmrEntry Inheritance object AmrEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Method Authentication method name. public string Method { get; set; } Property Value string Timestamp Timestamp when the method was successfully used. Represents number of seconds since 1st January 1970 (UNIX epoch) in UTC. public long Timestamp { get; set; } Property Value long"
  },
  "api/Supabase.Gotrue.Mfa.AuthenticatorAssuranceLevel.html": {
    "href": "api/Supabase.Gotrue.Mfa.AuthenticatorAssuranceLevel.html",
    "title": "Enum AuthenticatorAssuranceLevel | supabase-csharp",
    "keywords": "Enum AuthenticatorAssuranceLevel Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public enum AuthenticatorAssuranceLevel Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields aal1 = 0 aal2 = 1"
  },
  "api/Supabase.Gotrue.Mfa.Factor.html": {
    "href": "api/Supabase.Gotrue.Mfa.Factor.html",
    "title": "Class Factor | supabase-csharp",
    "keywords": "Class Factor Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class Factor Inheritance object Factor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime FactorType [JsonProperty(\"factor_type\")] public string FactorType { get; set; } Property Value string FriendlyName [JsonProperty(\"friendly_name\")] public string? FriendlyName { get; set; } Property Value string Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string Status [JsonProperty(\"status\")] public string Status { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime UpdatedAt { get; set; } Property Value DateTime"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeAndVerifyParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeAndVerifyParams.html",
    "title": "Class MfaChallengeAndVerifyParams | supabase-csharp",
    "keywords": "Class MfaChallengeAndVerifyParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeAndVerifyParams Inheritance object MfaChallengeAndVerifyParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Code public string Code { get; set; } Property Value string FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeParams.html",
    "title": "Class MfaChallengeParams | supabase-csharp",
    "keywords": "Class MfaChallengeParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeParams Inheritance object MfaChallengeParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeResponse.html",
    "title": "Class MfaChallengeResponse | supabase-csharp",
    "keywords": "Class MfaChallengeResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeResponse Inheritance object MfaChallengeResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties ExpiresAt [JsonProperty(\"expires_at\")] public long ExpiresAt { get; set; } Property Value long Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaEnrollParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaEnrollParams.html",
    "title": "Class MfaEnrollParams | supabase-csharp",
    "keywords": "Class MfaEnrollParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaEnrollParams Inheritance object MfaEnrollParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties FactorType public string FactorType { get; set; } Property Value string FriendlyName public string? FriendlyName { get; set; } Property Value string Issuer public string? Issuer { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaEnrollResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaEnrollResponse.html",
    "title": "Class MfaEnrollResponse | supabase-csharp",
    "keywords": "Class MfaEnrollResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaEnrollResponse Inheritance object MfaEnrollResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties FriendlyName [JsonProperty(\"friendly_name\")] public string FriendlyName { get; set; } Property Value string Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string Totp [JsonProperty(\"totp\")] public TOTP Totp { get; set; } Property Value TOTP Type [JsonProperty(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaGetAuthenticatorAssuranceLevelResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaGetAuthenticatorAssuranceLevelResponse.html",
    "title": "Class MfaGetAuthenticatorAssuranceLevelResponse | supabase-csharp",
    "keywords": "Class MfaGetAuthenticatorAssuranceLevelResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaGetAuthenticatorAssuranceLevelResponse Inheritance object MfaGetAuthenticatorAssuranceLevelResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CurrentAuthenticationMethods public AmrEntry[] CurrentAuthenticationMethods { get; set; } Property Value AmrEntry[] CurrentLevel public AuthenticatorAssuranceLevel? CurrentLevel { get; set; } Property Value AuthenticatorAssuranceLevel? NextLevel public AuthenticatorAssuranceLevel? NextLevel { get; set; } Property Value AuthenticatorAssuranceLevel?"
  },
  "api/Supabase.Gotrue.Mfa.MfaListFactorsResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaListFactorsResponse.html",
    "title": "Class MfaListFactorsResponse | supabase-csharp",
    "keywords": "Class MfaListFactorsResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaListFactorsResponse Inheritance object MfaListFactorsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties All public List<Factor> All { get; set; } Property Value List<Factor> Totp public List<Factor> Totp { get; set; } Property Value List<Factor>"
  },
  "api/Supabase.Gotrue.Mfa.MfaUnenrollParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaUnenrollParams.html",
    "title": "Class MfaUnenrollParams | supabase-csharp",
    "keywords": "Class MfaUnenrollParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaUnenrollParams Inheritance object MfaUnenrollParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaUnenrollResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaUnenrollResponse.html",
    "title": "Class MfaUnenrollResponse | supabase-csharp",
    "keywords": "Class MfaUnenrollResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaUnenrollResponse Inheritance object MfaUnenrollResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaVerifyParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaVerifyParams.html",
    "title": "Class MfaVerifyParams | supabase-csharp",
    "keywords": "Class MfaVerifyParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaVerifyParams Inheritance object MfaVerifyParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties ChallengeId public string ChallengeId { get; set; } Property Value string Code public string Code { get; set; } Property Value string FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaVerifyResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaVerifyResponse.html",
    "title": "Class MfaVerifyResponse | supabase-csharp",
    "keywords": "Class MfaVerifyResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaVerifyResponse Inheritance object MfaVerifyResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AccessToken [JsonProperty(\"access_token\")] public string AccessToken { get; set; } Property Value string ExpiresIn [JsonProperty(\"expires_in\")] public int ExpiresIn { get; set; } Property Value int RefreshToken [JsonProperty(\"refresh_token\")] public string RefreshToken { get; set; } Property Value string TokenType [JsonProperty(\"token_type\")] public string TokenType { get; set; } Property Value string User [JsonProperty(\"user\")] public User User { get; set; } Property Value User"
  },
  "api/Supabase.Gotrue.Mfa.TOTP.html": {
    "href": "api/Supabase.Gotrue.Mfa.TOTP.html",
    "title": "Class TOTP | supabase-csharp",
    "keywords": "Class TOTP Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class TOTP Inheritance object TOTP Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties QrCode [JsonProperty(\"qr_code\")] public string QrCode { get; set; } Property Value string Secret [JsonProperty(\"secret\")] public string Secret { get; set; } Property Value string Uri [JsonProperty(\"uri\")] public string Uri { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.html": {
    "href": "api/Supabase.Gotrue.Mfa.html",
    "title": "Namespace Supabase.Gotrue.Mfa | supabase-csharp",
    "keywords": "Namespace Supabase.Gotrue.Mfa Classes AmrEntry Factor MfaChallengeAndVerifyParams MfaChallengeParams MfaChallengeResponse MfaEnrollParams MfaEnrollResponse MfaGetAuthenticatorAssuranceLevelResponse MfaListFactorsResponse MfaUnenrollParams MfaUnenrollResponse MfaVerifyParams MfaVerifyResponse TOTP Enums AuthenticatorAssuranceLevel"
  },
  "api/Supabase.Gotrue.NetworkStatus.NetworkListener.html": {
    "href": "api/Supabase.Gotrue.NetworkStatus.NetworkListener.html",
    "title": "Delegate NetworkStatus.NetworkListener | supabase-csharp",
    "keywords": "Delegate NetworkStatus.NetworkListener Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A delegate for listening to network changes. public delegate void NetworkStatus.NetworkListener(bool isNetworkAvailable) Parameters isNetworkAvailable bool A delegate for listening to network changes."
  },
  "api/Supabase.Gotrue.NetworkStatus.html": {
    "href": "api/Supabase.Gotrue.NetworkStatus.html",
    "title": "Class NetworkStatus | supabase-csharp",
    "keywords": "Class NetworkStatus Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A Network status system to pair with the OnlineClient. https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/network-info public class NetworkStatus Inheritance object NetworkStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Ready True if the network has been checked. public bool Ready Field Value bool Properties Client The Client that this network status system is attached to. public IGotrueClient<User, Session>? Client { get; set; } Property Value IGotrueClient<User, Session> Methods AddListener(NetworkListener) Adds a listener to the network status system. public void AddListener(NetworkStatus.NetworkListener listener) Parameters listener NetworkStatus.NetworkListener ~NetworkStatus() Removes the network status system checker from the OS. protected ~NetworkStatus() PingCheck(string) Pings the URL in the Options to check if the network is online. https://PROJECTID.supabase.co/auth/v1/settings public Task<bool> PingCheck(string url) Parameters url string Returns Task<bool> RemoveListener(NetworkListener) Removes a listener from the network status system. public void RemoveListener(NetworkStatus.NetworkListener listener) Parameters listener NetworkStatus.NetworkListener StartAsync(string) Starts the network status system. This will listen to the OS for network changes, and also does a ping check to confirm the current network status. public Task<bool> StartAsync(string url) Parameters url string Returns Task<bool>"
  },
  "api/Supabase.Gotrue.PasswordlessSignInState.html": {
    "href": "api/Supabase.Gotrue.PasswordlessSignInState.html",
    "title": "Class PasswordlessSignInState | supabase-csharp",
    "keywords": "Class PasswordlessSignInState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user Passwordless Sign In. public class PasswordlessSignInState Inheritance object PasswordlessSignInState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.PersistenceListener.html": {
    "href": "api/Supabase.Gotrue.PersistenceListener.html",
    "title": "Class PersistenceListener | supabase-csharp",
    "keywords": "Class PersistenceListener Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the persistence of the Gotrue Session. You'll want to install a persistence listener to persist user sessions between app restarts. public class PersistenceListener : IGotruePersistenceListener<Session> Inheritance object PersistenceListener Implements IGotruePersistenceListener<Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersistenceListener(IGotrueSessionPersistence<Session>) Create a new persistence listener public PersistenceListener(IGotrueSessionPersistence<Session> persistence) Parameters persistence IGotrueSessionPersistence<Session> Properties Persistence The persistence implementation for the client (e.g. file system, local storage, etc). public IGotrueSessionPersistence<Session> Persistence { get; } Property Value IGotrueSessionPersistence<Session> Methods EventHandler(IGotrueClient<User, Session>, AuthState) If you install a persistence listener, it will be called when the user signs in and signs out. public void EventHandler(IGotrueClient<User, Session> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, Session> stateChanged Constants.AuthState Exceptions ArgumentException ArgumentOutOfRangeException"
  },
  "api/Supabase.Gotrue.ProviderAuthState.html": {
    "href": "api/Supabase.Gotrue.ProviderAuthState.html",
    "title": "Class ProviderAuthState | supabase-csharp",
    "keywords": "Class ProviderAuthState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents an OAuth Provider's URI and Parameters. For use with Provider Auth, PKCE Auth, and ID Token auth. public class ProviderAuthState Inheritance object ProviderAuthState Derived SSOResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProviderAuthState(Uri) Constructor public ProviderAuthState(Uri uri) Parameters uri Uri Properties PKCEVerifier The PKCE Verifier nonce, only set during a PKCE auth flow. public string? PKCEVerifier { get; set; } Property Value string Uri The Generated Provider's URI public Uri Uri { get; set; } Property Value Uri"
  },
  "api/Supabase.Gotrue.ResetPasswordForEmailOptions.html": {
    "href": "api/Supabase.Gotrue.ResetPasswordForEmailOptions.html",
    "title": "Class ResetPasswordForEmailOptions | supabase-csharp",
    "keywords": "Class ResetPasswordForEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. public class ResetPasswordForEmailOptions Inheritance object ResetPasswordForEmailOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordForEmailOptions(string) Initializes a new instance of the ResetPasswordForEmailOptions class with the provided email. public ResetPasswordForEmailOptions(string email) Parameters email string The email of the user account for which the password is being reset. Properties CaptchaToken Verification token received when the user completes the captcha on the site. public string? CaptchaToken { get; set; } Property Value string Email The Email representing the user's account whose password is being reset. public string Email { get; } Property Value string FlowType The OAuth Flow Type. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string RedirectTo The URL to send the user to after they click the password reset link. public string? RedirectTo { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.ResetPasswordForEmailState.html": {
    "href": "api/Supabase.Gotrue.ResetPasswordForEmailState.html",
    "title": "Class ResetPasswordForEmailState | supabase-csharp",
    "keywords": "Class ResetPasswordForEmailState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. public class ResetPasswordForEmailState Inheritance object ResetPasswordForEmailState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Responses.BaseResponse.html": {
    "href": "api/Supabase.Gotrue.Responses.BaseResponse.html",
    "title": "Class BaseResponse | supabase-csharp",
    "keywords": "Class BaseResponse Namespace Supabase.Gotrue.Responses Assembly Supabase.Gotrue.dll A wrapper class from which all Responses derive. public class BaseResponse Inheritance object BaseResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Content The HTTP response content as a string. [JsonIgnore] public string? Content { get; set; } Property Value string ResponseMessage The HTTP response message. [JsonIgnore] public HttpResponseMessage? ResponseMessage { get; set; } Property Value HttpResponseMessage"
  },
  "api/Supabase.Gotrue.Responses.GenerateLinkResponse.html": {
    "href": "api/Supabase.Gotrue.Responses.GenerateLinkResponse.html",
    "title": "Class GenerateLinkResponse | supabase-csharp",
    "keywords": "Class GenerateLinkResponse Namespace Supabase.Gotrue.Responses Assembly Supabase.Gotrue.dll An extended user response returned when generating a link. public class GenerateLinkResponse : User Inheritance object User GenerateLinkResponse Inherited Members User.AppMetadata User.Aud User.ConfirmationSentAt User.ConfirmedAt User.CreatedAt User.Email User.EmailConfirmedAt User.Id User.Identities User.InvitedAt User.LastSignInAt User.Phone User.PhoneConfirmedAt User.RecoverySentAt User.Role User.UpdatedAt User.BannedUntil User.IsAnonymous User.Factors User.UserMetadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties ActionLink The email link to send to the user. The action_link follows the following format: auth/v1/verify?type={verification_type}&token={hashed_token}&redirect_to={redirect_to} [JsonProperty(\"action_link\")] public string? ActionLink { get; set; } Property Value string EmailOtp The raw email OTP. You should send this in the email if you want your users to verify using an OTP instead of the action link. [JsonProperty(\"email_otp\")] public string? EmailOtp { get; set; } Property Value string HashedToken The hashed token appended to the action link. [JsonProperty(\"hashed_token\")] public string? HashedToken { get; set; } Property Value string RedirectTo The URL appended to the action link. [JsonProperty(\"redirect_to\")] public string? RedirectTo { get; set; } Property Value string VerificationType The verification type that the email link is associated to. [JsonProperty(\"verification_type\")] public string? VerificationType { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Responses.html": {
    "href": "api/Supabase.Gotrue.Responses.html",
    "title": "Namespace Supabase.Gotrue.Responses | supabase-csharp",
    "keywords": "Namespace Supabase.Gotrue.Responses Classes BaseResponse A wrapper class from which all Responses derive. GenerateLinkResponse An extended user response returned when generating a link."
  },
  "api/Supabase.Gotrue.SSOResponse.html": {
    "href": "api/Supabase.Gotrue.SSOResponse.html",
    "title": "Class SSOResponse | supabase-csharp",
    "keywords": "Class SSOResponse Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Single sign on (SSO) response data deserialized from the API {supabaseAuthUrl}/sso public class SSOResponse : ProviderAuthState Inheritance object ProviderAuthState SSOResponse Inherited Members ProviderAuthState.Uri ProviderAuthState.PKCEVerifier object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SSOResponse(Uri) Deserialized response from {supabaseAuthUrl}/sso public SSOResponse(Uri uri) Parameters uri Uri Uri from the response, this will open the SSO providers login page and allow a user to login to their provider"
  },
  "api/Supabase.Gotrue.Session.html": {
    "href": "api/Supabase.Gotrue.Session.html",
    "title": "Class Session | supabase-csharp",
    "keywords": "Class Session Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a Gotrue Session public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AccessToken The access token jwt. It is recommended to set the JWT_EXPIRY to a shorter expiry value. [JsonProperty(\"access_token\")] public string? AccessToken { get; set; } Property Value string CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime ExpiresIn The number of seconds until the token expires (since it was issued). Returned when a login is confirmed. [JsonProperty(\"expires_in\")] public long ExpiresIn { get; set; } Property Value long ProviderRefreshToken The oauth provider refresh token. If present, this can be used to refresh the provider_token via the oauth provider's API. Not all oauth providers return a provider refresh token. If the provider_refresh_token is missing, please refer to the oauth provider's documentation for information on how to obtain the provider refresh token. [JsonProperty(\"provider_refresh_token\")] public string? ProviderRefreshToken { get; set; } Property Value string ProviderToken The oauth provider token. If present, this can be used to make external API requests to the oauth provider used. [JsonProperty(\"provider_token\")] public string? ProviderToken { get; set; } Property Value string RefreshToken A one-time used refresh token that never expires. [JsonProperty(\"refresh_token\")] public string? RefreshToken { get; set; } Property Value string TokenType [JsonProperty(\"token_type\")] public string? TokenType { get; set; } Property Value string User [JsonProperty(\"user\")] public User? User { get; set; } Property Value User Methods Expired() Returns true if the session has expired public bool Expired() Returns bool ExpiresAt() The expiration date of this session, in UTC time. public DateTime ExpiresAt() Returns DateTime"
  },
  "api/Supabase.Gotrue.Settings.html": {
    "href": "api/Supabase.Gotrue.Settings.html",
    "title": "Class Settings | supabase-csharp",
    "keywords": "Class Settings Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Settings data retrieved from the GoTrue server. public class Settings Inheritance object Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties DisableSignup [JsonProperty(\"disable_signup\")] public bool? DisableSignup { get; set; } Property Value bool? ExternalProviders [JsonProperty(\"external\")] public Dictionary<string, bool>? ExternalProviders { get; set; } Property Value Dictionary<string, bool> MFAEnabled [JsonProperty(\"mfa_enabled\")] public bool? MFAEnabled { get; set; } Property Value bool? MailerAutoConfirm [JsonProperty(\"mailer_autoconfirm\")] public bool? MailerAutoConfirm { get; set; } Property Value bool? PhoneAutoConfirm [JsonProperty(\"phone_autoconfirm\")] public bool? PhoneAutoConfirm { get; set; } Property Value bool? SAMLEnabled [JsonProperty(\"saml_enabled\")] public bool? SAMLEnabled { get; set; } Property Value bool? SmsProvider [JsonProperty(\"sms_provider\")] public string? SmsProvider { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInAnonymouslyOptions.html": {
    "href": "api/Supabase.Gotrue.SignInAnonymouslyOptions.html",
    "title": "Class SignInAnonymouslyOptions | supabase-csharp",
    "keywords": "Class SignInAnonymouslyOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options for handling signing in anonymously public class SignInAnonymouslyOptions Inheritance object SignInAnonymouslyOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CaptchaToken Verification token received when the user completes the captcha on the site. [JsonProperty(\"captchaToken\")] public string? CaptchaToken { get; set; } Property Value string Data A custom data object to store the user's metadata. This maps to the auth.users.raw_user_meta_data column. The data should be a JSON serializable object that includes user-specific info, such as their first and last name. [JsonProperty(\"data\")] public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.SignInOptions.html": {
    "href": "api/Supabase.Gotrue.SignInOptions.html",
    "title": "Class SignInOptions | supabase-csharp",
    "keywords": "Class SignInOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user. public class SignInOptions Inheritance object SignInOptions Derived SignInWithSSOOptions SignUpOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties FlowType Represents an OAuth Flow type, defaults to Implicit PKCE is recommended for mobile and server-side applications. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType QueryParams An object of key-value pairs containing query parameters granted to the OAuth application. public Dictionary<string, string>? QueryParams { get; set; } Property Value Dictionary<string, string> RedirectTo A URL or mobile address to send the user to after they are confirmed. public string? RedirectTo { get; set; } Property Value string Scopes A space-separated list of scopes granted to the OAuth application. public string? Scopes { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessEmailOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessEmailOptions.html",
    "title": "Class SignInWithPasswordlessEmailOptions | supabase-csharp",
    "keywords": "Class SignInWithPasswordlessEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessEmailOptions : SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions SignInWithPasswordlessEmailOptions Inherited Members SignInWithPasswordlessOptions.Data SignInWithPasswordlessOptions.CaptchaToken SignInWithPasswordlessOptions.ShouldCreateUser object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignInWithPasswordlessEmailOptions(string) public SignInWithPasswordlessEmailOptions(string email) Parameters email string The user's email address. Properties Email The user's email address. public string Email { get; } Property Value string EmailRedirectTo The redirect url embedded in the email link. public string? EmailRedirectTo { get; set; } Property Value string FlowType Represents an OAuth Flow type, defaults to Implicit PKCE is recommended for mobile and server-side applications. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessOptions.html",
    "title": "Class SignInWithPasswordlessOptions | supabase-csharp",
    "keywords": "Class SignInWithPasswordlessOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions Derived SignInWithPasswordlessEmailOptions SignInWithPasswordlessPhoneOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Data A custom data object to store the user's metadata. This maps to the auth.users.user_metadata column. The data should be a JSON serializable object that includes user-specific info, such as their first and last name. public Dictionary<string, object> Data Field Value Dictionary<string, object> Properties CaptchaToken Verification token received when the user completes the captcha on the site. public string? CaptchaToken { get; set; } Property Value string ShouldCreateUser If set to false, this method will not create a new user. Defaults to true. public bool ShouldCreateUser { get; set; } Property Value bool"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.MessagingChannel.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.MessagingChannel.html",
    "title": "Enum SignInWithPasswordlessPhoneOptions.MessagingChannel | supabase-csharp",
    "keywords": "Enum SignInWithPasswordlessPhoneOptions.MessagingChannel Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a messaging channel to use for sending the OTP. public enum SignInWithPasswordlessPhoneOptions.MessagingChannel Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"sms\", null)] SMS = 0 SMS [MapTo(\"whatsapp\", null)] WHATSAPP = 1"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.html",
    "title": "Class SignInWithPasswordlessPhoneOptions | supabase-csharp",
    "keywords": "Class SignInWithPasswordlessPhoneOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessPhoneOptions : SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions SignInWithPasswordlessPhoneOptions Inherited Members SignInWithPasswordlessOptions.Data SignInWithPasswordlessOptions.CaptchaToken SignInWithPasswordlessOptions.ShouldCreateUser object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignInWithPasswordlessPhoneOptions(string) public SignInWithPasswordlessPhoneOptions(string phone) Parameters phone string The user's phone number Properties Channel Messaging channel to use (e.g. whatsapp or sms), Defaults to SMS. public SignInWithPasswordlessPhoneOptions.MessagingChannel Channel { get; set; } Property Value SignInWithPasswordlessPhoneOptions.MessagingChannel Phone The user's phone number public string Phone { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInWithSSOOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithSSOOptions.html",
    "title": "Class SignInWithSSOOptions | supabase-csharp",
    "keywords": "Class SignInWithSSOOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user using single sign on (SSO). public class SignInWithSSOOptions : SignInOptions Inheritance object SignInOptions SignInWithSSOOptions Inherited Members SignInOptions.RedirectTo SignInOptions.Scopes SignInOptions.QueryParams SignInOptions.FlowType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CaptchaToken Verification token received when the user completes the captcha on the site. [JsonProperty(\"captchaToken\")] public string? CaptchaToken { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignUpOptions.html": {
    "href": "api/Supabase.Gotrue.SignUpOptions.html",
    "title": "Class SignUpOptions | supabase-csharp",
    "keywords": "Class SignUpOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing up a user. public class SignUpOptions : SignInOptions Inheritance object SignInOptions SignUpOptions Inherited Members SignInOptions.RedirectTo SignInOptions.Scopes SignInOptions.QueryParams SignInOptions.FlowType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Data Optional user metadata. public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.StatelessClient.StatelessClientOptions.html": {
    "href": "api/Supabase.Gotrue.StatelessClient.StatelessClientOptions.html",
    "title": "Class StatelessClient.StatelessClientOptions | supabase-csharp",
    "keywords": "Class StatelessClient.StatelessClientOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Class representation options available to the Client. public class StatelessClient.StatelessClientOptions Inheritance object StatelessClient.StatelessClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Headers Headers to be sent with subsequent requests. public readonly Dictionary<string, string> Headers Field Value Dictionary<string, string> Properties AllowUnconfirmedUserSessions Very unlikely this flag needs to be changed except in very specific contexts. Enables tests to be E2E tests to be run without requiring users to have confirmed emails - mirrors the Gotrue server's configuration. public bool AllowUnconfirmedUserSessions { get; set; } Property Value bool Url Gotrue Endpoint public string Url { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.StatelessClient.html": {
    "href": "api/Supabase.Gotrue.StatelessClient.html",
    "title": "Class StatelessClient | supabase-csharp",
    "keywords": "Class StatelessClient Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class StatelessClient : IGotrueStatelessClient<User, Session> Inheritance object StatelessClient Implements IGotrueStatelessClient<User, Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Methods Challenge(string, MfaChallengeParams, StatelessClientOptions) Prepares a challenge used to verify that a user has access to a MFA factor. public Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeParams MfaChallengeParams options StatelessClient.StatelessClientOptions Returns Task<MfaChallengeResponse> ChallengeAndVerify(string, MfaChallengeAndVerifyParams, StatelessClientOptions) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<MfaVerifyResponse?> ChallengeAndVerify(string jwt, MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> CreateUser(string, StatelessClientOptions, AdminUserAttributes) Create a user public Task<User?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, AdminUserAttributes attributes) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions attributes AdminUserAttributes Returns Task<User> CreateUser(string, StatelessClientOptions, string, string, AdminUserAttributes?) Create a user public Task<User?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string email, string password, AdminUserAttributes? attributes = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions email string password string attributes AdminUserAttributes Returns Task<User> DeleteUser(string, string, StatelessClientOptions) Deletes a User. public Task<bool> DeleteUser(string uid, string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters uid string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions Returns Task<bool> Enroll(string, MfaEnrollParams, StatelessClientOptions) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. public Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaEnrollParams MfaEnrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string, StatelessClientOptions) Logs in an existing user via a third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode, StatelessClient.StatelessClientOptions options) Parameters codeVerifier string authCode string options StatelessClient.StatelessClientOptions Returns Task<Session> GetApi(StatelessClientOptions) Initialize/retrieve the underlying API for this client public IGotrueApi<User, Session> GetApi(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns IGotrueApi<User, Session> GetAuthenticatorAssuranceLevel(string, StatelessClientOptions) Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. public Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, StatelessClientOptions) Parses a Session out of a Uri's Query parameters. public Task<Session?> GetSessionFromUrl(Uri uri, StatelessClient.StatelessClientOptions options) Parameters uri Uri options StatelessClient.StatelessClientOptions Returns Task<Session> GetUser(string, StatelessClientOptions) Get User details by JWT. Can be used to validate a JWT. public Task<User?> GetUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters serviceRoleToken string A valid JWT. Must be a JWT that originates from a user. options StatelessClient.StatelessClientOptions Returns Task<User> GetUserById(string, StatelessClientOptions, string) Get User details by Id public Task<User?> GetUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string Returns Task<User> InviteUserByEmail(string, string, StatelessClientOptions, InviteUserByEmailOptions?) Sends an invite email link to the specified email. public Task<bool> InviteUserByEmail(string email, string serviceRoleToken, StatelessClient.StatelessClientOptions options, InviteUserByEmailOptions? invitationOptions = null) Parameters email string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions invitationOptions InviteUserByEmailOptions Returns Task<bool> ListFactors(string, StatelessClientOptions) Returns the list of MFA factors enabled for this user public Task<MfaListFactorsResponse?> ListFactors(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaListFactorsResponse> ListUsers(string, StatelessClientOptions, string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> RefreshToken(string, string, StatelessClientOptions) Refreshes a Token public Task<Session?> RefreshToken(string accessToken, string refreshToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string refreshToken string options StatelessClient.StatelessClientOptions Returns Task<Session> ResetPasswordForEmail(string, StatelessClientOptions) Sends a reset request to an email address. public Task<bool> ResetPasswordForEmail(string email, StatelessClient.StatelessClientOptions options) Parameters email string options StatelessClient.StatelessClientOptions Returns Task<bool> Exceptions Exception SendMagicLink(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. public Task<bool> SendMagicLink(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> Settings(StatelessClientOptions) Retrieve the current settings for the Gotrue instance. public Task<Settings?> Settings(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns Task<Settings> SignIn(Provider, StatelessClientOptions, SignInOptions?) Retrieves a Url to redirect to for signing in with a Constants.Provider. This method will need to be combined with GetSessionFromUrl(Uri, StatelessClientOptions) when the Application receives the Oauth Callback. public ProviderAuthState SignIn(Constants.Provider provider, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters provider Constants.Provider options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns ProviderAuthState Examples var client = Supabase.Gotrue.Client.Initialize(options); var url = client.SignIn(Provider.Github); // Do Redirect User // Example code Application.HasReceivedOauth += async (uri) => { var session = await client.GetSessionFromUri(uri, true); } SignIn(SignInType, string, string?, StatelessClientOptions?) Log in an existing user, or login via a third-party provider. public Task<Session?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, StatelessClient.StatelessClientOptions? options = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) options StatelessClient.StatelessClientOptions Returns Task<Session> SignIn(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. public Task<bool> SignIn(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> SignIn(string, string, StatelessClientOptions) Signs in a User with an email address and password. public Task<Session?> SignIn(string email, string password, StatelessClient.StatelessClientOptions options) Parameters email string password string options StatelessClient.StatelessClientOptions Returns Task<Session> SignOut(string, StatelessClientOptions) Logout a User This will revoke all refresh tokens for the user. JWT tokens will still be valid for stateless auth until they expire. public Task<bool> SignOut(string accessToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string options StatelessClient.StatelessClientOptions Returns Task<bool> SignUp(SignUpType, string, string, StatelessClientOptions, SignUpOptions?) Signs up a user public Task<Session?> SignUp(Constants.SignUpType type, string identifier, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters type Constants.SignUpType Type of signup identifier string Phone or Email password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> SignUp(string, string, StatelessClientOptions, SignUpOptions?) Signs up a user by email address public Task<Session?> SignUp(string email, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters email string password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Unenroll(string, MfaUnenrollParams, StatelessClientOptions) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. public Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaUnenrollParams MfaUnenrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaUnenrollResponse> Update(string, UserAttributes, StatelessClientOptions) Updates a User's attributes public Task<User?> Update(string accessToken, UserAttributes attributes, StatelessClient.StatelessClientOptions options) Parameters accessToken string attributes UserAttributes options StatelessClient.StatelessClientOptions Returns Task<User> UpdateUserById(string, StatelessClientOptions, string, AdminUserAttributes) Update user by Id public Task<User?> UpdateUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId, AdminUserAttributes userData) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string userData AdminUserAttributes Returns Task<User> Verify(string, MfaVerifyParams, StatelessClientOptions) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaVerifyParams MfaVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> VerifyOTP(string, string, StatelessClientOptions, EmailOtpType) Log in a user give a user supplied OTP received via email. public Task<Session?> VerifyOTP(string email, string otpToken, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string otpToken string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<Session> VerifyOTP(string, string, StatelessClientOptions, MobileOtpType) Log in a user given a User supplied OTP received via mobile. public Task<Session?> VerifyOTP(string phone, string otpToken, StatelessClient.StatelessClientOptions options, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. otpToken string Token sent to the user's phone. options StatelessClient.StatelessClientOptions type Constants.MobileOtpType Returns Task<Session> VerifyTokenHash(string, StatelessClientOptions, EmailOtpType) Log in a user given the token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<Session>"
  },
  "api/Supabase.Gotrue.TokenRefresh.html": {
    "href": "api/Supabase.Gotrue.TokenRefresh.html",
    "title": "Class TokenRefresh | supabase-csharp",
    "keywords": "Class TokenRefresh Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the auto-refresh of the Gotrue Session. public class TokenRefresh Inheritance object TokenRefresh Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TokenRefresh(Client) Sets up the TokenRefresh class, bound to a specific client public TokenRefresh(Client client) Parameters client Client Fields Debug Turn on debug logging for the TokenRefresh public bool Debug Field Value bool Methods ManageAutoRefresh(IGotrueClient<User, Session>, AuthState) Turns the auto-refresh timer on or off based on the current auth state public void ManageAutoRefresh(IGotrueClient<User, Session> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, Session> The Client and Session data stateChanged Constants.AuthState Exceptions ArgumentOutOfRangeException"
  },
  "api/Supabase.Gotrue.User.html": {
    "href": "api/Supabase.Gotrue.User.html",
    "title": "Class User | supabase-csharp",
    "keywords": "Class User Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a Gotrue User Ref: https://supabase.github.io/gotrue-js/interfaces/User.html public class User Inheritance object User Derived GenerateLinkResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AppMetadata [JsonProperty(\"app_metadata\")] public Dictionary<string, object> AppMetadata { get; set; } Property Value Dictionary<string, object> Aud [JsonProperty(\"aud\")] public string? Aud { get; set; } Property Value string BannedUntil [JsonProperty(\"banned_until\")] public DateTime? BannedUntil { get; set; } Property Value DateTime? ConfirmationSentAt [JsonProperty(\"confirmation_sent_at\")] public DateTime? ConfirmationSentAt { get; set; } Property Value DateTime? ConfirmedAt [JsonProperty(\"confirmed_at\")] public DateTime? ConfirmedAt { get; set; } Property Value DateTime? CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string EmailConfirmedAt [JsonProperty(\"email_confirmed_at\")] public DateTime? EmailConfirmedAt { get; set; } Property Value DateTime? Factors [JsonProperty(\"factors\")] public List<Factor> Factors { get; set; } Property Value List<Factor> Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string Identities [JsonProperty(\"identities\")] public List<UserIdentity> Identities { get; set; } Property Value List<UserIdentity> InvitedAt [JsonProperty(\"invited_at\")] public DateTime? InvitedAt { get; set; } Property Value DateTime? IsAnonymous [JsonProperty(\"is_anonymous\")] public bool IsAnonymous { get; set; } Property Value bool LastSignInAt [JsonProperty(\"last_sign_in_at\")] public DateTime? LastSignInAt { get; set; } Property Value DateTime? Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string PhoneConfirmedAt [JsonProperty(\"phone_confirmed_at\")] public DateTime? PhoneConfirmedAt { get; set; } Property Value DateTime? RecoverySentAt [JsonProperty(\"recovery_sent_at\")] public DateTime? RecoverySentAt { get; set; } Property Value DateTime? Role [JsonProperty(\"role\")] public string? Role { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime? UserMetadata [JsonProperty(\"user_metadata\")] public Dictionary<string, object> UserMetadata { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.UserAttributes.html": {
    "href": "api/Supabase.Gotrue.UserAttributes.html",
    "title": "Class UserAttributes | supabase-csharp",
    "keywords": "Class UserAttributes Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/UserAttributes.html public class UserAttributes Inheritance object UserAttributes Derived AdminUserAttributes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Data A custom data object for user_metadata that a user can modify.Can be any JSON. [JsonProperty(\"data\")] public Dictionary<string, object> Data { get; set; } Property Value Dictionary<string, object> Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string EmailChangeToken [JsonProperty(\"email_change_token\")] public string? EmailChangeToken { get; set; } Property Value string Nonce [JsonProperty(\"nonce\")] public string? Nonce { get; set; } Property Value string Password [JsonProperty(\"password\")] public string? Password { get; set; } Property Value string Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.UserIdentity.html": {
    "href": "api/Supabase.Gotrue.UserIdentity.html",
    "title": "Class UserIdentity | supabase-csharp",
    "keywords": "Class UserIdentity Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/UserIdentity.html public class UserIdentity Inheritance object UserIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string IdentityData [JsonProperty(\"identity_data\")] public Dictionary<string, object> IdentityData { get; set; } Property Value Dictionary<string, object> IdentityId [JsonProperty(\"identity_id\")] public string IdentityId { get; set; } Property Value string LastSignInAt [JsonProperty(\"last_sign_in_at\")] public DateTime LastSignInAt { get; set; } Property Value DateTime Provider [JsonProperty(\"provider\")] public string? Provider { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime? UserId [JsonProperty(\"user_id\")] public string? UserId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.UserList-1.html": {
    "href": "api/Supabase.Gotrue.UserList-1.html",
    "title": "Class UserList<TUser> | supabase-csharp",
    "keywords": "Class UserList<TUser> Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public class UserList<TUser> where TUser : User Type Parameters TUser Inheritance object UserList<TUser> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Aud [JsonProperty(\"aud\")] public string? Aud { get; set; } Property Value string Users [JsonProperty(\"users\")] public List<TUser> Users { get; set; } Property Value List<TUser>"
  },
  "api/Supabase.Gotrue.VerifyOTPParams.html": {
    "href": "api/Supabase.Gotrue.VerifyOTPParams.html",
    "title": "Class VerifyOTPParams | supabase-csharp",
    "keywords": "Class VerifyOTPParams Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/VerifyEmailOTPParams.html public class VerifyOTPParams Inheritance object VerifyOTPParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string Token [JsonProperty(\"token\")] public string? Token { get; set; } Property Value string Type [JsonProperty(\"type\")] public string? Type { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.html": {
    "href": "api/Supabase.Gotrue.html",
    "title": "Namespace Supabase.Gotrue | supabase-csharp",
    "keywords": "Namespace Supabase.Gotrue Classes AdminClient Admin client for interacting with the Gotrue API. Intended for use on servers or other secure environments. This client does NOT manage user sessions or track any other state. AdminUserAttributes Ref: https://supabase.github.io/gotrue-js/interfaces/AdminUserAttributes.html Api The REST calls to the Gotrue API. Client Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. ClientOptions Class representation options available to the Client. Constants Constants used throughout the Gotrue Client DebugNotification Manages the debug listeners for the Gotrue Client. You'll want to install a debug listener to get debug information back - especially for errors from the background RefreshToken thread. GenerateLinkEmailChangeCurrentOptions Shortcut options for EmailChangeCurrent GenerateLinkEmailChangeNewOptions Shortcut options for EmailChangeNew GenerateLinkOptions Options for Generating an Email Link GenerateLinkSignupOptions Shortcut options for SignUp Helpers Utility methods to assist with flow. Includes nonce generation and verification. InviteUserByEmailOptions A utility class that represents options for sending a User an Invitation NetworkStatus A Network status system to pair with the OnlineClient. https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/network-info PasswordlessSignInState A utility class that represents a successful response from a request to send a user Passwordless Sign In. PersistenceListener Manages the persistence of the Gotrue Session. You'll want to install a persistence listener to persist user sessions between app restarts. ProviderAuthState Represents an OAuth Provider's URI and Parameters. For use with Provider Auth, PKCE Auth, and ID Token auth. ResetPasswordForEmailOptions A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. ResetPasswordForEmailState A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. SSOResponse Single sign on (SSO) response data deserialized from the API {supabaseAuthUrl}/sso Session Represents a Gotrue Session Settings Settings data retrieved from the GoTrue server. SignInAnonymouslyOptions Options for handling signing in anonymously SignInOptions Options used for signing in a user. SignInWithPasswordlessEmailOptions Options used for signing in a user with passwordless Options SignInWithPasswordlessOptions Options used for signing in a user with passwordless Options SignInWithPasswordlessPhoneOptions Options used for signing in a user with passwordless Options SignInWithSSOOptions Options used for signing in a user using single sign on (SSO). SignUpOptions Options used for signing up a user. StatelessClient Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. StatelessClient.StatelessClientOptions Class representation options available to the Client. TokenRefresh Manages the auto-refresh of the Gotrue Session. User Represents a Gotrue User Ref: https://supabase.github.io/gotrue-js/interfaces/User.html UserAttributes Ref: https://supabase.github.io/gotrue-js/interfaces/UserAttributes.html UserIdentity Ref: https://supabase.github.io/gotrue-js/interfaces/UserIdentity.html UserList<TUser> VerifyOTPParams Ref: https://supabase.github.io/gotrue-js/interfaces/VerifyEmailOTPParams.html Enums Constants.AuthState States that the Auth Client will raise events for. Constants.EmailOtpType Constants.MobileOtpType Constants.OAuthFlowType Represents an OAuth Flow type Constants.Provider Providers available to Supabase Ref: https://supabase.github.io/gotrue-js/modules.html#Provider Constants.SignInType Specifies the functionality expected from the SignIn method Constants.SignOutScope Constants.SignUpType Specifies the functionality expected from the SignUp method Constants.SortOrder GenerateLinkOptions.LinkType Mapping of link types that can be generated. SignInWithPasswordlessPhoneOptions.MessagingChannel Represents a messaging channel to use for sending the OTP. Delegates NetworkStatus.NetworkListener A delegate for listening to network changes."
  },
  "api/Supabase.Interfaces.ISupabaseClient-6.html": {
    "href": "api/Supabase.Interfaces.ISupabaseClient-6.html",
    "title": "Interface ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject> | supabase-csharp",
    "keywords": "Interface ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject> Namespace Supabase.Interfaces Assembly Supabase.dll Contract for what a SupabaseClient should implement public interface ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject> where TUser : User where TSession : Session where TSocket : IRealtimeSocket where TChannel : IRealtimeChannel where TBucket : Bucket where TFileObject : FileObject Type Parameters TUser Model representing User TSession Model representing Session TSocket Class that conforms to IRealtimeSocket TChannel Class that conforms to IRealtimeChannel TBucket Model representing Bucket TFileObject Model representing FileObject Properties Auth The Gotrue Auth Instance IGotrueClient<TUser, TSession> Auth { get; set; } Property Value IGotrueClient<TUser, TSession> Functions The Supabase Functions Client IFunctionsClient Functions { get; set; } Property Value IFunctionsClient Postgrest The Postgrest Client IPostgrestClient Postgrest { get; set; } Property Value IPostgrestClient Realtime The Realtime Client IRealtimeClient<TSocket, TChannel> Realtime { get; set; } Property Value IRealtimeClient<TSocket, TChannel> Storage The Storage Client IStorageClient<TBucket, TFileObject> Storage { get; set; } Property Value IStorageClient<TBucket, TFileObject> Methods AdminAuth(string) Creates a Gotrue Admin Auth Client IGotrueAdminClient<User> AdminAuth(string serviceKey) Parameters serviceKey string Returns IGotrueAdminClient<User> From<TModel>() Used for interacting with a Postgrest Table + Model. Provides helpers to be able to add realtime listeners and queries. ISupabaseTable<TModel, TChannel> From<TModel>() where TModel : BaseModel, new() Returns ISupabaseTable<TModel, TChannel> Type Parameters TModel InitializeAsync() Initializes a supabase client according to the provided SupabaseOptions. If option is enabled: Will connect to realtime instance AutoConnectRealtime Will restore session using a IGotrueSessionPersistence<TSession> specified in SessionHandler Task<ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject>> InitializeAsync() Returns Task<ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject>> Rpc(string, object?) Perform a stored procedure call. Task<BaseResponse> Rpc(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET)"
  },
  "api/Supabase.Interfaces.ISupabaseFunctions.html": {
    "href": "api/Supabase.Interfaces.ISupabaseFunctions.html",
    "title": "Interface ISupabaseFunctions | supabase-csharp",
    "keywords": "Interface ISupabaseFunctions Namespace Supabase.Interfaces Assembly Supabase.dll Contract representing a wrapper Supabase.Functions client. public interface ISupabaseFunctions Methods Invoke(string, Dictionary<string, object>?) Invoke a supabase function Task<string> Invoke(string functionName, Dictionary<string, object>? body = null) Parameters functionName string body Dictionary<string, object> Returns Task<string> String content from invoke Invoke<T>(string, Dictionary<string, object>?) Invoke a supabase function and deserialize data to a provided model. Task<T?> Invoke<T>(string functionName, Dictionary<string, object>? body = null) where T : class Parameters functionName string body Dictionary<string, object> Returns Task<T> The deserialized Model Type Parameters T Model representing data that is compatible with Newtonsoft RawInvoke(string, Dictionary<string, object>?) Invoke a supabase function and return the HttpContent for the developer to parse. Task<HttpContent> RawInvoke(string functionName, Dictionary<string, object>? body = null) Parameters functionName string body Dictionary<string, object> Returns Task<HttpContent> The HTTP Content"
  },
  "api/Supabase.Interfaces.ISupabaseTable-2.html": {
    "href": "api/Supabase.Interfaces.ISupabaseTable-2.html",
    "title": "Interface ISupabaseTable<TModel, TChannel> | supabase-csharp",
    "keywords": "Interface ISupabaseTable<TModel, TChannel> Namespace Supabase.Interfaces Assembly Supabase.dll Contract representing a supabase wrapped postgrest IPostgrestTable<TModel> public interface ISupabaseTable<TModel, TChannel> : IPostgrestTable<TModel>, IGettableHeaders where TModel : BaseModel, new() where TChannel : IRealtimeChannel Type Parameters TModel Model that inherits from BaseModel that represents this Table TChannel Class that implements IRealtimeChannel Inherited Members IPostgrestTable<TModel>.GenerateUrl() IPostgrestTable<TModel>.And(List<IPostgrestQueryFilter>) IPostgrestTable<TModel>.Clear() IPostgrestTable<TModel>.Columns(string[]) IPostgrestTable<TModel>.Columns(Expression<Func<TModel, object[]>>) IPostgrestTable<TModel>.Count(Constants.CountType, CancellationToken) IPostgrestTable<TModel>.Delete(QueryOptions, CancellationToken) IPostgrestTable<TModel>.Delete(TModel, QueryOptions, CancellationToken) IPostgrestTable<TModel>.Filter<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<TModel>.Filter<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, TCriterion) IPostgrestTable<TModel>.Get(CancellationToken) IPostgrestTable<TModel>.Insert(ICollection<TModel>, QueryOptions, CancellationToken) IPostgrestTable<TModel>.Insert(TModel, QueryOptions, CancellationToken) IPostgrestTable<TModel>.Limit(int, string) IPostgrestTable<TModel>.Match(Dictionary<string, string>) IPostgrestTable<TModel>.Match(TModel) IPostgrestTable<TModel>.Not(IPostgrestQueryFilter) IPostgrestTable<TModel>.Not(string, Constants.Operator, Dictionary<string, object>) IPostgrestTable<TModel>.Not(Expression<Func<TModel, object>>, Constants.Operator, Dictionary<string, object>) IPostgrestTable<TModel>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) IPostgrestTable<TModel>.Not<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, List<TCriterion>) IPostgrestTable<TModel>.Not<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<TModel>.Not<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, TCriterion) IPostgrestTable<TModel>.Offset(int, string) IPostgrestTable<TModel>.OnConflict(string) IPostgrestTable<TModel>.OnConflict(Expression<Func<TModel, object>>) IPostgrestTable<TModel>.Or(List<IPostgrestQueryFilter>) IPostgrestTable<TModel>.Order(string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<TModel>.Order(Expression<Func<TModel, object>>, Constants.Ordering, Constants.NullPosition) IPostgrestTable<TModel>.Order(string, string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<TModel>.Range(int) IPostgrestTable<TModel>.Range(int, int) IPostgrestTable<TModel>.Select(string) IPostgrestTable<TModel>.Select(Expression<Func<TModel, object[]>>) IPostgrestTable<TModel>.Where(Expression<Func<TModel, bool>>) IPostgrestTable<TModel>.Single(CancellationToken) IPostgrestTable<TModel>.Set(Expression<Func<TModel, object>>, object) IPostgrestTable<TModel>.Set(Expression<Func<TModel, KeyValuePair<object, object>>>) IPostgrestTable<TModel>.Update(QueryOptions, CancellationToken) IPostgrestTable<TModel>.Update(TModel, QueryOptions, CancellationToken) IPostgrestTable<TModel>.Upsert(ICollection<TModel>, QueryOptions, CancellationToken) IPostgrestTable<TModel>.Upsert(TModel, QueryOptions, CancellationToken) IPostgrestTable<TModel>.BaseUrl IPostgrestTable<TModel>.TableName IGettableHeaders.GetHeaders Methods On(ListenType, PostgresChangesHandler) Add a realtime listener to this table. Task<TChannel> On(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler handler) Parameters listenType PostgresChangesOptions.ListenType handler IRealtimeChannel.PostgresChangesHandler Returns Task<TChannel>"
  },
  "api/Supabase.Interfaces.html": {
    "href": "api/Supabase.Interfaces.html",
    "title": "Namespace Supabase.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Interfaces Interfaces ISupabaseClient<TUser, TSession, TSocket, TChannel, TBucket, TFileObject> Contract for what a SupabaseClient should implement ISupabaseFunctions Contract representing a wrapper Supabase.Functions client. ISupabaseTable<TModel, TChannel> Contract representing a supabase wrapped postgrest IPostgrestTable<TModel>"
  },
  "api/Supabase.Postgrest.Attributes.ColumnAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.ColumnAttribute.html",
    "title": "Class ColumnAttribute | supabase-csharp",
    "keywords": "Class ColumnAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# property to a Postgrest Column. [AttributeUsage(AttributeTargets.Property)] public class ColumnAttribute : Attribute Inheritance object Attribute ColumnAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples class User : BaseModel { [ColumnName(\"firstName\")] public string FirstName {get; set;} } Constructors ColumnAttribute(string?, NullValueHandling, bool, bool) public ColumnAttribute(string? columnName = null, NullValueHandling nullValueHandling = NullValueHandling.Include, bool ignoreOnInsert = false, bool ignoreOnUpdate = false) Parameters columnName string nullValueHandling NullValueHandling ignoreOnInsert bool ignoreOnUpdate bool Properties ColumnName The name in postgres of this column. public string ColumnName { get; } Property Value string IgnoreOnInsert If the performed query is an Insert or Upsert, should this value be ignored? public bool IgnoreOnInsert { get; } Property Value bool IgnoreOnUpdate If the performed query is an Update, should this value be ignored? public bool IgnoreOnUpdate { get; } Property Value bool NullValueHandling Specifies what should be serialized in the event this column's value is NULL public NullValueHandling NullValueHandling { get; set; } Property Value NullValueHandling"
  },
  "api/Supabase.Postgrest.Attributes.PrimaryKeyAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | supabase-csharp",
    "keywords": "Class PrimaryKeyAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# property to a Postgrest PrimaryKey. [AttributeUsage(AttributeTargets.Property)] public class PrimaryKeyAttribute : Attribute Inheritance object Attribute PrimaryKeyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples class User : BaseModel { [PrimaryKey(\"id\")] public string Id {get; set;} } Constructors PrimaryKeyAttribute(string?, bool) public PrimaryKeyAttribute(string? columnName = null, bool shouldInsert = false) Parameters columnName string shouldInsert bool Properties ColumnName public string ColumnName { get; } Property Value string ShouldInsert Would be set to false in the event that the database handles the generation of this property. public bool ShouldInsert { get; } Property Value bool"
  },
  "api/Supabase.Postgrest.Attributes.ReferenceAttribute.JoinType.html": {
    "href": "api/Supabase.Postgrest.Attributes.ReferenceAttribute.JoinType.html",
    "title": "Enum ReferenceAttribute.JoinType | supabase-csharp",
    "keywords": "Enum ReferenceAttribute.JoinType Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Specifies the Join type on this reference. PostgREST only allows for a LEFT join and an INNER join. public enum ReferenceAttribute.JoinType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Inner = 0 INNER JOIN: returns rows when there is a match on both the source and the referenced tables. Left = 1 LEFT JOIN: returns all rows from the source table, even if there are no matches in the referenced table"
  },
  "api/Supabase.Postgrest.Attributes.ReferenceAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.ReferenceAttribute.html",
    "title": "Class ReferenceAttribute | supabase-csharp",
    "keywords": "Class ReferenceAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to specify that a foreign key relationship exists in PostgreSQL See: https://postgrest.org/en/stable/api.html#resource-embedding [AttributeUsage(AttributeTargets.Property)] public class ReferenceAttribute : Attribute Inheritance object Attribute ReferenceAttribute Inherited Members Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReferenceAttribute(Type, JoinType, bool, string, string?) Establishes a reference between two tables public ReferenceAttribute(Type model, ReferenceAttribute.JoinType joinType, bool includeInQuery = true, string columnName = \"\", string? foreignKey = null) Parameters model Type Model referenced joinType ReferenceAttribute.JoinType Specifies the join type for this relationship includeInQuery bool Should referenced be included in queries? columnName string Column this attribute references as specified in Postgres, DOES NOT need to be set if <see cref=\"ForeignKey\"/> is set. foreignKey string Foreign Key this attribute references as specified in Postgres (only required if the model references the same table multiple times) Exceptions Exception ReferenceAttribute(Type, bool, bool, string?, string?) Establishes a reference between two tables public ReferenceAttribute(Type model, bool includeInQuery = true, bool useInnerJoin = true, string? columnName = null, string? foreignKey = null) Parameters model Type Model referenced includeInQuery bool Should referenced be included in queries? useInnerJoin bool As to whether the query will filter top-level rows. columnName string Column this attribute references as specified in Postgres, DOES NOT need to be set if ForeignKey is set. foreignKey string Foreign Key this attribute references as specified in Postgres (only required if the model references the same table multiple times) Exceptions Exception Properties ColumnName Column this attribute references as specified in Postgres, DOES NOT need to be set if ForeignKey is set. public string? ColumnName { get; } Property Value string Columns Columns that exist on the model we will select from. public List<string> Columns { get; } Property Value List<string> ForeignKey The explicit SQL defined foreign key that this references. public string? ForeignKey { get; } Property Value string IgnoreOnInsert If the performed query is an Insert or Upsert, should this value be ignored? (DEFAULT TRUE) public bool IgnoreOnInsert { get; } Property Value bool IgnoreOnUpdate If the performed query is an Update, should this value be ignored? (DEFAULT TRUE) public bool IgnoreOnUpdate { get; } Property Value bool IncludeInQuery If Reference should automatically be included in queries on this reference. (DEFAULT TRUE) public bool IncludeInQuery { get; } Property Value bool Model Type of the model referenced public Type Model { get; } Property Value Type TableName Table name of model public string TableName { get; } Property Value string UseInnerJoin As to whether the query will filter top-level rows. See: https://postgrest.org/en/stable/api.html#resource-embedding public bool UseInnerJoin { get; } Property Value bool Methods Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool"
  },
  "api/Supabase.Postgrest.Attributes.TableAttribute.html": {
    "href": "api/Supabase.Postgrest.Attributes.TableAttribute.html",
    "title": "Class TableAttribute | supabase-csharp",
    "keywords": "Class TableAttribute Namespace Supabase.Postgrest.Attributes Assembly Supabase.Postgrest.dll Used to map a C# Model to a Postgres Table. [AttributeUsage(AttributeTargets.Class)] public class TableAttribute : Attribute Inheritance object Attribute TableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples [Table(\"user\")] class User : BaseModel { [ColumnName(\"firstName\")] public string FirstName {get; set;} } Constructors TableAttribute(string) public TableAttribute(string tableName) Parameters tableName string Properties Name public string Name { get; set; } Property Value string"
  },
  "api/Supabase.Postgrest.Attributes.html": {
    "href": "api/Supabase.Postgrest.Attributes.html",
    "title": "Namespace Supabase.Postgrest.Attributes | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Attributes Classes ColumnAttribute Used to map a C# property to a Postgrest Column. PrimaryKeyAttribute Used to map a C# property to a Postgrest PrimaryKey. ReferenceAttribute Used to specify that a foreign key relationship exists in PostgreSQL See: https://postgrest.org/en/stable/api.html#resource-embedding TableAttribute Used to map a C# Model to a Postgres Table. Enums ReferenceAttribute.JoinType Specifies the Join type on this reference. PostgREST only allows for a LEFT join and an INNER join."
  },
  "api/Supabase.Postgrest.Client.html": {
    "href": "api/Supabase.Postgrest.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class Client : IPostgrestClient, IGettableHeaders Inheritance object Client Implements IPostgrestClient IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(string, ClientOptions?) Should be the first call to this class to initialize a connection with a Postgrest API Server public Client(string baseUrl, ClientOptions? options = null) Parameters baseUrl string Api Endpoint (ex: \"http://localhost:8000\"), no trailing slash required. options ClientOptions Optional client configuration. Properties BaseUrl API Base Url for subsequent calls. public string BaseUrl { get; } Property Value string GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor options will ALWAYS take precedence over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Options The Options Client was initialized with. public ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugHandler(DebugEventHandler) Adds a debug handler public void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler AddRequestPreparedHandler(OnRequestPreparedEventHandler) Adds a handler that is called prior to a request being sent. public void AddRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler ClearDebugHandlers() Clears debug handlers public void ClearDebugHandlers() ClearRequestPreparedHandlers() Clears all OnRequestPreparedEventHandler handlers. public void ClearRequestPreparedHandlers() RemoveDebugHandler(DebugEventHandler) Removes a debug handler public void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler RemoveRequestPreparedHandler(OnRequestPreparedEventHandler) Removes an OnRequestPreparedEventHandler handler. public void RemoveRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler Rpc(string, object?) Perform a stored procedure call. public Task<BaseResponse> Rpc(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. public Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET) SerializerSettings(ClientOptions?) Custom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses. By default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial configuration handles that. public static JsonSerializerSettings SerializerSettings(ClientOptions? options = null) Parameters options ClientOptions Returns JsonSerializerSettings Table<T>() Returns a Table Query Builder instance for a defined model - representative of USE $TABLE public IPostgrestTable<T> Table<T>() where T : BaseModel, new() Returns IPostgrestTable<T> Type Parameters T Custom Model derived from BaseModel Table<T>(IPostgrestCacheProvider) Returns a Table Query Builder instance with a Cache Provider for a defined model - representative of USE #$TABLE public IPostgrestTableWithCache<T> Table<T>(IPostgrestCacheProvider cacheProvider) where T : BaseModel, new() Parameters cacheProvider IPostgrestCacheProvider Returns IPostgrestTableWithCache<T> Type Parameters T"
  },
  "api/Supabase.Postgrest.ClientOptions.html": {
    "href": "api/Supabase.Postgrest.ClientOptions.html",
    "title": "Class ClientOptions | supabase-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Options that can be passed to the Client configuration public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields DATE_TIME_FORMAT public const string DATE_TIME_FORMAT = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFK\" Field Value string DateTimeStyles public readonly DateTimeStyles DateTimeStyles Field Value DateTimeStyles Properties Headers public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> QueryParams public Dictionary<string, string> QueryParams { get; set; } Property Value Dictionary<string, string> Schema public string Schema { get; set; } Property Value string"
  },
  "api/Supabase.Postgrest.Constants.CountType.html": {
    "href": "api/Supabase.Postgrest.Constants.CountType.html",
    "title": "Enum Constants.CountType | supabase-csharp",
    "keywords": "Enum Constants.CountType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=count#estimated-count public enum Constants.CountType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"estimated\", null)] Estimated = 2 [MapTo(\"exact\", null)] Exact = 0 [MapTo(\"planned\", null)] Planned = 1"
  },
  "api/Supabase.Postgrest.Constants.NullPosition.html": {
    "href": "api/Supabase.Postgrest.Constants.NullPosition.html",
    "title": "Enum Constants.NullPosition | supabase-csharp",
    "keywords": "Enum Constants.NullPosition Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=nulls%20first#ordering public enum Constants.NullPosition Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"nullsfirst\", null)] First = 0 [MapTo(\"nullslast\", null)] Last = 1"
  },
  "api/Supabase.Postgrest.Constants.Operator.html": {
    "href": "api/Supabase.Postgrest.Constants.Operator.html",
    "title": "Enum Constants.Operator | supabase-csharp",
    "keywords": "Enum Constants.Operator Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll See: https://postgrest.org/en/v7.0.0/api.html?highlight=operators#operators public enum Constants.Operator Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"adj\", null)] Adjacent = 23 [MapTo(\"and\", null)] And = 0 [MapTo(\"cd\", null)] ContainedIn = 17 [MapTo(\"cs\", null)] Contains = 16 [MapTo(\"eq\", null)] Equals = 2 [MapTo(\"fts\", null)] FTS = 12 [MapTo(\"gt\", null)] GreaterThan = 3 [MapTo(\"gte\", null)] GreaterThanOrEqual = 4 [MapTo(\"ilike\", null)] ILike = 9 [MapTo(\"in\", null)] In = 10 [MapTo(\"is\", null)] Is = 11 [MapTo(\"lt\", null)] LessThan = 5 [MapTo(\"lte\", null)] LessThanOrEqual = 6 [MapTo(\"like\", null)] Like = 8 [MapTo(\"not\", null)] Not = 24 [MapTo(\"neq\", null)] NotEqual = 7 [MapTo(\"nxl\", null)] NotLeftOf = 22 [MapTo(\"nxr\", null)] NotRightOf = 21 [MapTo(\"or\", null)] Or = 1 [MapTo(\"ov\", null)] Overlap = 18 [MapTo(\"phfts\", null)] PHFTS = 14 [MapTo(\"plfts\", null)] PLFTS = 13 [MapTo(\"sl\", null)] StrictlyLeft = 19 [MapTo(\"sr\", null)] StrictlyRight = 20 [MapTo(\"wfts\", null)] WFTS = 15"
  },
  "api/Supabase.Postgrest.Constants.Ordering.html": {
    "href": "api/Supabase.Postgrest.Constants.Ordering.html",
    "title": "Enum Constants.Ordering | supabase-csharp",
    "keywords": "Enum Constants.Ordering Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum Constants.Ordering Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"asc\", null)] Ascending = 0 [MapTo(\"desc\", null)] Descending = 1"
  },
  "api/Supabase.Postgrest.Constants.html": {
    "href": "api/Supabase.Postgrest.Constants.html",
    "title": "Class Constants | supabase-csharp",
    "keywords": "Class Constants Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Converters.DateTimeConverter.html": {
    "href": "api/Supabase.Postgrest.Converters.DateTimeConverter.html",
    "title": "Class DateTimeConverter | supabase-csharp",
    "keywords": "Class DateTimeConverter Namespace Supabase.Postgrest.Converters Assembly Supabase.Postgrest.dll Converts an object to and from JSON. public class DateTimeConverter : JsonConverter Inheritance object JsonConverter DateTimeConverter Inherited Members JsonConverter.CanRead object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Postgrest.Converters.IntArrayConverter.html": {
    "href": "api/Supabase.Postgrest.Converters.IntArrayConverter.html",
    "title": "Class IntArrayConverter | supabase-csharp",
    "keywords": "Class IntArrayConverter Namespace Supabase.Postgrest.Converters Assembly Supabase.Postgrest.dll Converts an object to and from JSON. public class IntArrayConverter : JsonConverter Inheritance object JsonConverter IntArrayConverter Inherited Members JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Postgrest.Converters.html": {
    "href": "api/Supabase.Postgrest.Converters.html",
    "title": "Namespace Supabase.Postgrest.Converters | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Converters Classes DateTimeConverter Converts an object to and from JSON. IntArrayConverter Converts an object to and from JSON."
  },
  "api/Supabase.Postgrest.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Postgrest.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | supabase-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll public enum FailureHint.Reason Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields ForeignKeyViolation = 2 InvalidArgument = 7 NotAuthorized = 1 ServerError = 4 UndefinedFunction = 6 UndefinedTable = 5 UniquenessViolation = 3 Unknown = 0"
  },
  "api/Supabase.Postgrest.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Postgrest.Exceptions.FailureHint.html",
    "title": "Class FailureHint | supabase-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll https://postgrest.org/en/v10.2/errors.html?highlight=exception#http-status-codes public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(PostgrestException) public static FailureHint.Reason DetectReason(PostgrestException pgex) Parameters pgex PostgrestException Returns FailureHint.Reason"
  },
  "api/Supabase.Postgrest.Exceptions.PostgrestException.html": {
    "href": "api/Supabase.Postgrest.Exceptions.PostgrestException.html",
    "title": "Class PostgrestException | supabase-csharp",
    "keywords": "Class PostgrestException Namespace Supabase.Postgrest.Exceptions Assembly Supabase.Postgrest.dll Errors from Postgrest are wrapped by this exception public class PostgrestException : Exception, ISerializable Inheritance object Exception PostgrestException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PostgrestException(string?) public PostgrestException(string? message) Parameters message string PostgrestException(string?, Exception?) public PostgrestException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Content The content of the response object from Postgrest public string? Content { get; } Property Value string Reason Postgres client's best effort at decoding the error from the GoTrue server. public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response The response object from Postgrest public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode The HTTP status code of the response object from Postgrest public int StatusCode { get; } Property Value int Methods AddReason() Attempts to decode the error from the GoTrue server. public void AddReason()"
  },
  "api/Supabase.Postgrest.Exceptions.html": {
    "href": "api/Supabase.Postgrest.Exceptions.html",
    "title": "Namespace Supabase.Postgrest.Exceptions | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Exceptions Classes FailureHint https://postgrest.org/en/v10.2/errors.html?highlight=exception#http-status-codes PostgrestException Errors from Postgrest are wrapped by this exception Enums FailureHint.Reason"
  },
  "api/Supabase.Postgrest.Extensions.EnumExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | supabase-csharp",
    "keywords": "Class EnumExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Adds functionality to get a typed Attribute attached to an enum value. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Extensions.RangeExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.RangeExtensions.html",
    "title": "Class RangeExtensions | supabase-csharp",
    "keywords": "Class RangeExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Adds functionality to transform a C# Range to a Postgrest String. https://www.postgresql.org/docs/14/rangetypes.html public static class RangeExtensions Inheritance object RangeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.Postgrest.Extensions.UriExtensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.UriExtensions.html",
    "title": "Class UriExtensions | supabase-csharp",
    "keywords": "Class UriExtensions Namespace Supabase.Postgrest.Extensions Assembly Supabase.Postgrest.dll Pull the instance info out of the Uri public static class UriExtensions Inheritance object UriExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetInstanceUrl(Uri) Pull the instance info out of the Uri public static string GetInstanceUrl(this Uri uri) Parameters uri Uri Returns string"
  },
  "api/Supabase.Postgrest.Extensions.html": {
    "href": "api/Supabase.Postgrest.Extensions.html",
    "title": "Namespace Supabase.Postgrest.Extensions | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Extensions Classes EnumExtensions Adds functionality to get a typed Attribute attached to an enum value. RangeExtensions Adds functionality to transform a C# Range to a Postgrest String. https://www.postgresql.org/docs/14/rangetypes.html UriExtensions Pull the instance info out of the Uri"
  },
  "api/Supabase.Postgrest.FullTextSearchConfig.html": {
    "href": "api/Supabase.Postgrest.FullTextSearchConfig.html",
    "title": "Class FullTextSearchConfig | supabase-csharp",
    "keywords": "Class FullTextSearchConfig Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Configuration Object for Full Text Search. API Reference: http://postgrest.org/en/v7.0.0/api.html?highlight=full%20text%20search#full-text-search public class FullTextSearchConfig Inheritance object FullTextSearchConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FullTextSearchConfig(string, string?) Constructor for Full Text Search. public FullTextSearchConfig(string queryText, string? config) Parameters queryText string config string Properties Config Defaults to english [JsonProperty(\"config\")] public string Config { get; } Property Value string QueryText Query Text [JsonProperty(\"queryText\")] public string QueryText { get; } Property Value string"
  },
  "api/Supabase.Postgrest.Index.html": {
    "href": "api/Supabase.Postgrest.Index.html",
    "title": "Class Index | supabase-csharp",
    "keywords": "Class Index Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represent a type can be used to index a collection either from the start or the end. public class Index : IEquatable<Index> Inheritance object Index Implements IEquatable<Index> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Index is used by the C# compiler to support the new index syntax int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ; int lastElement = someArray[^1]; // lastElement = 5 Constructors Index(int, bool) Construct an Index using a value and indicating if the index is from the start or from the end. public Index(int value, bool fromEnd = false) Parameters value int The index value. it has to be zero or positive number. fromEnd bool Indicating if the index is from the start or from the end. Remarks If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element. Properties End Create an Index pointing at beyond last element. public static Index End { get; } Property Value Index IsFromEnd Indicates whether the index is from the start or the end. public bool IsFromEnd { get; } Property Value bool Start Create an Index pointing at first element. public static Index Start { get; } Property Value Index Value Returns the index value. public int Value { get; } Property Value int Methods Equals(Index) Indicates whether the current Index object is equal to another Index object. public bool Equals(Index other) Parameters other Index An object to compare with this object Returns bool Equals(object?) Indicates whether the current Index object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool FromEnd(int) Create an Index from the end at the position indicated by the value. public static Index FromEnd(int value) Parameters value int The index value from the end. Returns Index FromStart(int) Create an Index from the start at the position indicated by the value. public static Index FromStart(int value) Parameters value int The index value from the start. Returns Index GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffset(int) Calculate the offset from the start using the giving collection length. public int GetOffset(int length) Parameters length int The length of the collection that the Index will be used with. length has to be a positive value Returns int Remarks For performance reason, we don't validate the input length parameter and the returned offset value against negative values. we don't validate either the returned offset is greater than the input length. It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and then used to index a collection will get out of range exception which will be same affect as the validation. ToString() Converts the value of the current Index object to its equivalent string representation. public override string ToString() Returns string Operators implicit operator Index(int) Converts integer number to an Index. public static implicit operator Index(int value) Parameters value int Returns Index"
  },
  "api/Supabase.Postgrest.IntRange.html": {
    "href": "api/Supabase.Postgrest.IntRange.html",
    "title": "Class IntRange | supabase-csharp",
    "keywords": "Class IntRange Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represent a range has start and end indexes. public class IntRange : IEquatable<IntRange> Inheritance object IntRange Implements IEquatable<IntRange> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Range is used by the C# compiler to support the range syntax. int[] someArray = new int[5] { 1, 2, 3, 4, 5 }; int[] subArray1 = someArray[0..2]; // { 1, 2 } int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 } Constructors IntRange(Index, Index) Construct a Range object using the start and end indexes. public IntRange(Index start, Index end) Parameters start Index Represent the inclusive start index of the range. end Index Represent the exclusive end index of the range. Properties All Create a Range object starting from first element to the end. public static IntRange All { get; } Property Value IntRange End Represent the exclusive end index of the Range. public Index End { get; } Property Value Index Start Represent the inclusive start index of the Range. public Index Start { get; } Property Value Index Methods EndAt(Index) Create a Range object starting from first element in the collection to the end Index. public static IntRange EndAt(Index end) Parameters end Index Returns IntRange Equals(IntRange) Indicates whether the current Range object is equal to another Range object. public bool Equals(IntRange other) Parameters other IntRange An object to compare with this object Returns bool Equals(object?) Indicates whether the current Range object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffsetAndLength(int) Calculate the start offset and length of range object using a collection length. public (int Offset, int Length) GetOffsetAndLength(int length) Parameters length int The length of the collection that the range will be used with. length has to be a positive value. Returns (int Offset, int Length) Remarks For performance reason, we don't validate the input length parameter against negative values. It is expected Range will be used with collections which always have non negative length/count. We validate the range is inside the length scope though. StartAt(Index) Create a Range object starting from start index to the end of the collection. public static IntRange StartAt(Index start) Parameters start Index Returns IntRange ToString() Converts the value of the current Range object to its equivalent string representation. public override string ToString() Returns string"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestCacheProvider.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestCacheProvider.html",
    "title": "Interface IPostgrestCacheProvider | supabase-csharp",
    "keywords": "Interface IPostgrestCacheProvider Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll A caching provider than can be used by postgrest to store requests. public interface IPostgrestCacheProvider Methods ClearItem(string) Clear an item within a caching solution by a key. Task ClearItem(string key) Parameters key string A reproducible key for a defined query. Returns Task Empty() An empty/clear cache implementation. Task Empty() Returns Task GetItem<T>(string) Gets an item from a caching solution, should coerce into a datatype. This will most likely be a JSON deserialization approach. Task<T?> GetItem<T>(string key) Parameters key string A reproducible key for a defined query. Returns Task<T> Type Parameters T SetItem(string, object) Sets an item within a caching solution, should store in a way that the data can be retrieved and coerced into a generic type by GetItem<T>(string) This will most likely be a JSON serialization approach. Task SetItem(string key, object value) Parameters key string A reproducible key for a defined query. value object An object of serializable data. Returns Task"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestClient.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestClient.html",
    "title": "Interface IPostgrestClient | supabase-csharp",
    "keywords": "Interface IPostgrestClient Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestClient : IGettableHeaders Inherited Members IGettableHeaders.GetHeaders Properties BaseUrl API Base Url for subsequent calls. string BaseUrl { get; } Property Value string Options The Options Client was initialized with. ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugHandler(DebugEventHandler) Adds a debug handler void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler AddRequestPreparedHandler(OnRequestPreparedEventHandler) Adds a handler that is called prior to a request being sent. void AddRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler ClearDebugHandlers() Clears debug handlers void ClearDebugHandlers() ClearRequestPreparedHandlers() Clears all OnRequestPreparedEventHandler handlers. void ClearRequestPreparedHandlers() RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler RemoveRequestPreparedHandler(OnRequestPreparedEventHandler) Removes an OnRequestPreparedEventHandler handler. void RemoveRequestPreparedHandler(OnRequestPreparedEventHandler handler) Parameters handler OnRequestPreparedEventHandler Rpc(string, object?) Perform a stored procedure call. Task<BaseResponse> Rpc(string procedureName, object? parameters) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<BaseResponse> Rpc<TModeledResponse>(string, object?) Perform a stored procedure call. Task<TModeledResponse?> Rpc<TModeledResponse>(string procedureName, object? parameters = null) Parameters procedureName string The function name to call parameters object The parameters to pass to the function call Returns Task<TModeledResponse> A hydrated model Type Parameters TModeledResponse A type used for hydrating the HTTP response content (hydration through JSON.NET) Table<T>() Returns a Table Query Builder instance for a defined model - representative of USE $TABLE IPostgrestTable<T> Table<T>() where T : BaseModel, new() Returns IPostgrestTable<T> Type Parameters T Custom Model derived from BaseModel Table<T>(IPostgrestCacheProvider) Returns a Table Query Builder instance with a Cache Provider for a defined model - representative of USE #$TABLE IPostgrestTableWithCache<T> Table<T>(IPostgrestCacheProvider cacheProvider) where T : BaseModel, new() Parameters cacheProvider IPostgrestCacheProvider Returns IPostgrestTableWithCache<T> Type Parameters T"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.DebugEventHandler.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.DebugEventHandler.html",
    "title": "Delegate IPostgrestDebugger.DebugEventHandler | supabase-csharp",
    "keywords": "Delegate IPostgrestDebugger.DebugEventHandler Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll public delegate void IPostgrestDebugger.DebugEventHandler(object? sender, string message, PostgrestException? exception) Parameters sender object message string exception PostgrestException"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestDebugger.html",
    "title": "Interface IPostgrestDebugger | supabase-csharp",
    "keywords": "Interface IPostgrestDebugger Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Interface for getting debug info from Postgrest public interface IPostgrestDebugger Methods AddDebugHandler(DebugEventHandler) Adds a debug handler void AddDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler ClearDebugHandlers() Clears debug handlers void ClearDebugHandlers() Log(object?, string, PostgrestException?) Logs a message void Log(object? sender, string message, PostgrestException? exception = null) Parameters sender object message string exception PostgrestException RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IPostgrestDebugger.DebugEventHandler handler) Parameters handler IPostgrestDebugger.DebugEventHandler"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestQueryFilter.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestQueryFilter.html",
    "title": "Interface IPostgrestQueryFilter | supabase-csharp",
    "keywords": "Interface IPostgrestQueryFilter Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll public interface IPostgrestQueryFilter Properties Criteria object? Criteria { get; } Property Value object Op Constants.Operator Op { get; } Property Value Constants.Operator Property string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestTable-1.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestTable-1.html",
    "title": "Interface IPostgrestTable<TModel> | supabase-csharp",
    "keywords": "Interface IPostgrestTable<TModel> Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestTable<TModel> : IGettableHeaders where TModel : BaseModel, new() Type Parameters TModel Inherited Members IGettableHeaders.GetHeaders Properties BaseUrl API Base Url for subsequent calls. string BaseUrl { get; } Property Value string TableName Name of the Table parsed by the Model. string TableName { get; } Property Value string Methods And(List<IPostgrestQueryFilter>) Adds an AND Filter to the current query args. IPostgrestTable<TModel> And(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Clear() Clears currently defined query values. void Clear() Columns(Expression<Func<TModel, object[]>>) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns IPostgrestTable<TModel> Columns(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Returns IPostgrestTable<TModel> Columns(string[]) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns IPostgrestTable<TModel> Columns(string[] columns) Parameters columns string[] Returns IPostgrestTable<TModel> Count(CountType, CancellationToken) Returns ONLY a count from the specified query. See: https://postgrest.org/en/v7.0.0/api.html?highlight=count Task<int> Count(Constants.CountType type, CancellationToken cancellationToken = default) Parameters type Constants.CountType The kind of count. cancellationToken CancellationToken Returns Task<int> Delete(QueryOptions?, CancellationToken) Executes a delete request using the defined query params on the current instance. Task Delete(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task Delete(TModel, QueryOptions?, CancellationToken) Executes a delete request using the model's primary key as the filter for the request. Task<ModeledResponse<TModel>> Delete(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Filter<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Add a filter to a query request using a predicate to select column. IPostgrestTable<TModel> Filter<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a columns from the Model to be returned op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion Exceptions ArgumentException Filter<TCriterion>(string, Operator, TCriterion?) Add a Filter to a query request IPostgrestTable<TModel> Filter<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string Column Name in Table. op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion GenerateUrl() Generates the encoded URL with defined query parameters that will be sent to the Postgrest API. string GenerateUrl() Returns string Get(CancellationToken) Executes the query using the defined filters on the current instance. Task<ModeledResponse<TModel>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Insert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes a BULK INSERT query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Insert(ICollection<TModel> models, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters models ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Insert(TModel, QueryOptions?, CancellationToken) Executes an INSERT query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Insert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Limit(int, string?) Sets a limit with an optional foreign table reference. IPostgrestTable<TModel> Limit(int limit, string? foreignTableName = null) Parameters limit int foreignTableName string Returns IPostgrestTable<TModel> Match(Dictionary<string, string>) Finds all rows whose columns match the specified query object. IPostgrestTable<TModel> Match(Dictionary<string, string> query) Parameters query Dictionary<string, string> The object to filter with, with column names as keys mapped to their filter values. Returns IPostgrestTable<TModel> Match(TModel) Fills in query parameters based on a given model's primary key(s). IPostgrestTable<TModel> Match(TModel model) Parameters model TModel A model with a primary key column Returns IPostgrestTable<TModel> Not(IPostgrestQueryFilter) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(IPostgrestQueryFilter filter) Parameters filter IPostgrestQueryFilter Returns IPostgrestTable<TModel> Not(Expression<Func<TModel, object>>, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(Expression<Func<TModel, object>> predicate, Constants.Operator op, Dictionary<string, object> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not(string, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. IPostgrestTable<TModel> Not(string columnName, Constants.Operator op, Dictionary<string, object> criteria) Parameters columnName string op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>>, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, List<TCriterion> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, List<TCriterion> criteria) Parameters columnName string op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Offset(int, string?) Sets an offset with an optional foreign table reference. IPostgrestTable<TModel> Offset(int offset, string? foreignTableName = null) Parameters offset int foreignTableName string Returns IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>>) Set an onConflict query parameter for UPSERTing on a column that has a UNIQUE constraint using a linq predicate. IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>> predicate) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. Returns IPostgrestTable<TModel> OnConflict(string) By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. IPostgrestTable<TModel> OnConflict(string columnName) Parameters columnName string Returns IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter>) Adds a OR Filter to the current query args. IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Order(Expression<Func<TModel, object>>, Ordering, NullPosition) Adds an ordering to the current query args using a predicate function. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(Expression<Func<TModel, object>> predicate, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters predicate Expression<Func<TModel, object>> ordering Constants.Ordering Expects a columns from the Model to be returned nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters column string Column Name ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . IPostgrestTable<TModel> Order(string foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Range(int) Sets a FROM range, similar to a StartAt query. IPostgrestTable<TModel> Range(int from) Parameters from int Returns IPostgrestTable<TModel> Range(int, int) Sets a bounded range to the current query. IPostgrestTable<TModel> Range(int from, int to) Parameters from int to int Returns IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>>) Select columns using a predicate function. For example: Table<Movie>().Select(x => new[] { x.Id, x.Name, x.CreatedAt }).Get(); IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Expects an array of columns from the Model to be returned. Returns IPostgrestTable<TModel> Select(string) Select columns for query. IPostgrestTable<TModel> Select(string columnQuery) Parameters columnQuery string Returns IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>>) Specifies a KeyValuePair to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>> keyValuePairExpression) Parameters keyValuePairExpression Expression<Func<TModel, KeyValuePair<object, object>>> Returns IPostgrestTable<TModel> Exceptions ArgumentException Set(Expression<Func<TModel, object>>, object?) Specifies a key and value to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. IPostgrestTable<TModel> Set(Expression<Func<TModel, object>> keySelector, object? value) Parameters keySelector Expression<Func<TModel, object>> value object Returns IPostgrestTable<TModel> Single(CancellationToken) Executes a query that expects to have a single object returned, rather than returning list of models it will return a single model. Task<TModel?> Single(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<TModel> Update(QueryOptions?, CancellationToken) Calls an Update function after Set has been called. Task<ModeledResponse<TModel>> Update(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Exceptions ArgumentException Update(TModel, QueryOptions?, CancellationToken) Executes an UPDATE query using the defined query params on the current instance. Task<ModeledResponse<TModel>> Update(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed response from the database. Upsert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. Task<ModeledResponse<TModel>> Upsert(ICollection<TModel> model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Upsert(TModel, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. Task<ModeledResponse<TModel>> Upsert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Where(Expression<Func<TModel, bool>>) Filter a query based on a predicate function. Note: Chaining multiple Where(Expression<Func<TModel, bool>>) calls will be parsed as an \"AND\" query. Examples: Table<Movie>().Where(x => x.Name == \"Top Gun\").Get(); Table<Movie>().Where(x => x.Name == \"Top Gun\" || x.Name == \"Mad Max\").Get(); Table<Movie>().Where(x => x.Name.Contains(\"Gun\")).Get(); Table<Movie>().Where(x => x.CreatedAt <= new DateTime(2022, 08, 21)).Get(); Table<Movie>().Where(x => x.Id > 5 && x.Name.Contains(\"Max\")).Get(); IPostgrestTable<TModel> Where(Expression<Func<TModel, bool>> predicate) Parameters predicate Expression<Func<TModel, bool>> Returns IPostgrestTable<TModel>"
  },
  "api/Supabase.Postgrest.Interfaces.IPostgrestTableWithCache-1.html": {
    "href": "api/Supabase.Postgrest.Interfaces.IPostgrestTableWithCache-1.html",
    "title": "Interface IPostgrestTableWithCache<T> | supabase-csharp",
    "keywords": "Interface IPostgrestTableWithCache<T> Namespace Supabase.Postgrest.Interfaces Assembly Supabase.Postgrest.dll Client interface for Postgrest public interface IPostgrestTableWithCache<T> : IPostgrestTable<T>, IGettableHeaders where T : BaseModel, new() Type Parameters T Inherited Members IPostgrestTable<T>.BaseUrl IPostgrestTable<T>.TableName IPostgrestTable<T>.GenerateUrl() IPostgrestTable<T>.And(List<IPostgrestQueryFilter>) IPostgrestTable<T>.Clear() IPostgrestTable<T>.Columns(string[]) IPostgrestTable<T>.Columns(Expression<Func<T, object[]>>) IPostgrestTable<T>.Count(Constants.CountType, CancellationToken) IPostgrestTable<T>.Delete(QueryOptions, CancellationToken) IPostgrestTable<T>.Delete(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Filter<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<T>.Filter<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) IPostgrestTable<T>.Insert(ICollection<T>, QueryOptions, CancellationToken) IPostgrestTable<T>.Insert(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Limit(int, string) IPostgrestTable<T>.Match(Dictionary<string, string>) IPostgrestTable<T>.Match(T) IPostgrestTable<T>.Not(IPostgrestQueryFilter) IPostgrestTable<T>.Not(string, Constants.Operator, Dictionary<string, object>) IPostgrestTable<T>.Not(Expression<Func<T, object>>, Constants.Operator, Dictionary<string, object>) IPostgrestTable<T>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) IPostgrestTable<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, List<TCriterion>) IPostgrestTable<T>.Not<TCriterion>(string, Constants.Operator, TCriterion) IPostgrestTable<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) IPostgrestTable<T>.Offset(int, string) IPostgrestTable<T>.OnConflict(string) IPostgrestTable<T>.OnConflict(Expression<Func<T, object>>) IPostgrestTable<T>.Or(List<IPostgrestQueryFilter>) IPostgrestTable<T>.Order(string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Order(Expression<Func<T, object>>, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Order(string, string, Constants.Ordering, Constants.NullPosition) IPostgrestTable<T>.Range(int) IPostgrestTable<T>.Range(int, int) IPostgrestTable<T>.Select(string) IPostgrestTable<T>.Select(Expression<Func<T, object[]>>) IPostgrestTable<T>.Where(Expression<Func<T, bool>>) IPostgrestTable<T>.Single(CancellationToken) IPostgrestTable<T>.Set(Expression<Func<T, object>>, object) IPostgrestTable<T>.Set(Expression<Func<T, KeyValuePair<object, object>>>) IPostgrestTable<T>.Update(QueryOptions, CancellationToken) IPostgrestTable<T>.Update(T, QueryOptions, CancellationToken) IPostgrestTable<T>.Upsert(ICollection<T>, QueryOptions, CancellationToken) IPostgrestTable<T>.Upsert(T, QueryOptions, CancellationToken) IGettableHeaders.GetHeaders Methods Get(CancellationToken) Performs a Get request, returning a CacheBackedRequest<TModel> which populates from the cache, if applicable. Task<CacheBackedRequest<T>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<CacheBackedRequest<T>>"
  },
  "api/Supabase.Postgrest.Interfaces.html": {
    "href": "api/Supabase.Postgrest.Interfaces.html",
    "title": "Namespace Supabase.Postgrest.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Interfaces Interfaces IPostgrestCacheProvider A caching provider than can be used by postgrest to store requests. IPostgrestClient Client interface for Postgrest IPostgrestDebugger Interface for getting debug info from Postgrest IPostgrestQueryFilter IPostgrestTableWithCache<T> Client interface for Postgrest IPostgrestTable<TModel> Client interface for Postgrest Delegates IPostgrestDebugger.DebugEventHandler"
  },
  "api/Supabase.Postgrest.Models.BaseModel.html": {
    "href": "api/Supabase.Postgrest.Models.BaseModel.html",
    "title": "Class BaseModel | supabase-csharp",
    "keywords": "Class BaseModel Namespace Supabase.Postgrest.Models Assembly Supabase.Postgrest.dll Abstract class that must be implemented by C# Postgrest Models. public abstract class BaseModel Inheritance object BaseModel Derived SupabaseModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseUrl [JsonIgnore] public string? BaseUrl { get; set; } Property Value string PrimaryKey Gets the values of the PrimaryKey columns (there can be multiple) on a model's instance as defined by the [PrimaryKey] attributes on a property on the model. [JsonIgnore] public Dictionary<PrimaryKeyAttribute, object> PrimaryKey { get; } Property Value Dictionary<PrimaryKeyAttribute, object> RequestClientOptions [JsonIgnore] public ClientOptions? RequestClientOptions { get; set; } Property Value ClientOptions TableName [JsonIgnore] public string TableName { get; } Property Value string Methods Delete<T>(CancellationToken) public virtual Task Delete<T>(CancellationToken cancellationToken = default) where T : BaseModel, new() Parameters cancellationToken CancellationToken Returns Task Type Parameters T Update<T>(CancellationToken) public Task<ModeledResponse<T>> Update<T>(CancellationToken cancellationToken = default) where T : BaseModel, new() Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<T>> Type Parameters T"
  },
  "api/Supabase.Postgrest.Models.CachedModel-1.html": {
    "href": "api/Supabase.Postgrest.Models.CachedModel-1.html",
    "title": "Class CachedModel<TModel> | supabase-csharp",
    "keywords": "Class CachedModel<TModel> Namespace Supabase.Postgrest.Models Assembly Supabase.Postgrest.dll Represents a cacheable model public class CachedModel<TModel> where TModel : BaseModel, new() Type Parameters TModel Inheritance object CachedModel<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CachedAt Cache time in UTC. [JsonProperty(\"cachedAt\")] public DateTime CachedAt { get; set; } Property Value DateTime Models The stored Models [JsonProperty(\"response\")] public List<TModel>? Models { get; set; } Property Value List<TModel>"
  },
  "api/Supabase.Postgrest.Models.html": {
    "href": "api/Supabase.Postgrest.Models.html",
    "title": "Namespace Supabase.Postgrest.Models | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Models Classes BaseModel Abstract class that must be implemented by C# Postgrest Models. CachedModel<TModel> Represents a cacheable model"
  },
  "api/Supabase.Postgrest.OnRequestPreparedEventHandler.html": {
    "href": "api/Supabase.Postgrest.OnRequestPreparedEventHandler.html",
    "title": "Delegate OnRequestPreparedEventHandler | supabase-csharp",
    "keywords": "Delegate OnRequestPreparedEventHandler Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Delegate representing the request to be sent to the remote server. public delegate void OnRequestPreparedEventHandler(object sender, ClientOptions clientOptions, HttpMethod method, string url, JsonSerializerSettings serializerSettings, object? data = null, Dictionary<string, string>? headers = null) Parameters sender object Delegate representing the request to be sent to the remote server. clientOptions ClientOptions Delegate representing the request to be sent to the remote server. method HttpMethod Delegate representing the request to be sent to the remote server. url string Delegate representing the request to be sent to the remote server. serializerSettings JsonSerializerSettings Delegate representing the request to be sent to the remote server. data object Delegate representing the request to be sent to the remote server. headers Dictionary<string, string> Delegate representing the request to be sent to the remote server."
  },
  "api/Supabase.Postgrest.PostgrestContractResolver.html": {
    "href": "api/Supabase.Postgrest.PostgrestContractResolver.html",
    "title": "Class PostgrestContractResolver | supabase-csharp",
    "keywords": "Class PostgrestContractResolver Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll A custom resolver that handles mapping column names and property names as well as handling the conversion of Postgrest Ranges to a C# Range. public class PostgrestContractResolver : DefaultContractResolver, IContractResolver Inheritance object DefaultContractResolver PostgrestContractResolver Implements IContractResolver Inherited Members DefaultContractResolver.ResolveContract(Type) DefaultContractResolver.GetSerializableMembers(Type) DefaultContractResolver.CreateObjectContract(Type) DefaultContractResolver.CreateConstructorParameters(ConstructorInfo, JsonPropertyCollection) DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty, ParameterInfo) DefaultContractResolver.ResolveContractConverter(Type) DefaultContractResolver.CreateDictionaryContract(Type) DefaultContractResolver.CreateArrayContract(Type) DefaultContractResolver.CreatePrimitiveContract(Type) DefaultContractResolver.CreateLinqContract(Type) DefaultContractResolver.CreateISerializableContract(Type) DefaultContractResolver.CreateDynamicContract(Type) DefaultContractResolver.CreateStringContract(Type) DefaultContractResolver.CreateContract(Type) DefaultContractResolver.CreateProperties(Type, MemberSerialization) DefaultContractResolver.CreateMemberValueProvider(MemberInfo) DefaultContractResolver.ResolvePropertyName(string) DefaultContractResolver.ResolveExtensionDataName(string) DefaultContractResolver.ResolveDictionaryKey(string) DefaultContractResolver.GetResolvedPropertyName(string) DefaultContractResolver.DynamicCodeGeneration DefaultContractResolver.DefaultMembersSearchFlags DefaultContractResolver.SerializeCompilerGeneratedMembers DefaultContractResolver.IgnoreSerializableInterface DefaultContractResolver.IgnoreSerializableAttribute DefaultContractResolver.IgnoreIsSpecifiedMembers DefaultContractResolver.IgnoreShouldSerializeMembers DefaultContractResolver.NamingStrategy object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Methods CreateProperty(MemberInfo, MemberSerialization) Creates a Newtonsoft.Json.Serialization.JsonProperty for the given MemberInfo. protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization) Parameters member MemberInfo The member to create a Newtonsoft.Json.Serialization.JsonProperty for. memberSerialization MemberSerialization The member's parent Newtonsoft.Json.MemberSerialization. Returns JsonProperty A created Newtonsoft.Json.Serialization.JsonProperty for the given MemberInfo. SetState(bool, bool, bool) Sets the state of the contract resolver to either insert, update, or upsert. public void SetState(bool isInsert = false, bool isUpdate = false, bool isUpsert = false) Parameters isInsert bool isUpdate bool isUpsert bool"
  },
  "api/Supabase.Postgrest.QueryFilter-2.html": {
    "href": "api/Supabase.Postgrest.QueryFilter-2.html",
    "title": "Class QueryFilter<TModel, TCriterion> | supabase-csharp",
    "keywords": "Class QueryFilter<TModel, TCriterion> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Allow for the expression of a query filter with linq expressions. public class QueryFilter<TModel, TCriterion> : IPostgrestQueryFilter Type Parameters TModel TCriterion Inheritance object QueryFilter<TModel, TCriterion> Implements IPostgrestQueryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryFilter(Expression<Func<TModel, object>>, Operator, TCriterion?) Allows the creation of a Query Filter using a LINQ expression. public QueryFilter(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> op Constants.Operator criterion TCriterion Exceptions ArgumentException Properties Criteria public object? Criteria { get; } Property Value object Op public Constants.Operator Op { get; } Property Value Constants.Operator Property public string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.QueryFilter.html": {
    "href": "api/Supabase.Postgrest.QueryFilter.html",
    "title": "Class QueryFilter | supabase-csharp",
    "keywords": "Class QueryFilter Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryFilter : IPostgrestQueryFilter Inheritance object QueryFilter Implements IPostgrestQueryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryFilter(Operator, IPostgrestQueryFilter) Constructor to enable NOT functionality public QueryFilter(Constants.Operator op, IPostgrestQueryFilter filter) Parameters op Constants.Operator Operation: Not. filter IPostgrestQueryFilter QueryFilter(Operator, List<IPostgrestQueryFilter>) Constructor to enable AND and OR Queries by allowing nested QueryFilters. public QueryFilter(Constants.Operator op, List<IPostgrestQueryFilter> filters) Parameters op Constants.Operator Operation: And, Or filters List<IPostgrestQueryFilter> QueryFilter(string, Operator, FullTextSearchConfig) Constructor for Full Text Search. public QueryFilter(string property, Constants.Operator op, FullTextSearchConfig fullTextSearchConfig) Parameters property string Column Name op Constants.Operator Operation: FTS, PHFTS, PLFTS, WFTS fullTextSearchConfig FullTextSearchConfig QueryFilter(string, Operator, IntRange) Constructor for Range Queries. public QueryFilter(string property, Constants.Operator op, IntRange range) Parameters property string op Constants.Operator Operator: Overlap, StrictlyLeft, StrictlyRight, NotRightOf, NotLeftOf, Adjacent range IntRange QueryFilter(string, Operator, object?) Contractor to use single value filtering. public QueryFilter(string property, Constants.Operator op, object? criteria) Parameters property string Column name op Constants.Operator Operation: And, Equals, GreaterThan, LessThan, GreaterThanOrEqual, LessThanOrEqual, NotEqual, Is, Adjacent, Not, Like, ILike criteria object Fields NullVal String value to be substituted for a null criterion public const string NullVal = \"null\" Field Value string Properties Criteria public object? Criteria { get; } Property Value object Op public Constants.Operator Op { get; } Property Value Constants.Operator Property public string? Property { get; } Property Value string"
  },
  "api/Supabase.Postgrest.QueryOptions.CountType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.CountType.html",
    "title": "Enum QueryOptions.CountType | supabase-csharp",
    "keywords": "Enum QueryOptions.CountType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.CountType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"estimated\", null)] Estimated = 3 [MapTo(\"exact\", null)] Exact = 1 [MapTo(\"none\", null)] None = 0 [MapTo(\"planned\", null)] Planned = 2"
  },
  "api/Supabase.Postgrest.QueryOptions.DuplicateResolutionType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.DuplicateResolutionType.html",
    "title": "Enum QueryOptions.DuplicateResolutionType | supabase-csharp",
    "keywords": "Enum QueryOptions.DuplicateResolutionType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.DuplicateResolutionType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"ignore-duplicates\", null)] IgnoreDuplicates = 1 [MapTo(\"merge-duplicates\", null)] MergeDuplicates = 0"
  },
  "api/Supabase.Postgrest.QueryOptions.ReturnType.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.ReturnType.html",
    "title": "Enum QueryOptions.ReturnType | supabase-csharp",
    "keywords": "Enum QueryOptions.ReturnType Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public enum QueryOptions.ReturnType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"minimal\", null)] Minimal = 0 [MapTo(\"representation\", null)] Representation = 1"
  },
  "api/Supabase.Postgrest.QueryOptions.html": {
    "href": "api/Supabase.Postgrest.QueryOptions.html",
    "title": "Class QueryOptions | supabase-csharp",
    "keywords": "Class QueryOptions Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryOptions Inheritance object QueryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Count Count algorithm to use to count rows in a table. public QueryOptions.CountType Count { get; set; } Property Value QueryOptions.CountType DuplicateResolution Specifies if duplicate rows should be ignored and not inserted. public QueryOptions.DuplicateResolutionType DuplicateResolution { get; set; } Property Value QueryOptions.DuplicateResolutionType OnConflict /// By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. public string? OnConflict { get; set; } Property Value string Returning By default the new record is returned. Set this to 'Minimal' if you don't need this value. public QueryOptions.ReturnType Returning { get; set; } Property Value QueryOptions.ReturnType Upsert If the record should be upserted public bool Upsert { get; set; } Property Value bool Methods ToHeaders() public Dictionary<string, string> ToHeaders() Returns Dictionary<string, string>"
  },
  "api/Supabase.Postgrest.QueryOrderer.html": {
    "href": "api/Supabase.Postgrest.QueryOrderer.html",
    "title": "Class QueryOrderer | supabase-csharp",
    "keywords": "Class QueryOrderer Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll public class QueryOrderer Inheritance object QueryOrderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryOrderer(string?, string, Ordering, NullPosition) public QueryOrderer(string? foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Properties Column public string Column { get; } Property Value string ForeignTable public string? ForeignTable { get; } Property Value string NullPosition public Constants.NullPosition NullPosition { get; } Property Value Constants.NullPosition Ordering public Constants.Ordering Ordering { get; } Property Value Constants.Ordering"
  },
  "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.RemoteModelsPopulatedEventHandler.html": {
    "href": "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.RemoteModelsPopulatedEventHandler.html",
    "title": "Delegate CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler | supabase-csharp",
    "keywords": "Delegate CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler Namespace Supabase.Postgrest.Requests Assembly Supabase.Postgrest.dll Handler for when Remote Models have been populated public delegate void CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler(CacheBackedRequest<TModel> sender) Parameters sender CacheBackedRequest<TModel> Handler for when Remote Models have been populated"
  },
  "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.html": {
    "href": "api/Supabase.Postgrest.Requests.CacheBackedRequest-1.html",
    "title": "Class CacheBackedRequest<TModel> | supabase-csharp",
    "keywords": "Class CacheBackedRequest<TModel> Namespace Supabase.Postgrest.Requests Assembly Supabase.Postgrest.dll Represents a Request that is backed by a caching strategy. public class CacheBackedRequest<TModel> : INotifyPropertyChanged where TModel : BaseModel, new() Type Parameters TModel Inheritance object CacheBackedRequest<TModel> Implements INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheBackedRequest(IPostgrestTableWithCache<TModel>, IPostgrestCacheProvider, Func<Task<ModeledResponse<TModel>>>) Constructs a Cache Backed Request that automatically populates itself using the Cache provider (if possible). public CacheBackedRequest(IPostgrestTableWithCache<TModel> instance, IPostgrestCacheProvider cacheProvider, Func<Task<ModeledResponse<TModel>>> remoteRequestAction) Parameters instance IPostgrestTableWithCache<TModel> cacheProvider IPostgrestCacheProvider remoteRequestAction Func<Task<ModeledResponse<TModel>>> Properties CacheTime The stored cache time in UTC. public DateTime? CacheTime { get; protected set; } Property Value DateTime? Models The Models returned either by Cache Hit or Remote Response public List<TModel> Models { get; set; } Property Value List<TModel> Response The response (if applicable) from _remoteRequestAction public ModeledResponse<TModel>? Response { get; protected set; } Property Value ModeledResponse<TModel> WasCacheHit If the cache was hit for this request. public bool WasCacheHit { get; protected set; } Property Value bool WasResponseCached If the response was stored in cache. public bool WasResponseCached { get; protected set; } Property Value bool Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler RemoteModelsPopulated Invoked when Remote Models have been populated on this object. public event CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler? RemoteModelsPopulated Event Type CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler"
  },
  "api/Supabase.Postgrest.Requests.html": {
    "href": "api/Supabase.Postgrest.Requests.html",
    "title": "Namespace Supabase.Postgrest.Requests | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Requests Classes CacheBackedRequest<TModel> Represents a Request that is backed by a caching strategy. Delegates CacheBackedRequest<TModel>.RemoteModelsPopulatedEventHandler Handler for when Remote Models have been populated"
  },
  "api/Supabase.Postgrest.Responses.BaseResponse.html": {
    "href": "api/Supabase.Postgrest.Responses.BaseResponse.html",
    "title": "Class BaseResponse | supabase-csharp",
    "keywords": "Class BaseResponse Namespace Supabase.Postgrest.Responses Assembly Supabase.Postgrest.dll A wrapper class from which all Responses derive. public class BaseResponse Inheritance object BaseResponse Derived ModeledResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseResponse(ClientOptions, HttpResponseMessage?, string?) public BaseResponse(ClientOptions clientOptions, HttpResponseMessage? responseMessage, string? content) Parameters clientOptions ClientOptions responseMessage HttpResponseMessage content string Properties ClientOptions [JsonIgnore] public ClientOptions ClientOptions { get; set; } Property Value ClientOptions Content [JsonIgnore] public string? Content { get; set; } Property Value string ResponseMessage [JsonIgnore] public HttpResponseMessage? ResponseMessage { get; set; } Property Value HttpResponseMessage"
  },
  "api/Supabase.Postgrest.Responses.ModeledResponse-1.html": {
    "href": "api/Supabase.Postgrest.Responses.ModeledResponse-1.html",
    "title": "Class ModeledResponse<T> | supabase-csharp",
    "keywords": "Class ModeledResponse<T> Namespace Supabase.Postgrest.Responses Assembly Supabase.Postgrest.dll A representation of a successful Postgrest response that transforms the string response into a C# Modelled response. public class ModeledResponse<T> : BaseResponse where T : BaseModel, new() Type Parameters T Inheritance object BaseResponse ModeledResponse<T> Inherited Members BaseResponse.ResponseMessage BaseResponse.Content BaseResponse.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeledResponse(BaseResponse, JsonSerializerSettings, Func<Dictionary<string, string>>?, bool) public ModeledResponse(BaseResponse baseResponse, JsonSerializerSettings serializerSettings, Func<Dictionary<string, string>>? getHeaders = null, bool shouldParse = true) Parameters baseResponse BaseResponse serializerSettings JsonSerializerSettings getHeaders Func<Dictionary<string, string>> shouldParse bool Properties Model The first model in the response. public T? Model { get; } Property Value T Models A list of models in the response. public List<T> Models { get; } Property Value List<T>"
  },
  "api/Supabase.Postgrest.Responses.html": {
    "href": "api/Supabase.Postgrest.Responses.html",
    "title": "Namespace Supabase.Postgrest.Responses | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest.Responses Classes BaseResponse A wrapper class from which all Responses derive. ModeledResponse<T> A representation of a successful Postgrest response that transforms the string response into a C# Modelled response."
  },
  "api/Supabase.Postgrest.Table-1.html": {
    "href": "api/Supabase.Postgrest.Table-1.html",
    "title": "Class Table<TModel> | supabase-csharp",
    "keywords": "Class Table<TModel> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Class created from a model derived from BaseModel that can generate query requests to a Postgrest Endpoint. Representative of a USE $TABLE command. public class Table<TModel> : IPostgrestTable<TModel>, IGettableHeaders where TModel : BaseModel, new() Type Parameters TModel Model derived from BaseModel. Inheritance object Table<TModel> Implements IPostgrestTable<TModel> IGettableHeaders Derived TableWithCache<T> SupabaseTable<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table(string, JsonSerializerSettings, ClientOptions?) Typically called from the Client new Client.Table<ModelType> public Table(string baseUrl, JsonSerializerSettings serializerSettings, ClientOptions? options = null) Parameters baseUrl string Api Endpoint (ex: \"http://localhost:8000\"), no trailing slash required. serializerSettings JsonSerializerSettings options ClientOptions Optional client configuration. Properties BaseUrl API Base Url for subsequent calls. public string BaseUrl { get; } Property Value string GetHeaders An executable Func that returns a dictionary of headers to be appended onto a request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> TableName Name of the Table parsed by the Model. public string TableName { get; } Property Value string Methods And(List<IPostgrestQueryFilter>) Adds an AND Filter to the current query args. public IPostgrestTable<TModel> And(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Clear() Clears currently defined query values. public void Clear() Columns(Expression<Func<TModel, object[]>>) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns public IPostgrestTable<TModel> Columns(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Returns IPostgrestTable<TModel> Columns(string[]) By using the columns query parameter it’s possible to specify the payload keys that will be inserted and ignore the rest of the payload. The rest of the JSON keys will be ignored. Using this also has the side-effect of being more efficient for Bulk Insert since PostgREST will not process the JSON and it’ll send it directly to PostgreSQL. See: https://postgrest.org/en/stable/api.html#specifying-columns public IPostgrestTable<TModel> Columns(string[] columns) Parameters columns string[] Returns IPostgrestTable<TModel> Count(CountType, CancellationToken) Returns ONLY a count from the specified query. See: https://postgrest.org/en/v7.0.0/api.html?highlight=count public Task<int> Count(Constants.CountType type, CancellationToken cancellationToken = default) Parameters type Constants.CountType The kind of count. cancellationToken CancellationToken Returns Task<int> Delete(QueryOptions?, CancellationToken) Executes a delete request using the defined query params on the current instance. public Task Delete(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task Delete(TModel, QueryOptions?, CancellationToken) Executes a delete request using the model's primary key as the filter for the request. public Task<ModeledResponse<TModel>> Delete(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Filter<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Add a filter to a query request using a predicate to select column. public IPostgrestTable<TModel> Filter<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a columns from the Model to be returned op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion Exceptions ArgumentException Filter<TCriterion>(string, Operator, TCriterion?) Add a Filter to a query request public IPostgrestTable<TModel> Filter<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string Column Name in Table. op Constants.Operator Operation to perform. criterion TCriterion Value to filter with, must be a string, List<object>, Dictionary<string, object>, FullTextSearchConfig, or Range Returns IPostgrestTable<TModel> Type Parameters TCriterion GenerateUrl() Generates the encoded URL with defined query parameters that will be sent to the Postgrest API. public string GenerateUrl() Returns string Get(CancellationToken) Executes the query using the defined filters on the current instance. public Task<ModeledResponse<TModel>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Insert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes a BULK INSERT query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Insert(ICollection<TModel> models, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters models ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Insert(TModel, QueryOptions?, CancellationToken) Executes an INSERT query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Insert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed model response from the database. Limit(int, string?) Sets a limit with an optional foreign table reference. public IPostgrestTable<TModel> Limit(int limit, string? foreignTableName = null) Parameters limit int foreignTableName string Returns IPostgrestTable<TModel> Match(Dictionary<string, string>) Finds all rows whose columns match the specified query object. public IPostgrestTable<TModel> Match(Dictionary<string, string> query) Parameters query Dictionary<string, string> The object to filter with, with column names as keys mapped to their filter values. Returns IPostgrestTable<TModel> Match(TModel) Fills in query parameters based on a given model's primary key(s). public IPostgrestTable<TModel> Match(TModel model) Parameters model TModel A model with a primary key column Returns IPostgrestTable<TModel> Not(IPostgrestQueryFilter) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(IPostgrestQueryFilter filter) Parameters filter IPostgrestQueryFilter Returns IPostgrestTable<TModel> Not(Expression<Func<TModel, object>>, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(Expression<Func<TModel, object>> predicate, Constants.Operator op, Dictionary<string, object> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not(string, Operator, Dictionary<string, object>) Adds a NOT filter to the current query args. public IPostgrestTable<TModel> Not(string columnName, Constants.Operator op, Dictionary<string, object> criteria) Parameters columnName string op Constants.Operator criteria Dictionary<string, object> Returns IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>>, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); public IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, List<TCriterion> criteria) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(Expression<Func<TModel, object>>, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); public IPostgrestTable<TModel> Not<TCriterion>(Expression<Func<TModel, object>> predicate, Constants.Operator op, TCriterion? criterion) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, List<TCriterion>) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.In, new List<string> {\"AWAY\", \"OFFLINE\"}).Get(); public IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, List<TCriterion> criteria) Parameters columnName string op Constants.Operator criteria List<TCriterion> Returns IPostgrestTable<TModel> Type Parameters TCriterion Not<TCriterion>(string, Operator, TCriterion?) Adds a NOT filter to the current query args. Allows queries like: await client.Table<User>().Not(\"status\", Operators.Equal, \"OFFLINE\").Get(); public IPostgrestTable<TModel> Not<TCriterion>(string columnName, Constants.Operator op, TCriterion? criterion) Parameters columnName string op Constants.Operator criterion TCriterion Returns IPostgrestTable<TModel> Type Parameters TCriterion Offset(int, string?) Sets an offset with an optional foreign table reference. public IPostgrestTable<TModel> Offset(int offset, string? foreignTableName = null) Parameters offset int foreignTableName string Returns IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>>) Set an onConflict query parameter for UPSERTing on a column that has a UNIQUE constraint using a linq predicate. public IPostgrestTable<TModel> OnConflict(Expression<Func<TModel, object>> predicate) Parameters predicate Expression<Func<TModel, object>> Expects a column from the model to be returned. Returns IPostgrestTable<TModel> OnConflict(string) By specifying the onConflict query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. public IPostgrestTable<TModel> OnConflict(string columnName) Parameters columnName string Returns IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter>) Adds a OR Filter to the current query args. public IPostgrestTable<TModel> Or(List<IPostgrestQueryFilter> filters) Parameters filters List<IPostgrestQueryFilter> Returns IPostgrestTable<TModel> Order(Expression<Func<TModel, object>>, Ordering, NullPosition) Adds an ordering to the current query args using a predicate function. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(Expression<Func<TModel, object>> predicate, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters predicate Expression<Func<TModel, object>> ordering Constants.Ordering Expects a columns from the Model to be returned nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters column string Column Name ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Order(string, string, Ordering, NullPosition) Adds an ordering to the current query args. NOTE: If multiple orderings are required, chain this function with another call to Order(Expression{Func{T,object}},Ordering,NullPosition) . public IPostgrestTable<TModel> Order(string foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = NullPosition.First) Parameters foreignTable string column string ordering Constants.Ordering nullPosition Constants.NullPosition Returns IPostgrestTable<TModel> Range(int) Sets a FROM range, similar to a StartAt query. public IPostgrestTable<TModel> Range(int from) Parameters from int Returns IPostgrestTable<TModel> Range(int, int) Sets a bounded range to the current query. public IPostgrestTable<TModel> Range(int from, int to) Parameters from int to int Returns IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>>) Select columns using a predicate function. For example: Table<Movie>().Select(x => new[] { x.Id, x.Name, x.CreatedAt }).Get(); public IPostgrestTable<TModel> Select(Expression<Func<TModel, object[]>> predicate) Parameters predicate Expression<Func<TModel, object[]>> Expects an array of columns from the Model to be returned. Returns IPostgrestTable<TModel> Select(string) Select columns for query. public IPostgrestTable<TModel> Select(string columnQuery) Parameters columnQuery string Returns IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>>) Specifies a KeyValuePair to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. public IPostgrestTable<TModel> Set(Expression<Func<TModel, KeyValuePair<object, object?>>> keyValuePairExpression) Parameters keyValuePairExpression Expression<Func<TModel, KeyValuePair<object, object>>> Returns IPostgrestTable<TModel> Exceptions ArgumentException Set(Expression<Func<TModel, object>>, object?) Specifies a key and value to be updated. Should be combined with filters/where clauses. Can be called multiple times to set multiple values. public IPostgrestTable<TModel> Set(Expression<Func<TModel, object>> keySelector, object? value) Parameters keySelector Expression<Func<TModel, object>> value object Returns IPostgrestTable<TModel> Single(CancellationToken) Executes a query that expects to have a single object returned, rather than returning list of models it will return a single model. public Task<TModel?> Single(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<TModel> Update(QueryOptions?, CancellationToken) Calls an Update function after Set has been called. public Task<ModeledResponse<TModel>> Update(QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Exceptions ArgumentException Update(TModel, QueryOptions?, CancellationToken) Executes an UPDATE query using the defined query params on the current instance. public Task<ModeledResponse<TModel>> Update(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> A typed response from the database. Upsert(ICollection<TModel>, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. public Task<ModeledResponse<TModel>> Upsert(ICollection<TModel> model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model ICollection<TModel> options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Upsert(TModel, QueryOptions?, CancellationToken) Executes an UPSERT query using the defined query params on the current instance. By default the new record is returned. Set QueryOptions.ReturnType to Minimal if you don't need this value. By specifying the QueryOptions.OnConflict parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint. QueryOptions.DuplicateResolution.IgnoreDuplicates Specifies if duplicate rows should be ignored and not inserted. public Task<ModeledResponse<TModel>> Upsert(TModel model, QueryOptions? options = null, CancellationToken cancellationToken = default) Parameters model TModel options QueryOptions cancellationToken CancellationToken Returns Task<ModeledResponse<TModel>> Where(Expression<Func<TModel, bool>>) Filter a query based on a predicate function. Note: Chaining multiple Where(Expression<Func<TModel, bool>>) calls will be parsed as an \"AND\" query. Examples: Table<Movie>().Where(x => x.Name == \"Top Gun\").Get(); Table<Movie>().Where(x => x.Name == \"Top Gun\" || x.Name == \"Mad Max\").Get(); Table<Movie>().Where(x => x.Name.Contains(\"Gun\")).Get(); Table<Movie>().Where(x => x.CreatedAt <= new DateTime(2022, 08, 21)).Get(); Table<Movie>().Where(x => x.Id > 5 && x.Name.Contains(\"Max\")).Get(); public IPostgrestTable<TModel> Where(Expression<Func<TModel, bool>> predicate) Parameters predicate Expression<Func<TModel, bool>> Returns IPostgrestTable<TModel>"
  },
  "api/Supabase.Postgrest.TableWithCache-1.html": {
    "href": "api/Supabase.Postgrest.TableWithCache-1.html",
    "title": "Class TableWithCache<T> | supabase-csharp",
    "keywords": "Class TableWithCache<T> Namespace Supabase.Postgrest Assembly Supabase.Postgrest.dll Represents a table constructed with a IPostgrestCacheProvider public class TableWithCache<T> : Table<T>, IPostgrestTableWithCache<T>, IPostgrestTable<T>, IGettableHeaders where T : BaseModel, new() Type Parameters T Inheritance object Table<T> TableWithCache<T> Implements IPostgrestTableWithCache<T> IPostgrestTable<T> IGettableHeaders Inherited Members Table<T>.BaseUrl Table<T>.TableName Table<T>.GetHeaders Table<T>.Filter<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) Table<T>.Filter<TCriterion>(string, Constants.Operator, TCriterion) Table<T>.Not(IPostgrestQueryFilter) Table<T>.Not<TCriterion>(string, Constants.Operator, TCriterion) Table<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, TCriterion) Table<T>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) Table<T>.Not<TCriterion>(Expression<Func<T, object>>, Constants.Operator, List<TCriterion>) Table<T>.Not(string, Constants.Operator, Dictionary<string, object>) Table<T>.Not(Expression<Func<T, object>>, Constants.Operator, Dictionary<string, object>) Table<T>.And(List<IPostgrestQueryFilter>) Table<T>.Or(List<IPostgrestQueryFilter>) Table<T>.Match(T) Table<T>.Match(Dictionary<string, string>) Table<T>.Order(Expression<Func<T, object>>, Constants.Ordering, Constants.NullPosition) Table<T>.Order(string, Constants.Ordering, Constants.NullPosition) Table<T>.Order(string, string, Constants.Ordering, Constants.NullPosition) Table<T>.Range(int) Table<T>.Range(int, int) Table<T>.Select(string) Table<T>.Select(Expression<Func<T, object[]>>) Table<T>.Where(Expression<Func<T, bool>>) Table<T>.Limit(int, string) Table<T>.OnConflict(string) Table<T>.OnConflict(Expression<Func<T, object>>) Table<T>.Columns(string[]) Table<T>.Columns(Expression<Func<T, object[]>>) Table<T>.Offset(int, string) Table<T>.Insert(T, QueryOptions, CancellationToken) Table<T>.Insert(ICollection<T>, QueryOptions, CancellationToken) Table<T>.Upsert(T, QueryOptions, CancellationToken) Table<T>.Upsert(ICollection<T>, QueryOptions, CancellationToken) Table<T>.Set(Expression<Func<T, object>>, object) Table<T>.Set(Expression<Func<T, KeyValuePair<object, object>>>) Table<T>.Update(QueryOptions, CancellationToken) Table<T>.Update(T, QueryOptions, CancellationToken) Table<T>.Delete(QueryOptions, CancellationToken) Table<T>.Delete(T, QueryOptions, CancellationToken) Table<T>.Count(Constants.CountType, CancellationToken) Table<T>.Single(CancellationToken) Table<T>.GenerateUrl() Table<T>.Clear() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TableWithCache(string, IPostgrestCacheProvider, JsonSerializerSettings, ClientOptions?) public TableWithCache(string baseUrl, IPostgrestCacheProvider cacheProvider, JsonSerializerSettings serializerSettings, ClientOptions? options = null) Parameters baseUrl string cacheProvider IPostgrestCacheProvider serializerSettings JsonSerializerSettings options ClientOptions Properties CacheProvider Represents a caching provider to be used with Get Requests. protected IPostgrestCacheProvider CacheProvider { get; } Property Value IPostgrestCacheProvider Methods Get(CancellationToken) public Task<CacheBackedRequest<T>> Get(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<CacheBackedRequest<T>>"
  },
  "api/Supabase.Postgrest.html": {
    "href": "api/Supabase.Postgrest.html",
    "title": "Namespace Supabase.Postgrest | supabase-csharp",
    "keywords": "Namespace Supabase.Postgrest Classes Client ClientOptions Options that can be passed to the Client configuration Constants FullTextSearchConfig Configuration Object for Full Text Search. API Reference: http://postgrest.org/en/v7.0.0/api.html?highlight=full%20text%20search#full-text-search Index Represent a type can be used to index a collection either from the start or the end. IntRange Represent a range has start and end indexes. PostgrestContractResolver A custom resolver that handles mapping column names and property names as well as handling the conversion of Postgrest Ranges to a C# Range. QueryFilter QueryFilter<TModel, TCriterion> Allow for the expression of a query filter with linq expressions. QueryOptions QueryOrderer TableWithCache<T> Represents a table constructed with a IPostgrestCacheProvider Table<TModel> Class created from a model derived from BaseModel that can generate query requests to a Postgrest Endpoint. Representative of a USE $TABLE command. Enums Constants.CountType See: https://postgrest.org/en/v7.0.0/api.html?highlight=count#estimated-count Constants.NullPosition See: https://postgrest.org/en/v7.0.0/api.html?highlight=nulls%20first#ordering Constants.Operator See: https://postgrest.org/en/v7.0.0/api.html?highlight=operators#operators Constants.Ordering QueryOptions.CountType QueryOptions.DuplicateResolutionType QueryOptions.ReturnType Delegates OnRequestPreparedEventHandler Delegate representing the request to be sent to the remote server."
  },
  "api/Supabase.Realtime.Broadcast.BroadcastOptions.html": {
    "href": "api/Supabase.Realtime.Broadcast.BroadcastOptions.html",
    "title": "Class BroadcastOptions | supabase-csharp",
    "keywords": "Class BroadcastOptions Namespace Supabase.Realtime.Broadcast Assembly Supabase.Realtime.dll Options public class BroadcastOptions Inheritance object BroadcastOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcastOptions(bool, bool) Initializes broadcast options public BroadcastOptions(bool broadcastSelf = false, bool broadcastAck = false) Parameters broadcastSelf bool broadcastAck bool Properties BroadcastAck ack option instructs server to acknowledge that broadcast message was received [JsonProperty(\"ack\")] public bool BroadcastAck { get; set; } Property Value bool BroadcastSelf self option enables client to receive message it broadcast [JsonProperty(\"self\")] public bool BroadcastSelf { get; set; } Property Value bool"
  },
  "api/Supabase.Realtime.Broadcast.html": {
    "href": "api/Supabase.Realtime.Broadcast.html",
    "title": "Namespace Supabase.Realtime.Broadcast | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Broadcast Classes BroadcastOptions Options"
  },
  "api/Supabase.Realtime.Channel.ChannelOptions.html": {
    "href": "api/Supabase.Realtime.Channel.ChannelOptions.html",
    "title": "Class ChannelOptions | supabase-csharp",
    "keywords": "Class ChannelOptions Namespace Supabase.Realtime.Channel Assembly Supabase.Realtime.dll Channel Options public class ChannelOptions Inheritance object ChannelOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChannelOptions(ClientOptions, Func<string?>, JsonSerializerSettings) The Channel Options (typically only called from within the Client) public ChannelOptions(ClientOptions clientOptions, Func<string?> retrieveAccessToken, JsonSerializerSettings serializerSettings) Parameters clientOptions ClientOptions retrieveAccessToken Func<string> serializerSettings JsonSerializerSettings Properties ClientOptions The Client Options public ClientOptions ClientOptions { get; } Property Value ClientOptions Parameters Parameters that are sent to the channel when opened (JSON Serializable) public Dictionary<string, string>? Parameters { get; set; } Property Value Dictionary<string, string> RetrieveAccessToken A function that returns the current access token. public Func<string?> RetrieveAccessToken { get; } Property Value Func<string> SerializerSettings The Serializer Settings public JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Channel.Push.html": {
    "href": "api/Supabase.Realtime.Channel.Push.html",
    "title": "Class Push | supabase-csharp",
    "keywords": "Class Push Namespace Supabase.Realtime.Channel Assembly Supabase.Realtime.dll Class representation of a single request sent to the Socket server. Push also adds additional functionality for retrying, timeouts, and listeners for its associated response from the server. public class Push : IRealtimePush<RealtimeChannel, SocketResponse> Inheritance object Push Implements IRealtimePush<RealtimeChannel, SocketResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Push(IRealtimeSocket, RealtimeChannel, string, string?, object?, int) Initializes a single request that will be Pushed to the Socket server. public Push(IRealtimeSocket socket, RealtimeChannel channel, string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters socket IRealtimeSocket channel RealtimeChannel eventName string type string payload object timeoutMs int Properties Channel The associated channel. public RealtimeChannel Channel { get; } Property Value RealtimeChannel EventName The event requested. public string EventName { get; } Property Value string IsSent Flag representing the sent state of a request. public bool IsSent { get; } Property Value bool Message Represents the Pushed (sent) Message public SocketRequest? Message { get; } Property Value SocketRequest Payload Payload of data to be sent. public object? Payload { get; } Property Value object Ref Ref Of this Message public string? Ref { get; } Property Value string Response Accessor for the returned Socket Response public IRealtimeSocketResponse? Response { get; } Property Value IRealtimeSocketResponse Methods AddMessageReceivedHandler(MessageEventHandler) Adds a listener to be notified when a message is received. public void AddMessageReceivedHandler(IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler ClearMessageReceivedHandler() Clears all of the listeners from receiving event state changes. public void ClearMessageReceivedHandler() RemoveMessageReceivedHandler(MessageEventHandler) Removes a specified listener from messages received. public void RemoveMessageReceivedHandler(IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler Resend(int) Resends a Push request. public void Resend(int timeoutMs = 10000) Parameters timeoutMs int Send() Sends a Push request and initializes the Timeout. public void Send() Events OnTimeout Invoked when this Push has not been responded to within the timeout interval. public event EventHandler? OnTimeout Event Type EventHandler"
  },
  "api/Supabase.Realtime.Channel.html": {
    "href": "api/Supabase.Realtime.Channel.html",
    "title": "Namespace Supabase.Realtime.Channel | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Channel Classes ChannelOptions Channel Options Push Class representation of a single request sent to the Socket server. Push also adds additional functionality for retrying, timeouts, and listeners for its associated response from the server."
  },
  "api/Supabase.Realtime.Client.html": {
    "href": "api/Supabase.Realtime.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Singleton that represents a Client connection to a Realtime Server. It maintains a singular Websocket with asynchronous listeners (RealtimeChannels). public class Client : IRealtimeClient<RealtimeSocket, RealtimeChannel> Inheritance object Client Implements IRealtimeClient<RealtimeSocket, RealtimeChannel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples client = Client.Instance Constructors Client(string, ClientOptions?) Initializes a Client instance, this method should be called prior to any other method. public Client(string realtimeUrl, ClientOptions? options = null) Parameters realtimeUrl string The connection url (ex: \"ws://localhost:4000/socket\" - no trailing slash required) options ClientOptions Properties Options Client Options - most of which are regarding Socket connection Options public ClientOptions Options { get; } Property Value ClientOptions SerializerSettings Custom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses. By default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial configuration handles that. public JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings Socket The backing Socket class. Most methods of the Client act as proxies to the Socket class. public IRealtimeSocket? Socket { get; } Property Value IRealtimeSocket Subscriptions Exposes all Realtime RealtimeChannel Subscriptions for R/O public consumption public ReadOnlyDictionary<string, RealtimeChannel> Subscriptions { get; } Property Value ReadOnlyDictionary<string, RealtimeChannel> Methods AddDebugHandler(DebugEventHandler) Adds a debug handler, likely used within a logging solution of some kind. public void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler AddStateChangedHandler(SocketStateEventHandler) Adds a listener to be notified when the socket state changes. public void AddStateChangedHandler(IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler Channel(string) Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned. public RealtimeChannel Channel(string channelName) Parameters channelName string The name of the Channel to join (totally arbitrary) Returns RealtimeChannel Exceptions Exception Channel(string, string, string, string?, string?, Dictionary<string, string>?) Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned. public RealtimeChannel Channel(string database = \"realtime\", string schema = \"public\", string table = \"*\", string? column = null, string? value = null, Dictionary<string, string>? parameters = null) Parameters database string Database to connect to, with Supabase this will likely be realtime. schema string Postgres schema, usually public table string Postgres table name column string Postgres column name value string Value the specified column should have parameters Dictionary<string, string> Returns RealtimeChannel ClearDebugHandlers() Clears debug handlers; public void ClearDebugHandlers() ClearStateChangedHandlers() Clears all of the listeners from receiving socket state changes. public void ClearStateChangedHandlers() Connect(Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException?>?) Attempts to connect to the socket. Provides a callback for Task driven returns. [Obsolete(\"Please use ConnectAsync() instead.\")] public IRealtimeClient<RealtimeSocket, RealtimeChannel> Connect(Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException?>? callback = null) Parameters callback Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException> Returns IRealtimeClient<RealtimeSocket, RealtimeChannel> ConnectAsync() Attempts to connect to the Socket. Returns when socket has successfully connected. public Task<IRealtimeClient<RealtimeSocket, RealtimeChannel>> ConnectAsync() Returns Task<IRealtimeClient<RealtimeSocket, RealtimeChannel>> Disconnect(WebSocketCloseStatus, string) Disconnects from the socket server (if connected). public IRealtimeClient<RealtimeSocket, RealtimeChannel> Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"Programmatic Disconnect\") Parameters code WebSocketCloseStatus Status Code reason string Reason for disconnect Returns IRealtimeClient<RealtimeSocket, RealtimeChannel> Remove(RealtimeChannel) Removes a channel subscription. public void Remove(RealtimeChannel channel) Parameters channel RealtimeChannel RemoveDebugHandler(DebugEventHandler) Removes a debug handler public void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler RemoveStateChangedHandler(SocketStateEventHandler) Removes a specified listener from socket state changes. public void RemoveStateChangedHandler(IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler SetAuth(string) Sets the JWT access token used for channel subscription authorization and Realtime RLS. Ref: https://github.com/supabase/realtime-js/pull/117 | https://github.com/supabase/realtime-js/pull/117 public void SetAuth(string jwt) Parameters jwt string"
  },
  "api/Supabase.Realtime.ClientOptions.html": {
    "href": "api/Supabase.Realtime.ClientOptions.html",
    "title": "Class ClientOptions | supabase-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Options used when initializing a Client public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields DateTimeStyles Datetime Style for JSON Deserialization of Models public readonly DateTimeStyles DateTimeStyles Field Value DateTimeStyles Headers Request headers to be appended to the connection string. public readonly Dictionary<string, object> Headers Field Value Dictionary<string, object> Parameters The optional params to pass when connecting public SocketOptionsParameters Parameters Field Value SocketOptionsParameters Properties DateTimeFormat Datetime format for JSON Deserialization of Models (Postgrest style) public string DateTimeFormat { get; set; } Property Value string Decode The function to decode incoming messages. public Action<string, Action<SocketResponse?>>? Decode { get; set; } Property Value Action<string, Action<SocketResponse>> Encode The function to encode outgoing messages. Defaults to JSON public Action<object, Action<string>>? Encode { get; set; } Property Value Action<object, Action<string>> EventsPerSecond @todo Presently unused: Limit the number of events that can be sent per second. public int EventsPerSecond { get; set; } Property Value int HeartbeatInterval The interval to send a heartbeat message public TimeSpan HeartbeatInterval { get; set; } Property Value TimeSpan ReconnectAfterInterval The interval to reconnect public Func<int, TimeSpan> ReconnectAfterInterval { get; set; } Property Value Func<int, TimeSpan> Timeout The default timeout in milliseconds to trigger push timeouts. public TimeSpan Timeout { get; set; } Property Value TimeSpan Transport The Websocket Transport, for example WebSocket. public string Transport { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Constants.ChannelEventName.html": {
    "href": "api/Supabase.Realtime.Constants.ChannelEventName.html",
    "title": "Enum Constants.ChannelEventName | supabase-csharp",
    "keywords": "Enum Constants.ChannelEventName Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Mapping for event names that can be used with Push(string, string?, object?, int) to send arbitrary data. This is unlikely to be used by the developer. public enum Constants.ChannelEventName Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"broadcast\", null)] Broadcast = 0 The broadcast event [MapTo(\"postgres_changes\", null)] PostgresChanges = 2 A postgres_changes event [MapTo(\"presence\", null)] Presence = 1 The Presence event"
  },
  "api/Supabase.Realtime.Constants.ChannelState.html": {
    "href": "api/Supabase.Realtime.Constants.ChannelState.html",
    "title": "Enum Constants.ChannelState | supabase-csharp",
    "keywords": "Enum Constants.ChannelState Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Mapping of channel states, used with RealtimeChannel public enum Constants.ChannelState Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"closed\", null)] Closed = 0 Channel is closed [MapTo(\"errored\", null)] Errored = 1 Channel has errored [MapTo(\"joined\", null)] Joined = 2 Channel is joined [MapTo(\"joining\", null)] Joining = 3 Channel is joining [MapTo(\"leaving\", null)] Leaving = 4 Channel is leaving"
  },
  "api/Supabase.Realtime.Constants.EventType.html": {
    "href": "api/Supabase.Realtime.Constants.EventType.html",
    "title": "Enum Constants.EventType | supabase-csharp",
    "keywords": "Enum Constants.EventType Namespace Supabase.Realtime Assembly Supabase.Realtime.dll A channel event type used and parsed in a SocketResponse public enum Constants.EventType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Broadcast = 3 A broadcast event Delete = 2 postgres_changes Delete event Insert = 0 postgres_changes Insert event Internal = 8 An internal event (likely unused by the developer) PostgresChanges = 6 The catchall event for postgres_changes, parsed into a more specific Insert, Update or Delete PresenceDiff = 5 A presence leave or join event PresenceState = 4 A presence state or sync event System = 7 A system event (likely unused by the developer) Unknown = 9 A presently unknown event, if this is seen, please open an issue at https://github.com/supabase-community/realtime-csharp Update = 1 postgres_changes Update event"
  },
  "api/Supabase.Realtime.Constants.PresenceListenEventTypes.html": {
    "href": "api/Supabase.Realtime.Constants.PresenceListenEventTypes.html",
    "title": "Enum Constants.PresenceListenEventTypes | supabase-csharp",
    "keywords": "Enum Constants.PresenceListenEventTypes Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Map of Presence listener types, used with: RealtimePresence<TPresenceModel> public enum Constants.PresenceListenEventTypes Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"join\", null)] Join = 1 A join event [MapTo(\"leave\", null)] Leave = 2 A leave event [MapTo(\"sync\", null)] Sync = 0 A sync event (either join or leave)"
  },
  "api/Supabase.Realtime.Constants.SocketState.html": {
    "href": "api/Supabase.Realtime.Constants.SocketState.html",
    "title": "Enum Constants.SocketState | supabase-csharp",
    "keywords": "Enum Constants.SocketState Namespace Supabase.Realtime Assembly Supabase.Realtime.dll The Current Socket state, used in RealtimeSocket public enum Constants.SocketState Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Close = 1 Socket Closed Error = 3 Socket has errored Open = 0 Socket Open Reconnect = 2 Socket is Reconnecting"
  },
  "api/Supabase.Realtime.Constants.html": {
    "href": "api/Supabase.Realtime.Constants.html",
    "title": "Class Constants | supabase-csharp",
    "keywords": "Class Constants Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Shared constants for Realtime public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ChannelAccessToken The event name used to send an access_token to the Phoenix server public const string ChannelAccessToken = \"access_token\" Field Value string ChannelEventBroadcast Phoenix Server Event: BROADCAST public const string ChannelEventBroadcast = \"broadcast\" Field Value string ChannelEventClose Phoenix Socket Server Event: CLOSE public static string ChannelEventClose Field Value string ChannelEventError Phoenix Socket Server Event: ERROR public static string ChannelEventError Field Value string ChannelEventJoin Phoenix Socket Server Event: JOIN public const string ChannelEventJoin = \"phx_join\" Field Value string ChannelEventLeave Phoenix Socket Server Event: LEAVE public const string ChannelEventLeave = \"phx_leave\" Field Value string ChannelEventPostgresChanges Phoenix Server Event: POSTGRES_CHANGES public const string ChannelEventPostgresChanges = \"postgres_changes\" Field Value string ChannelEventPresenceDiff Phoenix Server Event: PRESENCE_DIFF public const string ChannelEventPresenceDiff = \"presence_diff\" Field Value string ChannelEventPresenceState Phoenix Server Event: PRESENCE_STATE public const string ChannelEventPresenceState = \"presence_state\" Field Value string ChannelEventReply Phoenix Socket Server Event: REPLY public const string ChannelEventReply = \"phx_reply\" Field Value string ChannelEventSystem Phoenix Socket Server Event: SYSTEM public const string ChannelEventSystem = \"system\" Field Value string DefaultTimeout Timeout interval for requests (used in Socket and Push) public const int DefaultTimeout = 10000 Field Value int PhoenixStatusError Phoenix Server Event: ERROR public const string PhoenixStatusError = \"error\" Field Value string PhoenixStatusOk Phoenix Server Event: OK public const string PhoenixStatusOk = \"ok\" Field Value string TransportWebsocket The transport type, used with Phoenix server implementations and appended on the EndpointUrl public const string TransportWebsocket = \"websocket\" Field Value string"
  },
  "api/Supabase.Realtime.Converters.IntArrayConverter.html": {
    "href": "api/Supabase.Realtime.Converters.IntArrayConverter.html",
    "title": "Class IntArrayConverter | supabase-csharp",
    "keywords": "Class IntArrayConverter Namespace Supabase.Realtime.Converters Assembly Supabase.Realtime.dll An int array converter that specifically parses Postgrest styled arrays {1,2,3} and [1,2,3] from strings into a List<T>. public class IntArrayConverter : JsonConverter Inheritance object JsonConverter IntArrayConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Realtime.Converters.StringArrayConverter.html": {
    "href": "api/Supabase.Realtime.Converters.StringArrayConverter.html",
    "title": "Class StringArrayConverter | supabase-csharp",
    "keywords": "Class StringArrayConverter Namespace Supabase.Realtime.Converters Assembly Supabase.Realtime.dll An string array converter that specifically parses Postgrest styled arrays {big,string,array} and [1,2,3] from strings into a List<T>. public class StringArrayConverter : JsonConverter Inheritance object JsonConverter StringArrayConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Realtime.Converters.html": {
    "href": "api/Supabase.Realtime.Converters.html",
    "title": "Namespace Supabase.Realtime.Converters | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Converters Classes IntArrayConverter An int array converter that specifically parses Postgrest styled arrays {1,2,3} and [1,2,3] from strings into a List<T>. StringArrayConverter An string array converter that specifically parses Postgrest styled arrays {big,string,array} and [1,2,3] from strings into a List<T>."
  },
  "api/Supabase.Realtime.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Realtime.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | supabase-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll Reasons for a failure public enum FailureHint.Reason Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields ChannelJoinFailure = 3 Channel cannot be joined ChannelNotOpen = 2 Channel is not open ConnectionLost = 5 Connection has been lost ConnectionStale = 6 No message has been received, usually given by server. If seen, please open an issue. PushTimeout = 1 A push timeout SocketError = 4 Socket has errored, either in connection or reconnection. Unknown = 0 Catchall for any kind of failure that is presently untyped."
  },
  "api/Supabase.Realtime.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Realtime.Exceptions.FailureHint.html",
    "title": "Class FailureHint | supabase-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll A failure hint public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Parse(DisconnectionInfo) Parses a Failure reason from a Websocket.Client.DisconnectionInfo public static FailureHint.Reason Parse(DisconnectionInfo info) Parameters info DisconnectionInfo Returns FailureHint.Reason"
  },
  "api/Supabase.Realtime.Exceptions.RealtimeException.html": {
    "href": "api/Supabase.Realtime.Exceptions.RealtimeException.html",
    "title": "Class RealtimeException | supabase-csharp",
    "keywords": "Class RealtimeException Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll An Exception thrown within Supabase.Realtime public class RealtimeException : Exception, ISerializable Inheritance object Exception RealtimeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RealtimeException(string?) public RealtimeException(string? message) Parameters message string RealtimeException(string?, Exception?) public RealtimeException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Reason A specific reason for this exception, as provided by this library. public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Methods FromDisconnectionInfo(DisconnectionInfo) Creates exception from a Websocket.Client.DisconnectionInfo instance. public static RealtimeException FromDisconnectionInfo(DisconnectionInfo info) Parameters info DisconnectionInfo Returns RealtimeException"
  },
  "api/Supabase.Realtime.Exceptions.html": {
    "href": "api/Supabase.Realtime.Exceptions.html",
    "title": "Namespace Supabase.Realtime.Exceptions | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Exceptions Classes FailureHint A failure hint RealtimeException An Exception thrown within Supabase.Realtime Enums FailureHint.Reason Reasons for a failure"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler.html",
    "title": "Delegate IRealtimeBroadcast.BroadcastEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeBroadcast.BroadcastEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A delegate for broadcast events public delegate void IRealtimeBroadcast.BroadcastEventHandler(IRealtimeBroadcast sender, BaseBroadcast? broadcast) Parameters sender IRealtimeBroadcast A delegate for broadcast events broadcast BaseBroadcast A delegate for broadcast events"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.html",
    "title": "Interface IRealtimeBroadcast | supabase-csharp",
    "keywords": "Interface IRealtimeBroadcast Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A contract representing a realtime broadcast public interface IRealtimeBroadcast Methods AddBroadcastEventHandler(BroadcastEventHandler) Adds a broadcast event handler void AddBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler ClearBroadcastEventHandlers() Clears all broadcast event handlers void ClearBroadcastEventHandlers() RemoveBroadcastEventHandler(BroadcastEventHandler) Removes a broadcast event handler void RemoveBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler Send(string?, object, int) Sends a broadcast to a given event name with an arbitrary, serializable payload. Task<bool> Send(string? broadcastEventName, object payload, int timeoutMs = 10000) Parameters broadcastEventName string payload object timeoutMs int Returns Task<bool>"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler.html",
    "title": "Delegate IRealtimeChannel.ErrorEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeChannel.ErrorEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for errors on this channel public delegate void IRealtimeChannel.ErrorEventHandler(IRealtimeChannel sender, RealtimeException exception) Parameters sender IRealtimeChannel Delegate for errors on this channel exception RealtimeException Delegate for errors on this channel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler.html",
    "title": "Delegate IRealtimeChannel.MessageReceivedHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeChannel.MessageReceivedHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for messages received on this channel public delegate void IRealtimeChannel.MessageReceivedHandler(IRealtimeChannel sender, SocketResponse message) Parameters sender IRealtimeChannel Delegate for messages received on this channel message SocketResponse Delegate for messages received on this channel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler.html",
    "title": "Delegate IRealtimeChannel.PostgresChangesHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeChannel.PostgresChangesHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for postgres changes public delegate void IRealtimeChannel.PostgresChangesHandler(IRealtimeChannel sender, PostgresChangesResponse change) Parameters sender IRealtimeChannel Delegate for postgres changes change PostgresChangesResponse Delegate for postgres changes"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler.html",
    "title": "Delegate IRealtimeChannel.StateChangedHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeChannel.StateChangedHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for channel state changes public delegate void IRealtimeChannel.StateChangedHandler(IRealtimeChannel sender, Constants.ChannelState state) Parameters sender IRealtimeChannel Delegate for channel state changes state Constants.ChannelState Delegate for channel state changes"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.html",
    "title": "Interface IRealtimeChannel | supabase-csharp",
    "keywords": "Interface IRealtimeChannel Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A contract representing a realtime channel public interface IRealtimeChannel Properties BroadcastOptions The Channel's broadcast options (used prior to Subscribe(int)) BroadcastOptions? BroadcastOptions { get; } Property Value BroadcastOptions HasJoinedOnce If this channel has been successfully joined (and thus, should be rejoined on a failure) bool HasJoinedOnce { get; } Property Value bool IsClosed Is channel closed? bool IsClosed { get; } Property Value bool IsErrored Is channel erroring? bool IsErrored { get; } Property Value bool IsJoined Is channel joined? bool IsJoined { get; } Property Value bool IsJoining Is channel being joined? bool IsJoining { get; } Property Value bool IsLeaving Is channel leaving? bool IsLeaving { get; } Property Value bool Options The Channel's initialization options ChannelOptions Options { get; } Property Value ChannelOptions PostgresChangesOptions The Channel's postgres_changes options (used prior to Subscribe(int)) List<PostgresChangesOptions> PostgresChangesOptions { get; } Property Value List<PostgresChangesOptions> PresenceOptions The Channel's presence options (used prior to Subscribe(int)) PresenceOptions? PresenceOptions { get; } Property Value PresenceOptions State The Channel's current state Constants.ChannelState State { get; } Property Value Constants.ChannelState Topic A string representing this channel's topic, used for identifying/repeat access to this channel. string Topic { get; } Property Value string Methods AddErrorHandler(ErrorEventHandler) Add an error handler void AddErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler AddMessageReceivedHandler(MessageReceivedHandler) Add a message received handler void AddMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler AddPostgresChangeHandler(ListenType, PostgresChangesHandler) Add a postgres_changes handler void AddPostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType postgresChangeHandler IRealtimeChannel.PostgresChangesHandler AddStateChangedHandler(StateChangedHandler) Add a state changed listener void AddStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Broadcast() Get the IRealtimeBroadcast helper IRealtimeBroadcast? Broadcast() Returns IRealtimeBroadcast ClearErrorHandlers() Clear error handlers. void ClearErrorHandlers() ClearMessageReceivedHandlers() Clear message received handlers. void ClearMessageReceivedHandlers() ClearPostgresChangeHandlers() Clear postgres_changes handlers void ClearPostgresChangeHandlers() ClearStateChangedHandlers() Clear state changed handlers void ClearStateChangedHandlers() Presence() Get the IRealtimePresence helper. IRealtimePresence? Presence() Returns IRealtimePresence Push(string, string?, object?, int) Push an arbitrary event to a subscribed channel. Push Push(string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters eventName string type string payload object timeoutMs int Returns Push Register(PostgresChangesOptions) Register postgres_changes options, must be called to use IRealtimeChannel.PostgresChangesHandler, and prior to Subscribe(int) IRealtimeChannel Register(PostgresChangesOptions postgresChangesOptions) Parameters postgresChangesOptions PostgresChangesOptions Returns IRealtimeChannel Register<TBroadcastResponse>(bool, bool) Register broadcast options, must be called to use IRealtimeBroadcast, and prior to Subscribe(int) RealtimeBroadcast<TBroadcastResponse> Register<TBroadcastResponse>(bool broadcastSelf = false, bool broadcastAck = false) where TBroadcastResponse : BaseBroadcast Parameters broadcastSelf bool broadcastAck bool Returns RealtimeBroadcast<TBroadcastResponse> Type Parameters TBroadcastResponse Register<TPresenceResponse>(string) Register presence options, must be called to use IRealtimePresence, and prior to Subscribe(int) RealtimePresence<TPresenceResponse> Register<TPresenceResponse>(string presenceKey) where TPresenceResponse : BasePresence Parameters presenceKey string Returns RealtimePresence<TPresenceResponse> Type Parameters TPresenceResponse Rejoin(int) Rejoin a channel. void Rejoin(int timeoutMs = 10000) Parameters timeoutMs int RemoveErrorHandler(ErrorEventHandler) Remove an error handler void RemoveErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler RemoveMessageReceivedHandler(MessageReceivedHandler) Remove a message received handler. void RemoveMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler RemovePostgresChangeHandler(ListenType, PostgresChangesHandler) Remove a postgres_changes handler void RemovePostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType postgresChangeHandler IRealtimeChannel.PostgresChangesHandler RemoveStateChangedHandler(StateChangedHandler) Remove a state changed handler void RemoveStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Send(ChannelEventName, string?, object, int) Send an arbitrary event with an awaitable task. Task<bool> Send(Constants.ChannelEventName eventType, string? type, object payload, int timeoutMs = 10000) Parameters eventType Constants.ChannelEventName type string payload object timeoutMs int Returns Task<bool> Subscribe(int) Subscribes to a channel. Task<IRealtimeChannel> Subscribe(int timeoutMs = 10000) Parameters timeoutMs int Returns Task<IRealtimeChannel> Unsubscribe() Unsubscribes from a channel. IRealtimeChannel Unsubscribe() Returns IRealtimeChannel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.SocketStateEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.SocketStateEventHandler.html",
    "title": "Delegate IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. public delegate void IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler(IRealtimeClient<TSocket, TChannel> sender, Constants.SocketState state) Parameters sender IRealtimeClient<TSocket, TChannel> Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. state Constants.SocketState Delegate for handling a socket state event, this can be seen as synonymous with the Client's state."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.html",
    "title": "Interface IRealtimeClient<TSocket, TChannel> | supabase-csharp",
    "keywords": "Interface IRealtimeClient<TSocket, TChannel> Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a Realtime Client public interface IRealtimeClient<TSocket, TChannel> where TSocket : IRealtimeSocket where TChannel : IRealtimeChannel Type Parameters TSocket TChannel Properties Options The options initializing this client. ClientOptions Options { get; } Property Value ClientOptions SerializerSettings Json serializer settings JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings Socket The connected realtime socket IRealtimeSocket? Socket { get; } Property Value IRealtimeSocket Subscriptions A collection of channels ordered by topic name ReadOnlyDictionary<string, TChannel> Subscriptions { get; } Property Value ReadOnlyDictionary<string, TChannel> Methods AddDebugHandler(DebugEventHandler) Adds a debug handler, likely used within a logging solution of some kind. void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler AddStateChangedHandler(SocketStateEventHandler) Add a Socket State listener void AddStateChangedHandler(IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Channel(string) Initialize a new channel with an arbitrary channel name. TChannel Channel(string channelName) Parameters channelName string Returns TChannel Channel(string, string, string, string?, string?, Dictionary<string, string>?) Shorthand initialization of a channel with postgres_changes options already set. TChannel Channel(string database = \"realtime\", string schema = \"public\", string table = \"*\", string? column = null, string? value = null, Dictionary<string, string>? parameters = null) Parameters database string schema string table string column string value string parameters Dictionary<string, string> Returns TChannel ClearDebugHandlers() Clears debug handlers; void ClearDebugHandlers() ClearStateChangedHandlers() Clear socket state listeners void ClearStateChangedHandlers() Connect(Action<IRealtimeClient<TSocket, TChannel>, RealtimeException?>?) Connect to the Socket IRealtimeClient<TSocket, TChannel> Connect(Action<IRealtimeClient<TSocket, TChannel>, RealtimeException?>? callback = null) Parameters callback Action<IRealtimeClient<TSocket, TChannel>, RealtimeException> Returns IRealtimeClient<TSocket, TChannel> ConnectAsync() Connect to the Socket Task<IRealtimeClient<TSocket, TChannel>> ConnectAsync() Returns Task<IRealtimeClient<TSocket, TChannel>> Disconnect(WebSocketCloseStatus, string) Disconnect from the Socket IRealtimeClient<TSocket, TChannel> Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"Programmatic Disconnect\") Parameters code WebSocketCloseStatus reason string Returns IRealtimeClient<TSocket, TChannel> Remove(TChannel) Remove an initialized IRealtimeChannel void Remove(TChannel channel) Parameters channel TChannel RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler RemoveStateChangedHandler(SocketStateEventHandler) Remove a Socket State listener void RemoveStateChangedHandler(IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler SetAuth(string) Sets the authentication JWT to be passed into all realtime channels. Used for WALRUS permissions. void SetAuth(string jwt) Parameters jwt string"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler.html",
    "title": "Delegate IRealtimeDebugger.DebugEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeDebugger.DebugEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A debug event handler public delegate void IRealtimeDebugger.DebugEventHandler(object sender, string message, Exception? exception) Parameters sender object A debug event handler message string A debug event handler exception Exception A debug event handler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.html",
    "title": "Interface IRealtimeDebugger | supabase-csharp",
    "keywords": "Interface IRealtimeDebugger Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing an internal debugger. public interface IRealtimeDebugger Methods AddDebugHandler(DebugEventHandler) Adds a debug listener void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler ClearDebugHandlers() Clears debug handlers. void ClearDebugHandlers() Log(object, string, Exception?) Notifies debug listeners void Log(object sender, string message, Exception? exception = null) Parameters sender object message string exception Exception RemoveDebugHandler(DebugEventHandler) Removes a debug handler. void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.EventType.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.EventType.html",
    "title": "Enum IRealtimePresence.EventType | supabase-csharp",
    "keywords": "Enum IRealtimePresence.EventType Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Mapping of presence event types public enum IRealtimePresence.EventType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Join = 1 Join event Leave = 2 Leave event Sync = 0 Sync event (both join and leave)"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler.html",
    "title": "Delegate IRealtimePresence.PresenceEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimePresence.PresenceEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for a presence event. public delegate void IRealtimePresence.PresenceEventHandler(IRealtimePresence sender, IRealtimePresence.EventType eventType) Parameters sender IRealtimePresence Delegate for a presence event. eventType IRealtimePresence.EventType Delegate for a presence event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.html",
    "title": "Interface IRealtimePresence | supabase-csharp",
    "keywords": "Interface IRealtimePresence Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a Realtime Presence class public interface IRealtimePresence Methods AddPresenceEventHandler(EventType, PresenceEventHandler) Add a presence event handler void AddPresenceEventHandler(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler ClearPresenceEventHandlers(EventType?) Clear presence events. void ClearPresenceEventHandlers(IRealtimePresence.EventType? eventType = null) Parameters eventType IRealtimePresence.EventType? RemovePresenceEventHandlers(EventType, PresenceEventHandler) Remove a presence event handler void RemovePresenceEventHandlers(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler Track(object?, int) Send an arbitrary payload as a presence event, MUST be called once to register this client as an active presence. Task<Push> Track(object? payload, int timeoutMs = 10000) Parameters payload object timeoutMs int Returns Task<Push> Untrack() Untracks a client Task<Push> Untrack() Returns Task<Push>"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePush-2.MessageEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePush-2.MessageEventHandler.html",
    "title": "Delegate IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for a message event. public delegate void IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler(IRealtimePush<TChannel, TSocketResponse> sender, TSocketResponse message) Parameters sender IRealtimePush<TChannel, TSocketResponse> Delegate for a message event. message TSocketResponse Delegate for a message event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePush-2.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePush-2.html",
    "title": "Interface IRealtimePush<TChannel, TSocketResponse> | supabase-csharp",
    "keywords": "Interface IRealtimePush<TChannel, TSocketResponse> Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a \"Push\" or an outgoing message to the socket server public interface IRealtimePush<TChannel, TSocketResponse> where TChannel : IRealtimeChannel where TSocketResponse : IRealtimeSocketResponse Type Parameters TChannel TSocketResponse Properties Channel The calling or parent channel TChannel Channel { get; } Property Value TChannel EventName The event name this push is registered under. string EventName { get; } Property Value string IsSent Is push sent? bool IsSent { get; } Property Value bool Message The wrapped SocketRequest SocketRequest? Message { get; } Property Value SocketRequest Payload The payload (present in Message) object? Payload { get; } Property Value object Ref A unique ID representing this push. string? Ref { get; } Property Value string Response The server's response IRealtimeSocketResponse? Response { get; } Property Value IRealtimeSocketResponse Methods AddMessageReceivedHandler(MessageEventHandler) Add a message received handler void AddMessageReceivedHandler(IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler ClearMessageReceivedHandler() Clear Message received handlers. void ClearMessageReceivedHandler() RemoveMessageReceivedHandler(MessageEventHandler) Remove a message received handler void RemoveMessageReceivedHandler(IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Resend(int) Resend this push, only called on a failed push attempt. void Resend(int timeoutMs = 10000) Parameters timeoutMs int Send() Send this push. void Send() Events OnTimeout A timeout event handler. event EventHandler? OnTimeout Event Type EventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler.html",
    "title": "Delegate IRealtimeSocket.ErrorEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeSocket.ErrorEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for errors on this socket public delegate void IRealtimeSocket.ErrorEventHandler(IRealtimeSocket sender, RealtimeException exception) Parameters sender IRealtimeSocket Delegate for errors on this socket exception RealtimeException Delegate for errors on this socket"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler.html",
    "title": "Delegate IRealtimeSocket.HeartbeatEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeSocket.HeartbeatEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling a heartbeat event. public delegate void IRealtimeSocket.HeartbeatEventHandler(IRealtimeSocket sender, SocketResponse heartbeat) Parameters sender IRealtimeSocket Delegate for handling a heartbeat event. heartbeat SocketResponse Delegate for handling a heartbeat event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler.html",
    "title": "Delegate IRealtimeSocket.MessageEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeSocket.MessageEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling message received events. public delegate void IRealtimeSocket.MessageEventHandler(IRealtimeSocket sender, SocketResponse message) Parameters sender IRealtimeSocket Delegate for handling message received events. message SocketResponse Delegate for handling message received events."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler.html",
    "title": "Delegate IRealtimeSocket.StateEventHandler | supabase-csharp",
    "keywords": "Delegate IRealtimeSocket.StateEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling socket state changes. public delegate void IRealtimeSocket.StateEventHandler(IRealtimeSocket sender, Constants.SocketState state) Parameters sender IRealtimeSocket Delegate for handling socket state changes. state Constants.SocketState Delegate for handling socket state changes."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.html",
    "title": "Interface IRealtimeSocket | supabase-csharp",
    "keywords": "Interface IRealtimeSocket Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract for a realtime socket. public interface IRealtimeSocket Properties IsConnected Is this socket connected? bool IsConnected { get; } Property Value bool Methods AddErrorHandler(ErrorEventHandler) Add an error handler void AddErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler AddHeartbeatHandler(HeartbeatEventHandler) Add a heartbeat handler. void AddHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler AddMessageReceivedHandler(MessageEventHandler) Add a message received handler. void AddMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler AddStateChangedHandler(StateEventHandler) Add a state changed handler. void AddStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ClearErrorHandlers() Clear error handlers. void ClearErrorHandlers() ClearHeartbeatHandlers() Clear heartbeat handlers. void ClearHeartbeatHandlers() ClearMessageReceivedHandlers() Clear message received handlers. void ClearMessageReceivedHandlers() ClearStateChangedHandlers() Clear state changed handlers. void ClearStateChangedHandlers() Connect() Connects to a socket Task Connect() Returns Task Disconnect(WebSocketCloseStatus, string) Disconnects from a socket void Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"\") Parameters code WebSocketCloseStatus reason string GetLatency() Gets the roundtrip time of a single message between client and server. Task<double> GetLatency() Returns Task<double> MakeMsgRef() Generates a Message ref, used in Push(SocketRequest) string MakeMsgRef() Returns string Push(SocketRequest) Push a SocketRequest to the Supabase.Realtime.Socket void Push(SocketRequest data) Parameters data SocketRequest RemoveErrorHandler(ErrorEventHandler) Remove an error handler void RemoveErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler RemoveHeartbeatHandler(HeartbeatEventHandler) Remove heartbeat handler. void RemoveHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler RemoveMessageReceivedHandler(MessageEventHandler) Remove a message received handler. void RemoveMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler RemoveStateChangedHandler(StateEventHandler) Remove a state changed handler. void RemoveStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocketResponse.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocketResponse.html",
    "title": "Interface IRealtimeSocketResponse | supabase-csharp",
    "keywords": "Interface IRealtimeSocketResponse Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract for a socket response public interface IRealtimeSocketResponse Properties Event The parsed event type Constants.EventType Event { get; } Property Value Constants.EventType Payload The opinionated payload matching a SocketResponsePayload SocketResponsePayload? Payload { get; set; } Property Value SocketResponsePayload Ref The unique id of this response string? Ref { get; set; } Property Value string Topic The topic. string? Topic { get; set; } Property Value string _event The raw event name string? _event { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Interfaces.html": {
    "href": "api/Supabase.Realtime.Interfaces.html",
    "title": "Namespace Supabase.Realtime.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Interfaces Interfaces IRealtimeBroadcast A contract representing a realtime broadcast IRealtimeChannel A contract representing a realtime channel IRealtimeClient<TSocket, TChannel> Contract representing a Realtime Client IRealtimeDebugger Contract representing an internal debugger. IRealtimePresence Contract representing a Realtime Presence class IRealtimePush<TChannel, TSocketResponse> Contract representing a \"Push\" or an outgoing message to the socket server IRealtimeSocket Contract for a realtime socket. IRealtimeSocketResponse Contract for a socket response Enums IRealtimePresence.EventType Mapping of presence event types Delegates IRealtimeBroadcast.BroadcastEventHandler A delegate for broadcast events IRealtimeChannel.ErrorEventHandler Delegate for errors on this channel IRealtimeChannel.MessageReceivedHandler Delegate for messages received on this channel IRealtimeChannel.PostgresChangesHandler Delegate for postgres changes IRealtimeChannel.StateChangedHandler Delegate for channel state changes IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. IRealtimeDebugger.DebugEventHandler A debug event handler IRealtimePresence.PresenceEventHandler Delegate for a presence event. IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Delegate for a message event. IRealtimeSocket.ErrorEventHandler Delegate for errors on this socket IRealtimeSocket.HeartbeatEventHandler Delegate for handling a heartbeat event. IRealtimeSocket.MessageEventHandler Delegate for handling message received events. IRealtimeSocket.StateEventHandler Delegate for handling socket state changes."
  },
  "api/Supabase.Realtime.Models.BaseBroadcast-1.html": {
    "href": "api/Supabase.Realtime.Models.BaseBroadcast-1.html",
    "title": "Class BaseBroadcast<T> | supabase-csharp",
    "keywords": "Class BaseBroadcast<T> Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents a Broadcast response with a modeled payload. public class BaseBroadcast<T> : BaseBroadcast where T : class Type Parameters T Inheritance object BaseBroadcast BaseBroadcast<T> Inherited Members BaseBroadcast.Event object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Payload The typed payload. [JsonProperty(\"payload\")] public T? Payload { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Models.BaseBroadcast.html": {
    "href": "api/Supabase.Realtime.Models.BaseBroadcast.html",
    "title": "Class BaseBroadcast | supabase-csharp",
    "keywords": "Class BaseBroadcast Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents an arbitrary Broadcast response. public class BaseBroadcast Inheritance object BaseBroadcast Derived BaseBroadcast<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Event The event. [JsonProperty(\"event\")] public string? Event { get; set; } Property Value string Payload The payload. [JsonProperty(\"payload\")] public Dictionary<string, object>? Payload { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Realtime.Models.BasePresence.html": {
    "href": "api/Supabase.Realtime.Models.BasePresence.html",
    "title": "Class BasePresence | supabase-csharp",
    "keywords": "Class BasePresence Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents an arbitrary Presence response. public class BasePresence Inheritance object BasePresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties PhoenixPrevRef The previous ref for this presence event (can be used to establish sequence) [JsonProperty(\"phx_ref_prev\")] public string? PhoenixPrevRef { get; set; } Property Value string PhoenixRef The ref for this event. (can be used to establish sequence) [JsonProperty(\"phx_ref\")] public string? PhoenixRef { get; set; } Property Value string Methods ShouldSerializePhoenixPrevRef() Disables serialization of phoenix_prev_ref public bool ShouldSerializePhoenixPrevRef() Returns bool ShouldSerializePhoenixRef() Disables serialization of phoenix_ref public bool ShouldSerializePhoenixRef() Returns bool"
  },
  "api/Supabase.Realtime.Models.html": {
    "href": "api/Supabase.Realtime.Models.html",
    "title": "Namespace Supabase.Realtime.Models | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Models Classes BaseBroadcast Represents an arbitrary Broadcast response. BaseBroadcast<T> Represents a Broadcast response with a modeled payload. BasePresence Represents an arbitrary Presence response."
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.html",
    "title": "Enum PostgresChangesOptions.ListenType | supabase-csharp",
    "keywords": "Enum PostgresChangesOptions.ListenType Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll Mapping of postgres changes listener types public enum PostgresChangesOptions.ListenType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"*\", null)] All = 0 All event [MapTo(\"DELETE\", null)] Deletes = 3 DELETE events [MapTo(\"INSERT\", null)] Inserts = 1 INSERT events [MapTo(\"UPDATE\", null)] Updates = 2 UPDATE events"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.html",
    "title": "Class PostgresChangesOptions | supabase-csharp",
    "keywords": "Class PostgresChangesOptions Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll Handles a postgres_changes channel For Example in the js client: const databaseFilter = { schema: 'public', table: 'messages', filter: `room_id=eq.${channelId}`, event: 'INSERT', } Would translate to: new PostgresChangesOptions(\"public\", \"messages\", $\"room_id=eq.{channelId}\"); public class PostgresChangesOptions Inheritance object PostgresChangesOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesOptions(string, string?, ListenType, string?, Dictionary<string, string>?) Postgres changes options. public PostgresChangesOptions(string schema, string? table = null, PostgresChangesOptions.ListenType eventType = ListenType.All, string? filter = null, Dictionary<string, string>? parameters = null) Parameters schema string table string eventType PostgresChangesOptions.ListenType filter string parameters Dictionary<string, string> Properties Event The stringified event listener type [JsonProperty(\"event\")] public string Event { get; } Property Value string Filter The filter for this listener [JsonProperty(\"filter\", NullValueHandling = NullValueHandling.Ignore)] public string? Filter { get; set; } Property Value string Parameters The parameters passed to the server [JsonProperty(\"parameters\", NullValueHandling = NullValueHandling.Ignore)] public Dictionary<string, string>? Parameters { get; set; } Property Value Dictionary<string, string> Schema The schema for this listener, likely: public [JsonProperty(\"schema\")] public string Schema { get; set; } Property Value string Table The table for this listener, can be: * matching all tables in schema. [JsonProperty(\"table\")] public string? Table { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesPayload-1.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesPayload-1.html",
    "title": "Class PostgresChangesPayload<T> | supabase-csharp",
    "keywords": "Class PostgresChangesPayload<T> Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll The payload. public class PostgresChangesPayload<T> where T : class Type Parameters T Inheritance object PostgresChangesPayload<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Data The payload data. [JsonProperty(\"data\")] public SocketResponsePayload<T>? Data { get; set; } Property Value SocketResponsePayload<T>"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse-1.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse-1.html",
    "title": "Class PostgresChangesResponse<T> | supabase-csharp",
    "keywords": "Class PostgresChangesResponse<T> Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class PostgresChangesResponse<T> : SocketResponse<PostgresChangesPayload<T>>, IRealtimeSocketResponse where T : class Type Parameters T Inheritance object SocketResponse SocketResponse<PostgresChangesPayload<T>> PostgresChangesResponse<T> Implements IRealtimeSocketResponse Inherited Members SocketResponse<PostgresChangesPayload<T>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesResponse(JsonSerializerSettings) Represents a socket response public PostgresChangesResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse.html",
    "title": "Class PostgresChangesResponse | supabase-csharp",
    "keywords": "Class PostgresChangesResponse Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll A postgres changes event. public class PostgresChangesResponse : SocketResponse<PostgresChangesPayload<SocketResponsePayload>>, IRealtimeSocketResponse Inheritance object SocketResponse SocketResponse<PostgresChangesPayload<SocketResponsePayload>> PostgresChangesResponse Implements IRealtimeSocketResponse Inherited Members SocketResponse<PostgresChangesPayload<SocketResponsePayload>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesResponse(JsonSerializerSettings) Represents a socket response public PostgresChangesResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Methods Model<TModel>() Hydrates the referenced record into a Model (if possible). public virtual TModel? Model<TModel>() where TModel : BaseModel, new() Returns TModel Type Parameters TModel OldModel<TModel>() Hydrates the old_record into a Model (if possible). NOTE: If you want to receive the \"previous\" data for updates and deletes, you will need to set REPLICA IDENTITY to FULL, like this: ALTER TABLE your_table REPLICA IDENTITY FULL; public virtual TModel? OldModel<TModel>() where TModel : BaseModel, new() Returns TModel Type Parameters TModel"
  },
  "api/Supabase.Realtime.PostgresChanges.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.html",
    "title": "Namespace Supabase.Realtime.PostgresChanges | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.PostgresChanges Classes PostgresChangesOptions Handles a postgres_changes channel For Example in the js client: const databaseFilter = { schema: 'public', table: 'messages', filter: `room_id=eq.${channelId}`, event: 'INSERT', } Would translate to: new PostgresChangesOptions(\"public\", \"messages\", $\"room_id=eq.{channelId}\"); PostgresChangesPayload<T> The payload. PostgresChangesResponse A postgres changes event. PostgresChangesResponse<T> A SocketResponse with support for Generically typed Payload Enums PostgresChangesOptions.ListenType Mapping of postgres changes listener types"
  },
  "api/Supabase.Realtime.Presence.PresenceDiffPayload-1.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceDiffPayload-1.html",
    "title": "Class PresenceDiffPayload<TPresence> | supabase-csharp",
    "keywords": "Class PresenceDiffPayload<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll a Presence Diff payload public class PresenceDiffPayload<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceDiffPayload<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Joins The joining presences. [JsonProperty(\"joins\")] public Dictionary<string, PresenceDiffPayloadMeta<TPresence>>? Joins { get; set; } Property Value Dictionary<string, PresenceDiffPayloadMeta<TPresence>> Leaves The leaving presences. [JsonProperty(\"leaves\")] public Dictionary<string, PresenceDiffPayloadMeta<TPresence>>? Leaves { get; set; } Property Value Dictionary<string, PresenceDiffPayloadMeta<TPresence>>"
  },
  "api/Supabase.Realtime.Presence.PresenceDiffPayloadMeta-1.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceDiffPayloadMeta-1.html",
    "title": "Class PresenceDiffPayloadMeta<TPresence> | supabase-csharp",
    "keywords": "Class PresenceDiffPayloadMeta<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll A presence diff payload public class PresenceDiffPayloadMeta<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceDiffPayloadMeta<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Metas The metas containing current presences [JsonProperty(\"metas\")] public List<TPresence>? Metas { get; set; } Property Value List<TPresence>"
  },
  "api/Supabase.Realtime.Presence.PresenceOptions.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceOptions.html",
    "title": "Class PresenceOptions | supabase-csharp",
    "keywords": "Class PresenceOptions Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll Options used to initialize Realtime Presence public class PresenceOptions Inheritance object PresenceOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PresenceOptions(string) Presence options. public PresenceOptions(string presenceKey) Parameters presenceKey string Properties PresenceKey key option is used to track presence payload across clients [JsonProperty(\"key\")] public string PresenceKey { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Presence.RealtimePresenceDiff-1.html": {
    "href": "api/Supabase.Realtime.Presence.RealtimePresenceDiff-1.html",
    "title": "Class RealtimePresenceDiff<TPresence> | supabase-csharp",
    "keywords": "Class RealtimePresenceDiff<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll Represents a presence_diff response public class RealtimePresenceDiff<TPresence> : SocketResponse<PresenceDiffPayload<TPresence>>, IRealtimeSocketResponse where TPresence : BasePresence Type Parameters TPresence Inheritance object SocketResponse SocketResponse<PresenceDiffPayload<TPresence>> RealtimePresenceDiff<TPresence> Implements IRealtimeSocketResponse Inherited Members SocketResponse<PresenceDiffPayload<TPresence>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimePresenceDiff(JsonSerializerSettings) Represents a socket response public RealtimePresenceDiff(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Presence.Responses.PresenceStatePayload-1.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.PresenceStatePayload-1.html",
    "title": "Class PresenceStatePayload<TPresence> | supabase-csharp",
    "keywords": "Class PresenceStatePayload<TPresence> Namespace Supabase.Realtime.Presence.Responses Assembly Supabase.Realtime.dll A presence state payload response public class PresenceStatePayload<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceStatePayload<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Metas The metas containing joins and leaves [JsonProperty(\"metas\")] public List<TPresence>? Metas { get; set; } Property Value List<TPresence>"
  },
  "api/Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse-1.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse-1.html",
    "title": "Class PresenceStateSocketResponse<TPresence> | supabase-csharp",
    "keywords": "Class PresenceStateSocketResponse<TPresence> Namespace Supabase.Realtime.Presence.Responses Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class PresenceStateSocketResponse<TPresence> : SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>>, IRealtimeSocketResponse where TPresence : BasePresence Type Parameters TPresence Inheritance object SocketResponse SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>> PresenceStateSocketResponse<TPresence> Implements IRealtimeSocketResponse Inherited Members SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Payload SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PresenceStateSocketResponse(JsonSerializerSettings) Represents a socket response public PresenceStateSocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Presence.Responses.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.html",
    "title": "Namespace Supabase.Realtime.Presence.Responses | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Presence.Responses Classes PresenceStatePayload<TPresence> A presence state payload response PresenceStateSocketResponse<TPresence> A SocketResponse with support for Generically typed Payload"
  },
  "api/Supabase.Realtime.Presence.html": {
    "href": "api/Supabase.Realtime.Presence.html",
    "title": "Namespace Supabase.Realtime.Presence | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Presence Classes PresenceDiffPayloadMeta<TPresence> A presence diff payload PresenceDiffPayload<TPresence> a Presence Diff payload PresenceOptions Options used to initialize Realtime Presence RealtimePresenceDiff<TPresence> Represents a presence_diff response"
  },
  "api/Supabase.Realtime.RealtimeBroadcast-1.html": {
    "href": "api/Supabase.Realtime.RealtimeBroadcast-1.html",
    "title": "Class RealtimeBroadcast<TBroadcastModel> | supabase-csharp",
    "keywords": "Class RealtimeBroadcast<TBroadcastModel> Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Represents a realtime broadcast client. Broadcast follows the publish-subscribe pattern where a client publishes messages to a channel with a unique identifier. Other clients can elect to receive the message in real-time by subscribing to the channel with the same unique identifier. If these clients are online and subscribed then they will receive the message. Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients. A common use-case is sharing a user's cursor position with other clients in an online game. public class RealtimeBroadcast<TBroadcastModel> : IRealtimeBroadcast where TBroadcastModel : BaseBroadcast Type Parameters TBroadcastModel A model representing expected payload. Inheritance object RealtimeBroadcast<TBroadcastModel> Implements IRealtimeBroadcast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeBroadcast(RealtimeChannel, BroadcastOptions, JsonSerializerSettings) Initializes a realtime broadcast helper class. public RealtimeBroadcast(RealtimeChannel channel, BroadcastOptions options, JsonSerializerSettings serializerSettings) Parameters channel RealtimeChannel options BroadcastOptions serializerSettings JsonSerializerSettings Methods AddBroadcastEventHandler(BroadcastEventHandler) Adds a broadcast event listener. public void AddBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler ClearBroadcastEventHandlers() Clears all broadcast event listeners public void ClearBroadcastEventHandlers() Current() The last received broadcast. public TBroadcastModel? Current() Returns TBroadcastModel RemoveBroadcastEventHandler(BroadcastEventHandler) Removes a broadcast event listener. public void RemoveBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler Send(string?, object, int) Broadcasts an arbitrary payload public Task<bool> Send(string? broadcastEventName, object payload, int timeoutMs = 10000) Parameters broadcastEventName string payload object timeoutMs int Returns Task<bool> TriggerReceived(SocketResponse) Called by RealtimeChannel when a broadcast event is received, then parsed/typed here. public void TriggerReceived(SocketResponse response) Parameters response SocketResponse Exceptions ArgumentException"
  },
  "api/Supabase.Realtime.RealtimeChannel.html": {
    "href": "api/Supabase.Realtime.RealtimeChannel.html",
    "title": "Class RealtimeChannel | supabase-csharp",
    "keywords": "Class RealtimeChannel Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Class representation of a channel subscription public class RealtimeChannel : IRealtimeChannel Inheritance object RealtimeChannel Implements IRealtimeChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeChannel(IRealtimeSocket, string, ChannelOptions) Initializes a Channel - must call Subscribe() to receive events. public RealtimeChannel(IRealtimeSocket socket, string channelName, ChannelOptions options) Parameters socket IRealtimeSocket channelName string options ChannelOptions Fields IsSubscribed Flag stating if a channel is currently subscribed. public bool IsSubscribed Field Value bool Properties BroadcastOptions The saved Broadcast Options, set in Register<TBroadcastResponse>(bool, bool) public BroadcastOptions? BroadcastOptions { get; } Property Value BroadcastOptions HasJoinedOnce Flag stating whether a channel has been joined once or not. public bool HasJoinedOnce { get; } Property Value bool IsClosed As to whether this Channel is Closed public bool IsClosed { get; } Property Value bool IsErrored As to if this Channel has Errored public bool IsErrored { get; } Property Value bool IsJoined As to if this Channel is currently Joined public bool IsJoined { get; } Property Value bool IsJoining As to if this Channel is currently Joining public bool IsJoining { get; } Property Value bool IsLeaving As to if this channel is currently leaving public bool IsLeaving { get; } Property Value bool Options Options passed to this channel instance. public ChannelOptions Options { get; } Property Value ChannelOptions PostgresChangesOptions The saved Postgres Changes Options, set in Register(PostgresChangesOptions) public List<PostgresChangesOptions> PostgresChangesOptions { get; } Property Value List<PostgresChangesOptions> PresenceOptions The saved Presence Options, set in Register<TPresenceResponse>(string) public PresenceOptions? PresenceOptions { get; } Property Value PresenceOptions State The Channel's current state. public Constants.ChannelState State { get; } Property Value Constants.ChannelState Topic The channel's topic (identifier) public string Topic { get; } Property Value string Methods AddErrorHandler(ErrorEventHandler) Adds an error event handler. public void AddErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler AddMessageReceivedHandler(MessageReceivedHandler) Registers a message received listener, called when a socket message is received for this channel. public void AddMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler AddPostgresChangeHandler(ListenType, PostgresChangesHandler) Add a postgres changes listener. Should be paired with Register(PostgresChangesOptions). public void AddPostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType The type of event this callback should process. postgresChangeHandler IRealtimeChannel.PostgresChangesHandler AddStateChangedHandler(StateChangedHandler) Registers a state changed listener relative to this channel. Called when channel state changes. public void AddStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Broadcast() Returns the IRealtimeBroadcast instance. public IRealtimeBroadcast? Broadcast() Returns IRealtimeBroadcast Broadcast<TBroadcastModel>() Returns a typed RealtimeBroadcast<TBroadcastModel> instance. public RealtimeBroadcast<TBroadcastModel>? Broadcast<TBroadcastModel>() where TBroadcastModel : BaseBroadcast Returns RealtimeBroadcast<TBroadcastModel> Type Parameters TBroadcastModel ClearErrorHandlers() Clears Error Event Handlers public void ClearErrorHandlers() ClearMessageReceivedHandlers() Clears message received listeners. public void ClearMessageReceivedHandlers() ClearPostgresChangeHandlers() Clears all postgres changes listeners. public void ClearPostgresChangeHandlers() ClearStateChangedHandlers() Clears all channel state changed listeners public void ClearStateChangedHandlers() Presence() Returns the IRealtimePresence instance. public IRealtimePresence? Presence() Returns IRealtimePresence Presence<TPresenceModel>() Returns a typed RealtimePresence<TPresenceModel> instance. public RealtimePresence<TPresenceModel>? Presence<TPresenceModel>() where TPresenceModel : BasePresence Returns RealtimePresence<TPresenceModel> Type Parameters TPresenceModel Model representing a Presence payload Push(string, string?, object?, int) Sends a Push request under this channel. Maintains a buffer in the event push is called prior to the channel being joined. public Push Push(string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters eventName string type string payload object timeoutMs int Returns Push Register(PostgresChangesOptions) Registers postgres_changes options, can be called multiple times. Should be paired with AddPostgresChangeHandler(ListenType, PostgresChangesHandler) public IRealtimeChannel Register(PostgresChangesOptions postgresChangesOptions) Parameters postgresChangesOptions PostgresChangesOptions Returns IRealtimeChannel Register<TBroadcastResponse>(bool, bool) Registers a RealtimeBroadcast<TBroadcastModel> instance - allowing broadcast responses to be parsed. public RealtimeBroadcast<TBroadcastResponse> Register<TBroadcastResponse>(bool broadcastSelf = false, bool broadcastAck = false) where TBroadcastResponse : BaseBroadcast Parameters broadcastSelf bool enables client to receive message it has broadcast broadcastAck bool instructs server to acknowledge that broadcast message was received Returns RealtimeBroadcast<TBroadcastResponse> Type Parameters TBroadcastResponse Exceptions InvalidOperationException Register<TPresenceResponse>(string) Registers a RealtimePresence<TPresenceModel> instance - allowing presence responses to be parsed and state to be tracked. public RealtimePresence<TPresenceResponse> Register<TPresenceResponse>(string presenceKey) where TPresenceResponse : BasePresence Parameters presenceKey string used to track presence payload across clients Returns RealtimePresence<TPresenceResponse> Type Parameters TPresenceResponse The model representing a presence payload. Exceptions InvalidOperationException Thrown if called multiple times. Rejoin(int) Rejoins the channel. public void Rejoin(int timeoutMs = 10000) Parameters timeoutMs int RemoveErrorHandler(ErrorEventHandler) Removes an error event handler public void RemoveErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler Exceptions NotImplementedException RemoveMessageReceivedHandler(MessageReceivedHandler) Removes a message received listener. public void RemoveMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler RemovePostgresChangeHandler(ListenType, PostgresChangesHandler) Removes a postgres changes listener. public void RemovePostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType The type of event this callback was registered to process. postgresChangeHandler IRealtimeChannel.PostgresChangesHandler RemoveStateChangedHandler(StateChangedHandler) Removes a channel state changed listener public void RemoveStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Send(ChannelEventName, string?, object, int) Sends an arbitrary payload with a given payload type (Constants.ChannelEventName) public Task<bool> Send(Constants.ChannelEventName eventName, string? type, object payload, int timeoutMs = 10000) Parameters eventName Constants.ChannelEventName type string payload object timeoutMs int Returns Task<bool> Subscribe(int) Subscribes to the channel given supplied Options/params. public Task<IRealtimeChannel> Subscribe(int timeoutMs = 10000) Parameters timeoutMs int Returns Task<IRealtimeChannel> Unsubscribe() Unsubscribes from the channel. public IRealtimeChannel Unsubscribe() Returns IRealtimeChannel"
  },
  "api/Supabase.Realtime.RealtimePresence-1.html": {
    "href": "api/Supabase.Realtime.RealtimePresence-1.html",
    "title": "Class RealtimePresence<TPresenceModel> | supabase-csharp",
    "keywords": "Class RealtimePresence<TPresenceModel> Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Represents a realtime presence client. When a client subscribes to a channel, it will immediately receive the channel's latest state in a single message. Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other. If a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state. public class RealtimePresence<TPresenceModel> : IRealtimePresence where TPresenceModel : BasePresence Type Parameters TPresenceModel A model representing expected payload. Inheritance object RealtimePresence<TPresenceModel> Implements IRealtimePresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimePresence(RealtimeChannel, PresenceOptions, JsonSerializerSettings) Initializes a realtime presence helper class. public RealtimePresence(RealtimeChannel channel, PresenceOptions options, JsonSerializerSettings serializerSettings) Parameters channel RealtimeChannel options PresenceOptions serializerSettings JsonSerializerSettings Properties CurrentState The Current State of this Presence instance. public Dictionary<string, List<TPresenceModel>> CurrentState { get; } Property Value Dictionary<string, List<TPresenceModel>> LastState The Last State of this Presence instance. public Dictionary<string, List<TPresenceModel>> LastState { get; } Property Value Dictionary<string, List<TPresenceModel>> Methods AddPresenceEventHandler(EventType, PresenceEventHandler) Add presence event handler for a given event type. public void AddPresenceEventHandler(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler ClearPresenceEventHandlers(EventType?) Clears all event handlers for a given type (if specified) or clears all handlers. public void ClearPresenceEventHandlers(IRealtimePresence.EventType? eventType = null) Parameters eventType IRealtimePresence.EventType? RemovePresenceEventHandlers(EventType, PresenceEventHandler) Remove an event handler public void RemovePresenceEventHandlers(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler Track(object?, int) \"Tracks\" an event, used with Supabase.Realtime.Presence. public Task<Push> Track(object? payload, int timeoutMs = 10000) Parameters payload object timeoutMs int Returns Task<Push> TriggerDiff(SocketResponse) Triggers a diff comparison and emits events accordingly. public void TriggerDiff(SocketResponse response) Parameters response SocketResponse Exceptions ArgumentException TriggerSync(SocketResponse) Called in two cases: - By RealtimeChannel when it receives a presence_state initializing message. - By RealtimeChannel When a diff has been received and a new response is saved. public void TriggerSync(SocketResponse response) Parameters response SocketResponse Untrack() Untracks an event. public Task<Push> Untrack() Returns Task<Push>"
  },
  "api/Supabase.Realtime.RealtimeSocket.html": {
    "href": "api/Supabase.Realtime.RealtimeSocket.html",
    "title": "Class RealtimeSocket | supabase-csharp",
    "keywords": "Class RealtimeSocket Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Socket connection handler. public class RealtimeSocket : IDisposable, IRealtimeSocket Inheritance object RealtimeSocket Implements IDisposable IRealtimeSocket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeSocket(string, ClientOptions) Initializes this Socket instance. public RealtimeSocket(string endpoint, ClientOptions options) Parameters endpoint string options ClientOptions Properties IsConnected Returns whether or not the connection is alive. public bool IsConnected { get; } Property Value bool Methods AddErrorHandler(ErrorEventHandler) Adds an error event handler. public void AddErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler AddHeartbeatHandler(HeartbeatEventHandler) Adds a listener to be notified when a message is received. public void AddHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler AddMessageReceivedHandler(MessageEventHandler) Adds a listener to be notified when a message is received. public void AddMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler AddStateChangedHandler(StateEventHandler) Adds a listener to be notified when the socket state changes. public void AddStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ClearErrorHandlers() Clears Error Event Handlers public void ClearErrorHandlers() ClearHeartbeatHandlers() Clears all of the listeners from receiving event state changes. public void ClearHeartbeatHandlers() ClearMessageReceivedHandlers() Clears all of the listeners from receiving event state changes. public void ClearMessageReceivedHandlers() ClearStateChangedHandlers() Clears all of the listeners from receiving event state changes. public void ClearStateChangedHandlers() Connect() Connects to a socket server and registers event listeners. public Task Connect() Returns Task Disconnect(WebSocketCloseStatus, string) Disconnects from the socket server. public void Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"\") Parameters code WebSocketCloseStatus reason string GetLatency() Returns the latency (in millis) of roundtrip time from socket to server and back. public Task<double> GetLatency() Returns Task<double> MakeMsgRef() Generates an incrementing identifier for message references - this reference is used to coordinate requests with their responses. public string MakeMsgRef() Returns string Push(SocketRequest) Pushes formatted data to the socket server. If the connection is not alive, the data will be placed into a buffer to be sent when reconnected. public void Push(SocketRequest data) Parameters data SocketRequest RemoveErrorHandler(ErrorEventHandler) Removes an error event handler public void RemoveErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler Exceptions NotImplementedException RemoveHeartbeatHandler(HeartbeatEventHandler) Removes a specified listener from messages received. public void RemoveHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler RemoveMessageReceivedHandler(MessageEventHandler) Removes a specified listener from messages received. public void RemoveMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler RemoveStateChangedHandler(StateEventHandler) Removes a specified listener from socket state changes. public void RemoveStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ReplyEventName(string) Returns the expected reply event name based off a generated message ref. public string ReplyEventName(string msgRef) Parameters msgRef string Returns string"
  },
  "api/Supabase.Realtime.Socket.Responses.PhoenixResponse.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.PhoenixResponse.html",
    "title": "Class PhoenixResponse | supabase-csharp",
    "keywords": "Class PhoenixResponse Namespace Supabase.Realtime.Socket.Responses Assembly Supabase.Realtime.dll A generic, internal phoenix server response public class PhoenixResponse Inheritance object PhoenixResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Response The response. [JsonProperty(\"response\")] public object? Response Field Value object Status The status. [JsonProperty(\"status\")] public string? Status Field Value string"
  },
  "api/Supabase.Realtime.Socket.Responses.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.html",
    "title": "Namespace Supabase.Realtime.Socket.Responses | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Socket.Responses Classes PhoenixResponse A generic, internal phoenix server response"
  },
  "api/Supabase.Realtime.Socket.SocketOptionsParameters.html": {
    "href": "api/Supabase.Realtime.Socket.SocketOptionsParameters.html",
    "title": "Class SocketOptionsParameters | supabase-csharp",
    "keywords": "Class SocketOptionsParameters Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Options to initialize a socket. public class SocketOptionsParameters Inheritance object SocketOptionsParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties ApiKey A Supabase hosted public key [JsonProperty(\"apikey\")] public string? ApiKey { get; set; } Property Value string Token A user token (used for WALRUS permissions) [JsonProperty(\"token\")] public string? Token { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketRequest.html": {
    "href": "api/Supabase.Realtime.Socket.SocketRequest.html",
    "title": "Class SocketRequest | supabase-csharp",
    "keywords": "Class SocketRequest Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Representation of a Socket Request, used by Push public class SocketRequest Inheritance object SocketRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Event The Event name [JsonProperty(\"event\")] public string? Event { get; set; } Property Value string JoinRef The join ref (if applicable) [JsonProperty(\"join_ref\", NullValueHandling = NullValueHandling.Ignore)] public string? JoinRef { get; set; } Property Value string Payload The json serializable payload [JsonProperty(\"payload\")] public object? Payload { get; set; } Property Value object Ref The unique ref for this request. [JsonProperty(\"ref\")] public string? Ref { get; set; } Property Value string Topic The topic being sent to [JsonProperty(\"topic\")] public string? Topic { get; set; } Property Value string Type The type [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public string? Type { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketResponse-1.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponse-1.html",
    "title": "Class SocketResponse<T> | supabase-csharp",
    "keywords": "Class SocketResponse<T> Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class SocketResponse<T> : SocketResponse, IRealtimeSocketResponse where T : class Type Parameters T Inheritance object SocketResponse SocketResponse<T> Implements IRealtimeSocketResponse Derived PostgresChangesResponse PostgresChangesResponse<T> RealtimePresenceDiff<TPresence> PresenceStateSocketResponse<TPresence> Inherited Members SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketResponse(JsonSerializerSettings) Represents a socket response public SocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Properties Payload The typed payload response [JsonProperty(\"payload\")] public T? Payload { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Socket.SocketResponse.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponse.html",
    "title": "Class SocketResponse | supabase-csharp",
    "keywords": "Class SocketResponse Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Representation of a Socket Response. public class SocketResponse : IRealtimeSocketResponse Inheritance object SocketResponse Implements IRealtimeSocketResponse Derived SocketResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketResponse(JsonSerializerSettings) Represents a socket response public SocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Properties Event The typed, parsed event given by this library. [JsonIgnore] public Constants.EventType Event { get; } Property Value Constants.EventType Payload The payload/response. [JsonProperty(\"payload\")] public SocketResponsePayload? Payload { get; set; } Property Value SocketResponsePayload Ref An internal reference to this particular feedback loop. [JsonProperty(\"ref\")] public string? Ref { get; set; } Property Value string Topic The internal realtime topic. [JsonProperty(\"topic\")] public string? Topic { get; set; } Property Value string _event The internal, raw event given by the socket [JsonProperty(\"event\")] public string? _event { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketResponsePayload-1.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponsePayload-1.html",
    "title": "Class SocketResponsePayload<T> | supabase-csharp",
    "keywords": "Class SocketResponsePayload<T> Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A socket response payload. public class SocketResponsePayload<T> : SocketResponsePayload where T : class Type Parameters T Inheritance object SocketResponsePayload SocketResponsePayload<T> Inherited Members SocketResponsePayload.Columns SocketResponsePayload.CommitTimestamp SocketResponsePayload.Schema SocketResponsePayload.Table SocketResponsePayload._type SocketResponsePayload.Type SocketResponsePayload.Status SocketResponsePayload.Response SocketResponsePayload.Errors SocketResponsePayload.Joins SocketResponsePayload.Leaves SocketResponsePayload.Channel SocketResponsePayload.Extension SocketResponsePayload.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties OldRecord The previous state of the referenced record. [JsonProperty(\"old_record\")] public T? OldRecord { get; set; } Property Value T Record The record referenced. [JsonProperty(\"record\")] public T? Record { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Socket.SocketResponsePayload.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponsePayload.html",
    "title": "Class SocketResponsePayload | supabase-csharp",
    "keywords": "Class SocketResponsePayload Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A socket response payload. public class SocketResponsePayload Inheritance object SocketResponsePayload Derived SocketResponsePayload<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Channel The channel (system) [JsonProperty(\"channel\")] public string? Channel { get; set; } Property Value string Columns Displays Column information from the Database. Will always be an array but can be empty [JsonProperty(\"columns\")] public List<object>? Columns { get; set; } Property Value List<object> CommitTimestamp The timestamp of the commit referenced. Will either be a string or null [JsonProperty(\"commit_timestamp\")] public DateTimeOffset? CommitTimestamp { get; set; } Property Value DateTimeOffset? Errors Either null or an array of errors. See: https://github.com/supabase/walrus/#error-states [JsonProperty(\"errors\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? Errors { get; set; } Property Value List<string> Extension The extension (system) [JsonProperty(\"extension\")] public string? Extension { get; set; } Property Value string Joins Presence joins (parsed later) [JsonProperty(\"joins\")] public object? Joins { get; set; } Property Value object Leaves Presence leaves (parsed later) [JsonProperty(\"leaves\")] public object? Leaves { get; set; } Property Value object Message The message (system) [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string OldRecord The previous state of the referenced record. Will always be an object but can be empty. [JsonProperty(\"old_record\")] public object? OldRecord { get; set; } Property Value object Record The record referenced. Will always be an object but can be empty. [JsonProperty(\"record\")] public object? Record { get; set; } Property Value object Response The unparsed response object [JsonProperty(\"response\")] public object? Response { get; set; } Property Value object Schema The Schema affected. [JsonProperty(\"schema\")] public string? Schema { get; set; } Property Value string Status Status of response [JsonProperty(\"status\")] public string? Status { get; set; } Property Value string Table The Table affected. [JsonProperty(\"table\")] public string? Table { get; set; } Property Value string Type The parsed type. [JsonIgnore] public Constants.EventType Type { get; } Property Value Constants.EventType _type The action type performed (INSERT, UPDATE, DELETE, etc.) [JsonProperty(\"type\")] public string? _type { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.html": {
    "href": "api/Supabase.Realtime.Socket.html",
    "title": "Namespace Supabase.Realtime.Socket | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime.Socket Classes SocketOptionsParameters Options to initialize a socket. SocketRequest Representation of a Socket Request, used by Push SocketResponse Representation of a Socket Response. SocketResponsePayload A socket response payload. SocketResponsePayload<T> A socket response payload. SocketResponse<T> A SocketResponse with support for Generically typed Payload"
  },
  "api/Supabase.Realtime.html": {
    "href": "api/Supabase.Realtime.html",
    "title": "Namespace Supabase.Realtime | supabase-csharp",
    "keywords": "Namespace Supabase.Realtime Classes Client Singleton that represents a Client connection to a Realtime Server. It maintains a singular Websocket with asynchronous listeners (RealtimeChannels). ClientOptions Options used when initializing a Client Constants Shared constants for Realtime RealtimeBroadcast<TBroadcastModel> Represents a realtime broadcast client. Broadcast follows the publish-subscribe pattern where a client publishes messages to a channel with a unique identifier. Other clients can elect to receive the message in real-time by subscribing to the channel with the same unique identifier. If these clients are online and subscribed then they will receive the message. Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients. A common use-case is sharing a user's cursor position with other clients in an online game. RealtimeChannel Class representation of a channel subscription RealtimePresence<TPresenceModel> Represents a realtime presence client. When a client subscribes to a channel, it will immediately receive the channel's latest state in a single message. Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other. If a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state. RealtimeSocket Socket connection handler. Enums Constants.ChannelEventName Mapping for event names that can be used with Push(string, string?, object?, int) to send arbitrary data. This is unlikely to be used by the developer. Constants.ChannelState Mapping of channel states, used with RealtimeChannel Constants.EventType A channel event type used and parsed in a SocketResponse Constants.PresenceListenEventTypes Map of Presence listener types, used with: RealtimePresence<TPresenceModel> Constants.SocketState The Current Socket state, used in RealtimeSocket"
  },
  "api/Supabase.StatelessClient.html": {
    "href": "api/Supabase.StatelessClient.html",
    "title": "Class StatelessClient | supabase-csharp",
    "keywords": "Class StatelessClient Namespace Supabase Assembly Supabase.dll A Static class representing a Supabase Client. public static class StatelessClient Inheritance object StatelessClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods From<T>(string, string, SupabaseOptions?) Gets the Postgrest client to prepare for a query. public static SupabaseTable<T> From<T>(string supabaseUrl, string supabaseKey, SupabaseOptions? options = null) where T : BaseModel, new() Parameters supabaseUrl string supabaseKey string options SupabaseOptions Returns SupabaseTable<T> Type Parameters T Functions(string, string, SupabaseOptions?) Supabase Edge functions allow you to deploy and invoke edge functions. public static IFunctionsClient Functions(string supabaseUrl, string supabaseKey, SupabaseOptions? options = null) Parameters supabaseUrl string supabaseKey string options SupabaseOptions Returns IFunctionsClient GetAuthOptions(string, string?, SupabaseOptions?) Returns an instance of ClientOptions given a provided url and key. public static ClientOptions GetAuthOptions(string supabaseUrl, string? supabaseKey = null, SupabaseOptions? options = null) Parameters supabaseUrl string supabaseKey string options SupabaseOptions Returns ClientOptions GetRestOptions(string?, SupabaseOptions?) Returns an instance of ClientOptions for a given supabase key. public static ClientOptions GetRestOptions(string? supabaseKey = null, SupabaseOptions? options = null) Parameters supabaseKey string options SupabaseOptions Returns ClientOptions Rpc(string, string, string, Dictionary<string, object>, SupabaseOptions?) Runs a remote procedure. public static Task<BaseResponse> Rpc(string supabaseUrl, string supabaseKey, string procedureName, Dictionary<string, object> parameters, SupabaseOptions? options = null) Parameters supabaseUrl string supabaseKey string procedureName string parameters Dictionary<string, object> options SupabaseOptions Returns Task<BaseResponse> Storage(string, string?, SupabaseOptions?) Supabase Storage allows you to manage user-generated content, such as photos or videos. public static IStorageClient<Bucket, FileObject> Storage(string supabaseUrl, string? supabaseKey = null, SupabaseOptions? options = null) Parameters supabaseUrl string supabaseKey string options SupabaseOptions Returns IStorageClient<Bucket, FileObject>"
  },
  "api/Supabase.Storage.Bucket.html": {
    "href": "api/Supabase.Storage.Bucket.html",
    "title": "Class Bucket | supabase-csharp",
    "keywords": "Class Bucket Namespace Supabase.Storage Assembly Supabase.Storage.dll public class Bucket Inheritance object Bucket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AllowedMimes Specifies the allowed mime types that this bucket can accept during upload. Expects a List of values such as: ['image/jpeg', 'image/png', etc] [JsonProperty(\"allowed_mime_types\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? AllowedMimes { get; set; } Property Value List<string> CreatedAt [JsonProperty(\"created_at\")] public DateTime? CreatedAt { get; set; } Property Value DateTime? FileSizeLimit Specifies the file size limit that this bucket can accept during upload. Expects a string value following a format like: '1kb', '50mb', '150kb', etc. [JsonProperty(\"file_size_limit\", NullValueHandling = NullValueHandling.Include)] public string? FileSizeLimit { get; set; } Property Value string Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string Name [JsonProperty(\"name\")] public string? Name { get; set; } Property Value string Owner [JsonProperty(\"owner\")] public string? Owner { get; set; } Property Value string Public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private. [JsonProperty(\"public\")] public bool Public { get; set; } Property Value bool UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime?"
  },
  "api/Supabase.Storage.BucketUpsertOptions.html": {
    "href": "api/Supabase.Storage.BucketUpsertOptions.html",
    "title": "Class BucketUpsertOptions | supabase-csharp",
    "keywords": "Class BucketUpsertOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class BucketUpsertOptions Inheritance object BucketUpsertOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties AllowedMimes Specifies the allowed mime types that this bucket can accept during upload. Expects a List of values such as: ['image/jpeg', 'image/png', etc] [JsonProperty(\"allowed_mime_types\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? AllowedMimes { get; set; } Property Value List<string> FileSizeLimit Specifies the file size limit that this bucket can accept during upload. Expects a string value following a format like: '1kb', '50mb', '150kb', etc. [JsonProperty(\"file_size_limit\", NullValueHandling = NullValueHandling.Include)] public string? FileSizeLimit { get; set; } Property Value string Public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private. [JsonProperty(\"public\")] public bool Public { get; set; } Property Value bool"
  },
  "api/Supabase.Storage.Client.html": {
    "href": "api/Supabase.Storage.Client.html",
    "title": "Class Client | supabase-csharp",
    "keywords": "Class Client Namespace Supabase.Storage Assembly Supabase.Storage.dll public class Client : StorageBucketApi, IStorageClient<Bucket, FileObject>, IStorageBucketApi<Bucket>, IGettableHeaders Inheritance object StorageBucketApi Client Implements IStorageClient<Bucket, FileObject> IStorageBucketApi<Bucket> IGettableHeaders Inherited Members StorageBucketApi.Options StorageBucketApi.Url StorageBucketApi.Headers StorageBucketApi.GetHeaders StorageBucketApi.ListBuckets() StorageBucketApi.GetBucket(string) StorageBucketApi.CreateBucket(string, BucketUpsertOptions) StorageBucketApi.UpdateBucket(string, BucketUpsertOptions) StorageBucketApi.EmptyBucket(string) StorageBucketApi.DeleteBucket(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(string, ClientOptions?, Dictionary<string, string>?) public Client(string url, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string options ClientOptions headers Dictionary<string, string> Client(string, Dictionary<string, string>?) public Client(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Methods From(string) Perform a file operation in a bucket public IStorageFileApi<FileObject> From(string id) Parameters id string Bucket Id Returns IStorageFileApi<FileObject>"
  },
  "api/Supabase.Storage.ClientOptions.html": {
    "href": "api/Supabase.Storage.ClientOptions.html",
    "title": "Class ClientOptions | supabase-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll Options that can be passed into the Storage Client public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields HttpDownloadTimeout The timespan to wait before an HTTP Upload Timesout See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpDownloadTimeout Field Value TimeSpan HttpRequestTimeout The timespan to wait before an HTTP Client request times out. See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpRequestTimeout Field Value TimeSpan HttpUploadTimeout The timespan to wait before an HTTP Upload Timesout See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpUploadTimeout Field Value TimeSpan"
  },
  "api/Supabase.Storage.CreateSignedUrlResponse.html": {
    "href": "api/Supabase.Storage.CreateSignedUrlResponse.html",
    "title": "Class CreateSignedUrlResponse | supabase-csharp",
    "keywords": "Class CreateSignedUrlResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class CreateSignedUrlResponse Inheritance object CreateSignedUrlResponse Derived CreateSignedUrlsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties SignedUrl [JsonProperty(\"signedURL\")] public string? SignedUrl { get; set; } Property Value string"
  },
  "api/Supabase.Storage.CreateSignedUrlsResponse.html": {
    "href": "api/Supabase.Storage.CreateSignedUrlsResponse.html",
    "title": "Class CreateSignedUrlsResponse | supabase-csharp",
    "keywords": "Class CreateSignedUrlsResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class CreateSignedUrlsResponse : CreateSignedUrlResponse Inheritance object CreateSignedUrlResponse CreateSignedUrlsResponse Inherited Members CreateSignedUrlResponse.SignedUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Path [JsonProperty(\"path\")] public string? Path { get; set; } Property Value string"
  },
  "api/Supabase.Storage.ErrorResponse.html": {
    "href": "api/Supabase.Storage.ErrorResponse.html",
    "title": "Class ErrorResponse | supabase-csharp",
    "keywords": "Class ErrorResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class ErrorResponse Inheritance object ErrorResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Message [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string StatusCode [JsonProperty(\"statusCode\")] public int StatusCode { get; set; } Property Value int"
  },
  "api/Supabase.Storage.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Storage.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | supabase-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public enum FailureHint.Reason Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields AlreadyExists = 4 Internal = 2 InvalidInput = 5 NotAuthorized = 1 NotFound = 3 Unknown = 0"
  },
  "api/Supabase.Storage.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Storage.Exceptions.FailureHint.html",
    "title": "Class FailureHint | supabase-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(SupabaseStorageException) public static FailureHint.Reason DetectReason(SupabaseStorageException storageException) Parameters storageException SupabaseStorageException Returns FailureHint.Reason"
  },
  "api/Supabase.Storage.Exceptions.SupabaseStorageException.html": {
    "href": "api/Supabase.Storage.Exceptions.SupabaseStorageException.html",
    "title": "Class SupabaseStorageException | supabase-csharp",
    "keywords": "Class SupabaseStorageException Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public class SupabaseStorageException : Exception, ISerializable Inheritance object Exception SupabaseStorageException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SupabaseStorageException(string?) public SupabaseStorageException(string? message) Parameters message string SupabaseStorageException(string?, Exception?) public SupabaseStorageException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Content public string? Content { get; } Property Value string Reason public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode public int StatusCode { get; } Property Value int Methods AddReason() public void AddReason()"
  },
  "api/Supabase.Storage.Exceptions.html": {
    "href": "api/Supabase.Storage.Exceptions.html",
    "title": "Namespace Supabase.Storage.Exceptions | supabase-csharp",
    "keywords": "Namespace Supabase.Storage.Exceptions Classes FailureHint SupabaseStorageException Enums FailureHint.Reason"
  },
  "api/Supabase.Storage.Extensions.TransformOptionsExtension.html": {
    "href": "api/Supabase.Storage.Extensions.TransformOptionsExtension.html",
    "title": "Class TransformOptionsExtension | supabase-csharp",
    "keywords": "Class TransformOptionsExtension Namespace Supabase.Storage.Extensions Assembly Supabase.Storage.dll public static class TransformOptionsExtension Inheritance object TransformOptionsExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToQueryCollection(TransformOptions) Transforms options into a NameValueCollecto to be used with a UriBuilder public static NameValueCollection ToQueryCollection(this TransformOptions transform) Parameters transform TransformOptions Returns NameValueCollection"
  },
  "api/Supabase.Storage.Extensions.html": {
    "href": "api/Supabase.Storage.Extensions.html",
    "title": "Namespace Supabase.Storage.Extensions | supabase-csharp",
    "keywords": "Namespace Supabase.Storage.Extensions Classes TransformOptionsExtension"
  },
  "api/Supabase.Storage.FileObject.html": {
    "href": "api/Supabase.Storage.FileObject.html",
    "title": "Class FileObject | supabase-csharp",
    "keywords": "Class FileObject Namespace Supabase.Storage Assembly Supabase.Storage.dll public class FileObject Inheritance object FileObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields MetaData [JsonProperty(\"metadata\")] public Dictionary<string, object> MetaData Field Value Dictionary<string, object> Properties BucketId [JsonProperty(\"bucket_id\")] public string? BucketId { get; set; } Property Value string Buckets [JsonProperty(\"buckets\")] public Bucket? Buckets { get; set; } Property Value Bucket CreatedAt [JsonProperty(\"created_at\")] public DateTime? CreatedAt { get; set; } Property Value DateTime? Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string IsFolder Flag representing if this object is a folder, all properties will be null but the name public bool IsFolder { get; } Property Value bool LastAccessedAt [JsonProperty(\"last_accessed_at\")] public DateTime? LastAccessedAt { get; set; } Property Value DateTime? Name [JsonProperty(\"name\")] public string? Name { get; set; } Property Value string Owner [JsonProperty(\"owner\")] public string? Owner { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime?"
  },
  "api/Supabase.Storage.FileOptions.html": {
    "href": "api/Supabase.Storage.FileOptions.html",
    "title": "Class FileOptions | supabase-csharp",
    "keywords": "Class FileOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class FileOptions Inheritance object FileOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties CacheControl [JsonProperty(\"cacheControl\")] public string CacheControl { get; set; } Property Value string ContentType [JsonProperty(\"contentType\")] public string ContentType { get; set; } Property Value string Upsert [JsonProperty(\"upsert\")] public bool Upsert { get; set; } Property Value bool"
  },
  "api/Supabase.Storage.GenericResponse.html": {
    "href": "api/Supabase.Storage.GenericResponse.html",
    "title": "Class GenericResponse | supabase-csharp",
    "keywords": "Class GenericResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class GenericResponse Inheritance object GenericResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Message [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string"
  },
  "api/Supabase.Storage.Interfaces.IStorageBucketApi-1.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageBucketApi-1.html",
    "title": "Interface IStorageBucketApi<TBucket> | supabase-csharp",
    "keywords": "Interface IStorageBucketApi<TBucket> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageBucketApi<TBucket> : IGettableHeaders where TBucket : Bucket Type Parameters TBucket Inherited Members IGettableHeaders.GetHeaders Properties Headers Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options ClientOptions Options { get; } Property Value ClientOptions Methods CreateBucket(string, BucketUpsertOptions?) Task<string> CreateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<string> DeleteBucket(string) Task<GenericResponse?> DeleteBucket(string id) Parameters id string Returns Task<GenericResponse> EmptyBucket(string) Task<GenericResponse?> EmptyBucket(string id) Parameters id string Returns Task<GenericResponse> GetBucket(string) Task<TBucket?> GetBucket(string id) Parameters id string Returns Task<TBucket> ListBuckets() Task<List<TBucket>?> ListBuckets() Returns Task<List<TBucket>> UpdateBucket(string, BucketUpsertOptions?) Task<TBucket?> UpdateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<TBucket>"
  },
  "api/Supabase.Storage.Interfaces.IStorageClient-2.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageClient-2.html",
    "title": "Interface IStorageClient<TBucket, TFileObject> | supabase-csharp",
    "keywords": "Interface IStorageClient<TBucket, TFileObject> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageClient<TBucket, TFileObject> : IStorageBucketApi<TBucket>, IGettableHeaders where TBucket : Bucket where TFileObject : FileObject Type Parameters TBucket TFileObject Inherited Members IStorageBucketApi<TBucket>.Options IStorageBucketApi<TBucket>.Headers IStorageBucketApi<TBucket>.CreateBucket(string, BucketUpsertOptions) IStorageBucketApi<TBucket>.DeleteBucket(string) IStorageBucketApi<TBucket>.EmptyBucket(string) IStorageBucketApi<TBucket>.GetBucket(string) IStorageBucketApi<TBucket>.ListBuckets() IStorageBucketApi<TBucket>.UpdateBucket(string, BucketUpsertOptions) IGettableHeaders.GetHeaders Methods From(string) IStorageFileApi<TFileObject> From(string id) Parameters id string Returns IStorageFileApi<TFileObject>"
  },
  "api/Supabase.Storage.Interfaces.IStorageFileApi-1.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageFileApi-1.html",
    "title": "Interface IStorageFileApi<TFileObject> | supabase-csharp",
    "keywords": "Interface IStorageFileApi<TFileObject> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageFileApi<TFileObject> where TFileObject : FileObject Type Parameters TFileObject Properties Options ClientOptions Options { get; } Property Value ClientOptions Methods CreateSignedUrl(string, int, TransformOptions?) Task<string> CreateSignedUrl(string path, int expiresIn, TransformOptions? transformOptions = null) Parameters path string expiresIn int transformOptions TransformOptions Returns Task<string> CreateSignedUrls(List<string>, int) Task<List<CreateSignedUrlsResponse>?> CreateSignedUrls(List<string> paths, int expiresIn) Parameters paths List<string> expiresIn int Returns Task<List<CreateSignedUrlsResponse>> CreateUploadSignedUrl(string) Task<UploadSignedUrl> CreateUploadSignedUrl(string supabasePath) Parameters supabasePath string Returns Task<UploadSignedUrl> Download(string, TransformOptions?, EventHandler<float>?) Task<byte[]> Download(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> Download(string, EventHandler<float>?) Task<byte[]> Download(string supabasePath, EventHandler<float>? onProgress = null) Parameters supabasePath string onProgress EventHandler<float> Returns Task<byte[]> Download(string, string, TransformOptions?, EventHandler<float>?) Task<string> Download(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> Download(string, string, EventHandler<float>?) Task<string> Download(string supabasePath, string localPath, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string onProgress EventHandler<float> Returns Task<string> DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) Task<byte[]> DownloadPublicFile(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) Task<string> DownloadPublicFile(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> GetPublicUrl(string, TransformOptions?) string GetPublicUrl(string path, TransformOptions? transformOptions = null) Parameters path string transformOptions TransformOptions Returns string List(string, SearchOptions?) Task<List<TFileObject>?> List(string path = \"\", SearchOptions? options = null) Parameters path string options SearchOptions Returns Task<List<TFileObject>> Move(string, string) Task<bool> Move(string fromPath, string toPath) Parameters fromPath string toPath string Returns Task<bool> Remove(List<string>) Task<List<TFileObject>?> Remove(List<string> paths) Parameters paths List<string> Returns Task<List<TFileObject>> Remove(string) Task<TFileObject?> Remove(string path) Parameters path string Returns Task<TFileObject> Update(byte[], string, FileOptions?, EventHandler<float>?) Task<string> Update(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters data byte[] supabasePath string options FileOptions onProgress EventHandler<float> Returns Task<string> Update(string, string, FileOptions?, EventHandler<float>?) Task<string> Update(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters localFilePath string supabasePath string options FileOptions onProgress EventHandler<float> Returns Task<string> Upload(byte[], string, FileOptions?, EventHandler<float>?, bool) Task<string> Upload(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] supabasePath string options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> Upload(string, string, FileOptions?, EventHandler<float>?, bool) Task<string> Upload(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string supabasePath string options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(byte[], UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Task<string> UploadToSignedUrl(byte[] data, UploadSignedUrl url, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] url UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(string, UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Task<string> UploadToSignedUrl(string localFilePath, UploadSignedUrl url, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string url UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string>"
  },
  "api/Supabase.Storage.Interfaces.html": {
    "href": "api/Supabase.Storage.Interfaces.html",
    "title": "Namespace Supabase.Storage.Interfaces | supabase-csharp",
    "keywords": "Namespace Supabase.Storage.Interfaces Interfaces IStorageBucketApi<TBucket> IStorageClient<TBucket, TFileObject> IStorageFileApi<TFileObject>"
  },
  "api/Supabase.Storage.SearchOptions.html": {
    "href": "api/Supabase.Storage.SearchOptions.html",
    "title": "Class SearchOptions | supabase-csharp",
    "keywords": "Class SearchOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class SearchOptions Inheritance object SearchOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Limit Number of files to be returned [JsonProperty(\"limit\")] public int Limit { get; set; } Property Value int Offset Starting position of query [JsonProperty(\"offset\")] public int Offset { get; set; } Property Value int Search The search string to filter files by [JsonProperty(\"search\")] public string Search { get; set; } Property Value string SortBy Column to sort by. Can be any colum inside of a FileObject [JsonProperty(\"sortBy\")] public SortBy SortBy { get; set; } Property Value SortBy"
  },
  "api/Supabase.Storage.SortBy.html": {
    "href": "api/Supabase.Storage.SortBy.html",
    "title": "Class SortBy | supabase-csharp",
    "keywords": "Class SortBy Namespace Supabase.Storage Assembly Supabase.Storage.dll public class SortBy Inheritance object SortBy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Properties Column [JsonProperty(\"column\")] public string? Column { get; set; } Property Value string Order [JsonProperty(\"order\")] public string? Order { get; set; } Property Value string"
  },
  "api/Supabase.Storage.StorageBucketApi.html": {
    "href": "api/Supabase.Storage.StorageBucketApi.html",
    "title": "Class StorageBucketApi | supabase-csharp",
    "keywords": "Class StorageBucketApi Namespace Supabase.Storage Assembly Supabase.Storage.dll public class StorageBucketApi : IStorageBucketApi<Bucket>, IGettableHeaders Inheritance object StorageBucketApi Implements IStorageBucketApi<Bucket> IGettableHeaders Derived Client Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StorageBucketApi(string, ClientOptions?, Dictionary<string, string>?) protected StorageBucketApi(string url, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string options ClientOptions headers Dictionary<string, string> StorageBucketApi(string, Dictionary<string, string>?) protected StorageBucketApi(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Properties GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor will ALWAYS take precendece over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Headers public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options public ClientOptions Options { get; protected set; } Property Value ClientOptions Url protected string Url { get; set; } Property Value string Methods CreateBucket(string, BucketUpsertOptions?) Creates a new Storage bucket public Task<string> CreateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<string> Bucket Id DeleteBucket(string) Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first EmptyBucket(string) public Task<GenericResponse?> DeleteBucket(string id) Parameters id string Returns Task<GenericResponse> EmptyBucket(string) Removes all objects inside a single bucket. public Task<GenericResponse?> EmptyBucket(string id) Parameters id string Returns Task<GenericResponse> GetBucket(string) Retrieves the details of an existing Storage bucket. public Task<Bucket?> GetBucket(string id) Parameters id string Returns Task<Bucket> ListBuckets() Retrieves the details of all Storage buckets within an existing product. public Task<List<Bucket>?> ListBuckets() Returns Task<List<Bucket>> UpdateBucket(string, BucketUpsertOptions?) Updates a Storage bucket public Task<Bucket?> UpdateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<Bucket>"
  },
  "api/Supabase.Storage.StorageFileApi.html": {
    "href": "api/Supabase.Storage.StorageFileApi.html",
    "title": "Class StorageFileApi | supabase-csharp",
    "keywords": "Class StorageFileApi Namespace Supabase.Storage Assembly Supabase.Storage.dll public class StorageFileApi : IStorageFileApi<FileObject> Inheritance object StorageFileApi Implements IStorageFileApi<FileObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StorageFileApi(string, Dictionary<string, string>?, string?) public StorageFileApi(string url, Dictionary<string, string>? headers = null, string? bucketId = null) Parameters url string headers Dictionary<string, string> bucketId string StorageFileApi(string, string, ClientOptions?, Dictionary<string, string>?) public StorageFileApi(string url, string bucketId, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string bucketId string options ClientOptions headers Dictionary<string, string> Properties BucketId protected string? BucketId { get; set; } Property Value string Headers protected Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options public ClientOptions Options { get; protected set; } Property Value ClientOptions Url protected string Url { get; set; } Property Value string Methods CreateSignedUrl(string, int, TransformOptions?) Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds. public Task<string> CreateSignedUrl(string path, int expiresIn, TransformOptions? transformOptions = null) Parameters path string The file path to be downloaded, including the current file name. For example folder/image.png. expiresIn int The number of seconds until the signed URL expires. For example, 60 for a URL which is valid for one minute. transformOptions TransformOptions Returns Task<string> CreateSignedUrls(List<string>, int) Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds. public Task<List<CreateSignedUrlsResponse>?> CreateSignedUrls(List<string> paths, int expiresIn) Parameters paths List<string> paths The file paths to be downloaded, including the current file names. For example [folder/image.png, 'folder2/image2.png']. expiresIn int The number of seconds until the signed URLs expire. For example, 60 for URLs which are valid for one minute. Returns Task<List<CreateSignedUrlsResponse>> CreateUploadSignedUrl(string) Creates an upload signed URL. Use it to upload a file straight to the bucket without credentials public Task<UploadSignedUrl> CreateUploadSignedUrl(string supabasePath) Parameters supabasePath string The file path, including the current file name. For example folder/image.png. Returns Task<UploadSignedUrl> Download(string, TransformOptions?, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. For public buckets DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) public Task<byte[]> Download(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> Download(string, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. For public buckets DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) public Task<byte[]> Download(string supabasePath, EventHandler<float>? onProgress = null) Parameters supabasePath string onProgress EventHandler<float> Returns Task<byte[]> Download(string, string, TransformOptions?, EventHandler<float>?) Downloads a file from a private bucket. For public buckets, use DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) public Task<string> Download(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> Download(string, string, EventHandler<float>?) Downloads a file from a private bucket. For public buckets, use DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) public Task<string> Download(string supabasePath, string localPath, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string onProgress EventHandler<float> Returns Task<string> DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. This method DOES NOT VERIFY that the file is actually public. public Task<byte[]> DownloadPublicFile(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) Downloads a public file to the filesystem. This method DOES NOT VERIFY that the file is actually public. public Task<string> DownloadPublicFile(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> GetPublicUrl(string, TransformOptions?) A simple convenience function to get the URL for an asset in a public bucket.If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset. public string GetPublicUrl(string path, TransformOptions? transformOptions) Parameters path string transformOptions TransformOptions Returns string List(string, SearchOptions?) Lists all the files within a bucket. public Task<List<FileObject>?> List(string path = \"\", SearchOptions? options = null) Parameters path string options SearchOptions Returns Task<List<FileObject>> Move(string, string) Moves an existing file, optionally renaming it at the same time. public Task<bool> Move(string fromPath, string toPath) Parameters fromPath string The original file path, including the current file name. For example folder/image.png. toPath string The new file path, including the new file name. For example folder/image-copy.png. Returns Task<bool> Remove(List<string>) Deletes files within the same bucket public Task<List<FileObject>?> Remove(List<string> paths) Parameters paths List<string> An array of files to be deletes, including the path and file name. For example [folder/image.png]. Returns Task<List<FileObject>> Remove(string) Deletes file within the same bucket public Task<FileObject?> Remove(string path) Parameters path string A path to delete, for example folder/image.png. Returns Task<FileObject> Update(byte[], string, FileOptions?, EventHandler<float>?) Replaces an existing file at the specified path with a new one. public Task<string> Update(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters data byte[] supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions HTTP headers. onProgress EventHandler<float> Returns Task<string> Update(string, string, FileOptions?, EventHandler<float>?) Replaces an existing file at the specified path with a new one. public Task<string> Update(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters localFilePath string File source path. supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions HTTP headers. onProgress EventHandler<float> Returns Task<string> Upload(byte[], string, FileOptions?, EventHandler<float>?, bool) Uploads a byte array to an existing bucket. public Task<string> Upload(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> Upload(string, string, FileOptions?, EventHandler<float>?, bool) Uploads a file to an existing bucket. public Task<string> Upload(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string File Source Path supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(byte[], UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Uploads a byte array using a pre-generated Signed Upload Url public Task<string> UploadToSignedUrl(byte[] data, UploadSignedUrl signedUrl, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] signedUrl UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(string, UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Uploads a file to using a pre-generated Signed Upload Url public Task<string> UploadToSignedUrl(string localFilePath, UploadSignedUrl signedUrl, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string File Source Path signedUrl UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string>"
  },
  "api/Supabase.Storage.TransformOptions.ResizeType.html": {
    "href": "api/Supabase.Storage.TransformOptions.ResizeType.html",
    "title": "Enum TransformOptions.ResizeType | supabase-csharp",
    "keywords": "Enum TransformOptions.ResizeType Namespace Supabase.Storage Assembly Supabase.Storage.dll The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit. public enum TransformOptions.ResizeType Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields [MapTo(\"contain\", null)] [EnumMember(Value = \"contain\")] Contain = 1 [MapTo(\"cover\", null)] [EnumMember(Value = \"cover\")] Cover = 0 [MapTo(\"fill\", null)] [EnumMember(Value = \"fill\")] Fill = 2"
  },
  "api/Supabase.Storage.TransformOptions.html": {
    "href": "api/Supabase.Storage.TransformOptions.html",
    "title": "Class TransformOptions | supabase-csharp",
    "keywords": "Class TransformOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class TransformOptions Inheritance object TransformOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) TransformOptionsExtension.ToQueryCollection(TransformOptions) Properties Format Specify the format of the image requested. When using 'origin' we force the format to be the same as the original image, bypassing automatic browser optimisation such as webp conversion [JsonProperty(\"format\")] public string Format { get; set; } Property Value string Height The height of the image in pixels. [JsonProperty(\"height\")] public int? Height { get; set; } Property Value int? Quality Set the quality of the returned image, this is percentage based, default 80 [JsonProperty(\"quality\")] public int Quality { get; set; } Property Value int Resize The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit. [JsonProperty(\"resize\")] public TransformOptions.ResizeType Resize { get; set; } Property Value TransformOptions.ResizeType Width The width of the image in pixels. [JsonProperty(\"width\")] public int? Width { get; set; } Property Value int?"
  },
  "api/Supabase.Storage.UploadSignedUrl.html": {
    "href": "api/Supabase.Storage.UploadSignedUrl.html",
    "title": "Class UploadSignedUrl | supabase-csharp",
    "keywords": "Class UploadSignedUrl Namespace Supabase.Storage Assembly Supabase.Storage.dll Represents a Generated Upload Signed Url - can be used to upload a file without needing a logged in token or user. public class UploadSignedUrl Inheritance object UploadSignedUrl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadSignedUrl(Uri, string, string) public UploadSignedUrl(Uri signedUrl, string token, string key) Parameters signedUrl Uri token string key string Properties Key The Key that can be uploaded to (the supabase filename) public string Key { get; } Property Value string SignedUrl The Full Signed Url public Uri SignedUrl { get; } Property Value Uri Token The generated token public string Token { get; } Property Value string"
  },
  "api/Supabase.Storage.html": {
    "href": "api/Supabase.Storage.html",
    "title": "Namespace Supabase.Storage | supabase-csharp",
    "keywords": "Namespace Supabase.Storage Classes Bucket BucketUpsertOptions Client ClientOptions Options that can be passed into the Storage Client CreateSignedUrlResponse CreateSignedUrlsResponse ErrorResponse FileObject FileOptions GenericResponse SearchOptions SortBy StorageBucketApi StorageFileApi TransformOptions UploadSignedUrl Represents a Generated Upload Signed Url - can be used to upload a file without needing a logged in token or user. Enums TransformOptions.ResizeType The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit."
  },
  "api/Supabase.SupabaseModel.html": {
    "href": "api/Supabase.SupabaseModel.html",
    "title": "Class SupabaseModel | supabase-csharp",
    "keywords": "Class SupabaseModel Namespace Supabase Assembly Supabase.dll Depreciated [Obsolete] public abstract class SupabaseModel : BaseModel Inheritance object BaseModel SupabaseModel Inherited Members BaseModel.Update<T>(CancellationToken) BaseModel.Delete<T>(CancellationToken) BaseModel.BaseUrl BaseModel.RequestClientOptions BaseModel.TableName BaseModel.PrimaryKey object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Supabase.SupabaseOptions.html": {
    "href": "api/Supabase.SupabaseOptions.html",
    "title": "Class SupabaseOptions | supabase-csharp",
    "keywords": "Class SupabaseOptions Namespace Supabase Assembly Supabase.dll Options available for Supabase Client Configuration public class SupabaseOptions Inheritance object SupabaseOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.MergeLeft<T, K, V>(T, params IDictionary<K, V>[]) Fields Headers Allows developer to specify options that will be passed to all child Supabase clients. public Dictionary<string, string> Headers Field Value Dictionary<string, string> Schema Schema to be used in Postgres / Realtime public string Schema Field Value string Properties AuthUrlFormat The Supabase Auth Url Format public string AuthUrlFormat { get; set; } Property Value string AutoConnectRealtime Should the Client automatically connect to Realtime? public bool AutoConnectRealtime { get; set; } Property Value bool AutoRefreshToken Should the Client automatically handle refreshing the User's Token? public bool AutoRefreshToken { get; set; } Property Value bool FunctionsUrlFormat The Supabase Functions Url Format public string FunctionsUrlFormat { get; set; } Property Value string RealtimeUrlFormat The Supabase Realtime Url Format public string RealtimeUrlFormat { get; set; } Property Value string RestUrlFormat The Supabase Postgrest Url Format public string RestUrlFormat { get; set; } Property Value string SessionHandler Functions passed to Gotrue that handle sessions. By default these do nothing for persistence. public IGotrueSessionPersistence<Session> SessionHandler { get; set; } Property Value IGotrueSessionPersistence<Session> StorageClientOptions Specifies Options passed to the StorageClient. public ClientOptions StorageClientOptions { get; set; } Property Value ClientOptions StorageUrlFormat The Supabase Storage Url Format public string StorageUrlFormat { get; set; } Property Value string"
  },
  "api/Supabase.SupabaseTable-1.html": {
    "href": "api/Supabase.SupabaseTable-1.html",
    "title": "Class SupabaseTable<TModel> | supabase-csharp",
    "keywords": "Class SupabaseTable<TModel> Namespace Supabase Assembly Supabase.dll A Supabase wrapper for a Postgrest Table. public class SupabaseTable<TModel> : Table<TModel>, ISupabaseTable<TModel, RealtimeChannel>, IPostgrestTable<TModel>, IGettableHeaders where TModel : BaseModel, new() Type Parameters TModel Model that implements BaseModel Inheritance object Table<TModel> SupabaseTable<TModel> Implements ISupabaseTable<TModel, RealtimeChannel> IPostgrestTable<TModel> IGettableHeaders Inherited Members Table<TModel>.Filter<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, TCriterion) Table<TModel>.Filter<TCriterion>(string, Constants.Operator, TCriterion) Table<TModel>.Not(IPostgrestQueryFilter) Table<TModel>.Not<TCriterion>(string, Constants.Operator, TCriterion) Table<TModel>.Not<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, TCriterion) Table<TModel>.Not<TCriterion>(string, Constants.Operator, List<TCriterion>) Table<TModel>.Not<TCriterion>(Expression<Func<TModel, object>>, Constants.Operator, List<TCriterion>) Table<TModel>.Not(string, Constants.Operator, Dictionary<string, object>) Table<TModel>.Not(Expression<Func<TModel, object>>, Constants.Operator, Dictionary<string, object>) Table<TModel>.And(List<IPostgrestQueryFilter>) Table<TModel>.Or(List<IPostgrestQueryFilter>) Table<TModel>.Match(TModel) Table<TModel>.Match(Dictionary<string, string>) Table<TModel>.Order(Expression<Func<TModel, object>>, Constants.Ordering, Constants.NullPosition) Table<TModel>.Order(string, Constants.Ordering, Constants.NullPosition) Table<TModel>.Order(string, string, Constants.Ordering, Constants.NullPosition) Table<TModel>.Range(int) Table<TModel>.Range(int, int) Table<TModel>.Select(string) Table<TModel>.Select(Expression<Func<TModel, object[]>>) Table<TModel>.Where(Expression<Func<TModel, bool>>) Table<TModel>.Limit(int, string) Table<TModel>.OnConflict(string) Table<TModel>.OnConflict(Expression<Func<TModel, object>>) Table<TModel>.Columns(string[]) Table<TModel>.Columns(Expression<Func<TModel, object[]>>) Table<TModel>.Offset(int, string) Table<TModel>.Insert(TModel, QueryOptions, CancellationToken) Table<TModel>.Insert(ICollection<TModel>, QueryOptions, CancellationToken) Table<TModel>.Upsert(TModel, QueryOptions, CancellationToken) Table<TModel>.Upsert(ICollection<TModel>, QueryOptions, CancellationToken) Table<TModel>.Set(Expression<Func<TModel, object>>, object) Table<TModel>.Set(Expression<Func<TModel, KeyValuePair<object, object>>>) Table<TModel>.Update(QueryOptions, CancellationToken) Table<TModel>.Update(TModel, QueryOptions, CancellationToken) Table<TModel>.Delete(QueryOptions, CancellationToken) Table<TModel>.Delete(TModel, QueryOptions, CancellationToken) Table<TModel>.Count(Constants.CountType, CancellationToken) Table<TModel>.Single(CancellationToken) Table<TModel>.Get(CancellationToken) Table<TModel>.GenerateUrl() Table<TModel>.Clear() Table<TModel>.BaseUrl Table<TModel>.TableName Table<TModel>.GetHeaders object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SupabaseTable(IPostgrestClient, IRealtimeClient<RealtimeSocket, RealtimeChannel>, string) A Supabase wrapper for a Postgrest table. public SupabaseTable(IPostgrestClient postgrestClient, IRealtimeClient<RealtimeSocket, RealtimeChannel> realtimeClient, string schema = \"public\") Parameters postgrestClient IPostgrestClient realtimeClient IRealtimeClient<RealtimeSocket, RealtimeChannel> schema string Methods On(ListenType, PostgresChangesHandler) Add a realtime listener to this table. public Task<RealtimeChannel> On(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler handler) Parameters listenType PostgresChangesOptions.ListenType handler IRealtimeChannel.PostgresChangesHandler Returns Task<RealtimeChannel>"
  },
  "api/Supabase.html": {
    "href": "api/Supabase.html",
    "title": "Namespace Supabase | supabase-csharp",
    "keywords": "Namespace Supabase Classes Client A singleton class representing a Supabase Client. DefaultSupabaseSessionHandler Represents the default session handler for Gotrue - it does nothing by default. StatelessClient A Static class representing a Supabase Client. SupabaseModel Depreciated SupabaseOptions Options available for Supabase Client Configuration SupabaseTable<TModel> A Supabase wrapper for a Postgrest Table."
  },
  "index.html": {
    "href": "index.html",
    "title": "supabase-csharp | supabase-csharp",
    "keywords": "supabase-csharp"
  }
}